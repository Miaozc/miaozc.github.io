<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhiCheng&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-03T19:39:54.612Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZhiCheng Miao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的锁</title>
    <link href="http://yoursite.com/2019/09/04/concurrency-2019-09-Java%E4%B8%AD%E7%9A%84%E9%94%81/"/>
    <id>http://yoursite.com/2019/09/04/concurrency-2019-09-Java中的锁/</id>
    <published>2019-09-03T19:36:31.000Z</published>
    <updated>2019-09-03T19:39:54.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java中的锁-Lock"><a href="#Java中的锁-Lock" class="headerlink" title="Java中的锁(Lock)"></a>Java中的锁(<code>Lock</code>)</h3><h4 id="锁的简单介绍"><a href="#锁的简单介绍" class="headerlink" title="锁的简单介绍"></a>锁的简单介绍</h4><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p>在 Lock 接口出现之前，Java 中的应用程序对于多线程的并发安全处理只能基于synchronized 关键字来解决。但是 synchronized 在有些场景中会存在一些短板，也就是它并不适合于所有的并发场景。但是在 Java5 以后，Lock 的出现可以解决synchronized 在某些场景中的短板，它比 synchronized 更加灵活。</p><h5 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h5><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>简单介绍一下熟知的<code>ReentrantReadWriteLock</code>, 以下是并发编程大师Doug Lea提供的Demo</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RWDictionary</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Data&gt; m = <span class="hljs-keyword">new</span> TreeMap&lt;String, Data&gt;();</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock rwl = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Lock r = rwl.readLock();</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Lock w = rwl.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Data <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;</span><br><span class="line">        r.lock();</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> m.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">            r.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> String[] allKeys() &#123;</span><br><span class="line">        r.lock();</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> (String[]) m.keySet().toArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">finally</span> &#123; r.unlock(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Data <span class="hljs-title">put</span><span class="hljs-params">(String key, Data value)</span> </span>&#123;</span><br><span class="line">        w.lock();</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">return</span> m.put(key, value); &#125;</span><br><span class="line">        <span class="hljs-keyword">finally</span> &#123; w.unlock(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        w.lock();</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123; m.clear(); &#125;</span><br><span class="line">        <span class="hljs-keyword">finally</span> &#123; w.unlock(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然可以使用重入锁<code>ReentrantLock</code></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">X</span> </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();</span><br><span class="line">   <span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">     lock.lock();  <span class="hljs-comment">// block until condition holds</span></span><br><span class="line">     <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">       <span class="hljs-comment">// ... method body</span></span><br><span class="line">     &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="锁的实现原理"><a href="#锁的实现原理" class="headerlink" title="锁的实现原理"></a>锁的实现原理</h4><h5 id="同步队列-AQS-简介"><a href="#同步队列-AQS-简介" class="headerlink" title="同步队列 AQS 简介"></a>同步队列 <strong>AQS </strong>简介</h5><p>在 Lock 中，用到了一个同步队列 AQS，全称 AbstractQueuedSynchronizer，它是一个同步工具也是 Lock 用来实现线程同步的核心组件。从使用层面来说，AQS 的功能分为两种：</p><ol><li>独占锁</li></ol><blockquote><p>每次只有有一个线程持有锁, 比如ReentrantLock</p></blockquote><ol start="2"><li>共享锁</li></ol><blockquote><p>允许多个线程同时获取锁, 并发访问共享资源, 比如ReentrantReadWriteLock</p></blockquote><h5 id="AbstractQueuedSynchronizer原理分析"><a href="#AbstractQueuedSynchronizer原理分析" class="headerlink" title="AbstractQueuedSynchronizer原理分析"></a>AbstractQueuedSynchronizer原理分析</h5><p>AQS 队列内部维护的是一个 FIFO 的双向链表，这种结构的特点是每个数据结构都有两个指针，分别指向直接的后继节点和直接前驱节点。所以双向链表可以从任意一个节点开始很方便的访问前驱和后继。每个 Node 其实是由线程封装，当线程争抢锁失败后会封装成 Node 加入到 ASQ 队列中去；当获取锁的线程释放锁以后，会从队列中唤醒一个阻塞的节点(线程)。</p><p>以 <code>ReentrantReadWriteLock</code>作为切入点，来看看在这个场景中是如何使用 AQS 来实现线程的同步的</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock rwl = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Lock w = rwl.writeLock();</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Data <span class="hljs-title">put</span><span class="hljs-params">(String key, Data value)</span> </span>&#123;</span><br><span class="line">    w.lock();</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">return</span> m.put(key, value); &#125;</span><br><span class="line">    <span class="hljs-keyword">finally</span> &#123; w.unlock(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReentrantReadWriteLock中的lock调用了同步器的acquire()方法</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">sync.acquire(<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>acquire</strong> 是 AQS 中的方法</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp;acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要逻辑是</p><ol><li>通过 tryAcquire 尝试获取独占锁，如果成功返回 true，失败返回 false</li><li>如果 tryAcquire 失败，则会通过 addWaiter 方法将当前线程封装成 Node 添加到 AQS 队列尾部</li><li>acquireQueued，将 Node 作为参数，通过自旋去尝试获取锁。</li></ol><p>ReentrantReadWriteLock.Sync.tryAcquire代码如下</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">     * Walkthrough:</span></span><br><span class="line"><span class="hljs-comment">     * 1. If read count nonzero or write count nonzero</span></span><br><span class="line"><span class="hljs-comment">     *    and owner is a different thread, fail.</span></span><br><span class="line"><span class="hljs-comment">     * 2. If count would saturate, fail. (This can only</span></span><br><span class="line"><span class="hljs-comment">     *    happen if count is already nonzero.)</span></span><br><span class="line"><span class="hljs-comment">     * 3. Otherwise, this thread is eligible for lock if</span></span><br><span class="line"><span class="hljs-comment">     *    it is either a reentrant acquire or</span></span><br><span class="line"><span class="hljs-comment">     *    queue policy allows it. If so, update state</span></span><br><span class="line"><span class="hljs-comment">     *    and set owner.</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="hljs-keyword">int</span> c = getState();</span><br><span class="line">    <span class="hljs-keyword">int</span> w = exclusiveCount(c);</span><br><span class="line">    <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        <span class="hljs-comment">// Reentrant acquire</span></span><br><span class="line">        setState(c + acquires);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (writerShouldBlock() ||</span><br><span class="line">        !compareAndSetState(c, c + acquires))</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    setExclusiveOwnerThread(current);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AQS. addWaiter</strong></p><p>当 tryAcquire 方法获取锁失败以后，则会先调用 addWaiter 将当前线程封装成Node.入参 mode 表示当前节点的状态，传递的参数是 Node.EXCLUSIVE，表示独占状态。意味着重入锁用到了 AQS 的独占锁功能</p><ol><li>将当前线程封装成 Node</li><li>当前链表中的 tail 节点是否为空，如果不为空，则通过 cas 操作把当前线程的node 添加到 AQS 队列</li><li>如果为空或者 cas 失败，调用 enq 将节点添加到 AQS 队列</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">addWaiter</span><span class="hljs-params">(Node mode)</span> </span>&#123;</span><br><span class="line">        Node node = <span class="hljs-keyword">new</span> Node(Thread.currentThread(), mode);<span class="hljs-comment">//把当前线程封装为 Node</span></span><br><span class="line">        Node pred = tail; <span class="hljs-comment">//tail 是 AQS 中表示同比队列队尾的属性，默认是 null</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (pred != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//tail 不为空的情况下，说明队列中存在节点</span></span><br><span class="line">            node.prev = pred;<span class="hljs-comment">//把当前线程的 Node 的 prev 指向 tail</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<span class="hljs-comment">//通过 cas 把 node加入到 AQS 队列，也就是设置为 tail</span></span><br><span class="line">                pred.next = node;<span class="hljs-comment">//设置成功以后，把原 tail 节点的 next指向当前 node</span></span><br><span class="line">                <span class="hljs-keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        enq(node);<span class="hljs-comment">//tail=null,把 node 添加到同步队列</span></span><br><span class="line">        <span class="hljs-keyword">return</span> node;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>AQS .acquireQueued</strong><br>通过 addWaiter 方法把线程添加到链表后，会接着把 Node 作为参数传递给acquireQueued 方法，去竞争锁</p><ol><li>获取当前节点的 prev 节点</li><li>如果 prev 节点为 head 节点，那么它就有资格去争抢锁，调用 tryAcquire 抢占锁</li><li>抢占锁成功以后，把获得锁的节点设置为 head，并且移除原来的初始化 head节点</li><li>如果获得锁失败，则根据 waitStatus 决定是否需要挂起线程</li><li>最后，通过 cancelAcquire 取消获得锁的操作</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-keyword">int</span></span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">            arg)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">boolean</span> interrupted = <span class="hljs-keyword">false</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="hljs-keyword">final</span> Node p = node.predecessor();<span class="hljs-comment">//获取当前节点的 prev 节点</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<span class="hljs-comment">//如果是 head 节点，说明有资格去争抢锁</span></span><br><span class="line">                    setHead(node); <span class="hljs-comment">//获取锁成功，也就是hreadA 已经释放了锁，然后设置 head 为 ThreadB 获得执行权限</span></span><br><span class="line">                    p.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 把原 head 节点从链表中移除</span></span><br><span class="line">                            failed = <span class="hljs-keyword">false</span>;</span><br><span class="line">                    <span class="hljs-keyword">return</span> interrupted;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-comment">//ThreadA 可能还没释放锁，使得 ThreadB 在执行 tryAcquire 时会返回 false</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p,node) &amp;&amp;parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = <span class="hljs-keyword">true</span>; <span class="hljs-comment">//并且返回当前线程在等待过程中有没有中断过。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>houldParkAfterFailedAcquire</strong><br>如果 ThreadA 的锁还没有释放的情况下，ThreadB 和 ThreadC 来争抢锁肯定是会失败，那么失败以后会调用 shouldParkAfterFailedAcquire 方法Node 有 5 中状态，分别是：CANCELLED（1），SIGNAL（-1）、CONDITION（-2）、PROPAGATE(-3)、默认状态(0)CANCELLED: 在同步队列中等待的线程等待超时或被中断，需要从同步队列中取消该 Node 的节点, 其节点的 waitStatus 为 CANCELLED，即结束状态，进入该状态后的节点将不会再变化SIGNAL: 只要前置节点释放锁，就会通知标识为 SIGNAL 状态的后续节点的线程CONDITION： 和 Condition 有关系，后续会讲解PROPAGATE：共享模式下，PROPAGATE 状态的线程处于可运行状态0:初始状态这个方法的主要作用是，通过 Node 的状态来判断，ThreadA 竞争锁失败以后是否应该被挂起。</p><ol><li>如果 ThreadA 的 pred 节点状态为 SIGNAL，那就表示可以放心挂起当前线程</li><li>通过循环扫描链表把 CANCELLED 状态的节点移除</li><li>修改 pred 节点的状态为 SIGNAL,返回 false.</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> ws = pred.waitStatus;<span class="hljs-comment">//前置节点的waitStatus</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<span class="hljs-comment">//如果前置节点为 SIGNAL，意味着只需要等待其他前置节点的线程被释放，</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<span class="hljs-comment">//返回 true，意味着可以直接放心的挂起了</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//ws 大于 0，意味着 prev 节点取消了排队，直接移除这个节点就行</span></span><br><span class="line">        <span class="hljs-keyword">do</span> &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">            <span class="hljs-comment">//相当于: pred=pred.prev;</span></span><br><span class="line">            node.prev=pred;</span><br><span class="line">        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">//这里采用循环，从双向列表中移除 CANCELLED 的节点</span></span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//利用 cas 设置 prev 节点的状态为 SIGNAL(-1)</span></span><br><span class="line">        compareAndSetWaitStatus(pred, ws,Node.SIGNAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回 false 时，也就是不需要挂起，返回 true，则需要调用parkAndCheckInterrupt挂起当前线程</p><p><strong>parkAndCheckInterrupt</strong><br>使用 LockSupport.park 挂起当前线程编程 WATING 状态Thread.interrupted，返回当前线程是否被其他线程触发过中断请求，也就是thread.interrupt(); 如果有触发过中断请求，那么这个方法会返回当前的中断标识true，并且对中断标识进行复位标识已经响应过了中断请求。如果返回 true，意味着在 acquire 方法中会执行 selfInterrupt()。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">parkAndCheckInterrupt</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    LockSupport.park(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LockSupport类是Java6引入的一个类，提供了基本的线程同步原语。LockSupport实际上是调用了 Unsafe 类里的函数 unpark 函数为线程提供“许可(permit)”，线程调用 park 函数则等待“许可”。这个有点像信号量，但是这个“许可”是不能叠加的，“许可”是一次性的。permit 相当于 0/1 的开关，默认是 0，调用一次 unpark 就加 1 变成了 1.调用一次park 会消费 permit，又会变成 0。 如果再调用一次 park 会阻塞，因为 permit 已经是 0 了。直到 permit 变成 1.这时调用 unpark 会把 permit 设置为 1.每个线程都有一个相关的 permit，permit 最多只有一个，重复调用 unpark 不会累积selfInterrupt： 标识如果当前线程在 acquireQueued 中被中断过，则需要产生一个中断请求，原因是线程在调用 acquireQueued 方法的时候是不会响应中断请求的</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selfInterrupt</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="锁的释放"><a href="#锁的释放" class="headerlink" title="锁的释放"></a>锁的释放</h5><p>在 unlock 中，会调用 release 方法来释放锁</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">release</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123; <span class="hljs-comment">//释放锁成功</span></span><br><span class="line">        Node h = head; <span class="hljs-comment">//得到 aqs 中 head 节点</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (h != <span class="hljs-keyword">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<span class="hljs-comment">//如果 head 节点不为空并且状态！=0.调用 unparkSuccessor(h)唤醒后续节点</span></span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!isHeldExclusively())</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="hljs-keyword">int</span> nextc = getState() - releases;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> free = exclusiveCount(nextc) == <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (free)</span><br><span class="line">        setExclusiveOwnerThread(<span class="hljs-keyword">null</span>);</span><br><span class="line">    setState(nextc);</span><br><span class="line">    <span class="hljs-keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="AQS总结图"><a href="#AQS总结图" class="headerlink" title="AQS总结图"></a>AQS总结图</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java中的锁-Lock&quot;&gt;&lt;a href=&quot;#Java中的锁-Lock&quot; class=&quot;headerlink&quot; title=&quot;Java中的锁(Lock)&quot;&gt;&lt;/a&gt;Java中的锁(&lt;code&gt;Lock&lt;/code&gt;)&lt;/h3&gt;&lt;h4 id=&quot;锁的简单介绍&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="并发编程" scheme="http://yoursite.com/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>并发编程基础篇</title>
    <link href="http://yoursite.com/2019/08/30/concurrency-2019-08-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2019/08/30/concurrency-2019-08-并发编程基础篇/</id>
    <published>2019-08-30T09:35:27.000Z</published>
    <updated>2019-08-30T09:45:02.347Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程的基本使用"><a href="#线程的基本使用" class="headerlink" title="线程的基本使用"></a>线程的基本使用</h3><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><blockquote><p>因为是接口, 相比Thread类的实现更加灵活</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Runnable run..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread runnable  = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> JavaRunnable());</span><br><span class="line">        runnable.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h4><blockquote><p>实现了Runnable接口</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Thread run...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread thread = <span class="hljs-keyword">new</span> JavaThread();</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Callable-Future"><a href="#Callable-Future" class="headerlink" title="Callable/Future"></a>Callable/Future</h4><blockquote><p>这组组合优势在于可以拿到线程返回值</p><p>FutureTask实现了Runnable和Future</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Callable&lt;Integer&gt; callable = <span class="hljs-keyword">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    FutureTask&lt;Integer&gt; future = <span class="hljs-keyword">new</span> FutureTask&lt;Integer&gt;(callable);</span><br><span class="line">    <span class="hljs-keyword">new</span> Thread(future).start();</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadPool"><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService es = Executors.newFixedThreadPool(<span class="hljs-number">2</span>);</span><br><span class="line">es.submit(runnable);</span><br><span class="line">es.submit(thread);</span><br><span class="line">es.submit(callable);</span><br></pre></td></tr></table></figure><h3 id="线程的状态和生命周期"><a href="#线程的状态和生命周期" class="headerlink" title="线程的状态和生命周期"></a>线程的状态和生命周期</h3><h5 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h5><p>引用Thread类内部枚举<code>State</code>的注释:</p><blockquote><p> A thread state. A thread can be in one of the following states:</p><ul><li><strong>NEW</strong> A thread that has not yet started is in this state.//初始状态,创建了线程,但没有调用start()方法启动</li><li><strong>RUNNABLE</strong> A thread executing in the Java virtual machine is in this state.//运行中状态(该状态还有两个子状态: 1.就绪 2.运行), 虚拟机中正在运行的线程,不代表在系统中当前时间片正在执行</li><li><strong>BLOCKED</strong> A thread that is blocked waiting for a monitor lock is in this state.//阻塞状态,等待锁被阻塞的线程</li><li><strong>WAITING</strong> A thread that is waiting indefinitely for another thread to perform a particular action is in this state.//等待状态,无限期等待另一个线程执行操作(通知或中断)的线程</li><li><strong>TIMED_WAITING</strong> A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.//超时等待状态, 限时等待另一个线程执行操作的线程</li><li><strong>TERMINATED</strong> A thread that has exited is in this state.//终止状态,已退出线程, 等待JVM回收</li></ul></blockquote><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><blockquote><p>图片摘自《Java并发编程的艺术》</p></blockquote><img src="/2019/08/30/concurrency-2019-08-并发编程基础篇/线程的生命周期.png"><h3 id="线程常见方法"><a href="#线程常见方法" class="headerlink" title="线程常见方法"></a>线程常见方法</h3><h5 id="线程启动"><a href="#线程启动" class="headerlink" title="线程启动"></a>线程启动</h5><ul><li><code>thread.start()</code> 启动一个线程, 状态由NEW变成READY, 如果没有线程竞争的话</li></ul><h5 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h5><ul><li><code>Thread.currentThread().stop()</code> 已过时,不建议使用. 暴力终止, 相当于linux <code>kill -9</code></li><li><code>Thread.currentThread().interrupt()</code> 软终止, 给当前线程添加中断标识, 但不会立即中断, 中断逻辑交由run()逻辑决定</li><li><code>Thread.interrupted()</code> 获取中断状态并复位, 如果当前线程正处于阻塞状态(wait,join,sleep)会复位并且抛出InterruptedException</li><li><code>Thread.currentThread().isInterrupted()</code>判断是否中断, 默认返回false. 不代表线程已经结束, 该标识只是告诉程序, 线程已经被标记为已中断. </li></ul><h5 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h5><ul><li><code>Thread.currentThread().join()</code> 等待指定线程执行完毕, 等待过程处于WAITING状态</li><li><code>TimeUnit.MILLISECONDS.sleep(10)</code>线程睡眠,睡眠过程处于WAITING状态, 释放CPU资源,不会释放锁资源</li><li><code>object.wait()</code>借助object具体对象对当前线程进行等待, 并且释放锁, 进入等待队列</li><li><code>LockSupport.park()</code>与其说是阻塞,更喜欢用挂起来形容park方法, 因为他需要得到<code>unpark()</code>的许可才可以解除阻塞状态</li></ul><h5 id="线程唤醒"><a href="#线程唤醒" class="headerlink" title="线程唤醒"></a>线程唤醒</h5><ul><li><code>object.notify()</code> 随机唤醒处于等待队列的一个线程, 此后object对象如果获取到锁则进入READY状态.</li><li><code>object.notifyAll()</code> 唤醒所有处于等待队列的线程,唤醒后多个线程竞争同一个锁, 得到锁的线程处于READY状态,其他线程移步同步队列,处于BLOCKED状态</li><li><code>LockSupport.unpark()</code>为当前线程的<code>park()</code>提供一个许可从而唤醒线程,许可只能用一次. 也只会用一次.</li></ul><h3 id="Java中的锁"><a href="#Java中的锁" class="headerlink" title="Java中的锁"></a>Java中的锁</h3><h4 id="synchronized的基本使用"><a href="#synchronized的基本使用" class="headerlink" title="synchronized的基本使用"></a>synchronized的基本使用</h4><ol><li>对象级别: 作用在实例方法, 指定类同一个实例才会进入锁机制</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//法1: 修饰实例方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-comment">//TODO        </span></span><br><span class="line">    <span class="hljs-comment">//实例方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//法2:修饰实例代码块</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>类级别: 作用在全局, 指定类的所有实例都会进入锁机制</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//法1: 修饰静态方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//TODO</span></span><br><span class="line">&#125;   </span><br><span class="line"><span class="hljs-comment">//法2:修饰实例代码块</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">synchronized</span>(Object.class)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锁的存储"><a href="#锁的存储" class="headerlink" title="锁的存储"></a>锁的存储</h4><p>在 Hotspot 虚拟机中，对象在内存中的存储布局，可以分为三个区域:对象头(Header %}、实例数据(Instance Data)、对齐填充(Padding)</p><img src="/2019/08/30/concurrency-2019-08-并发编程基础篇/锁的存储.png"><p>当我们在 Java 代码中，使用 new 创建一个对象实例的时候，（hotspot 虚拟机）JVM 层面实际上会创建一个<br>instanceOopDesc 对象。Hotspot 虚拟机采用 OOP-Klass 模型来描述 Java 对象实例，OOP(Ordinary Object Point)指的是普通对象指针，Klass 用来描述对象实例的具体类型。Hotspot 采用instanceOopDesc 和 arrayOopDesc 来描述对象头，arrayOopDesc 对象用来描述数组类型instanceOopDesc 的定义在 Hotspot 源码中的instanceOop.hpp 文件中，另外，arrayOopDesc 的定义对应 arrayOop.hpp从 instanceOopDesc 代码中可以看到 instanceOopDesc继承自 oopDesc，oopDesc 的定义载 Hotspot 源码中的oop.hpp 文件中在普通实例对象中，oopDesc 的定义包含两个成员，分别是 _mark 和 _metadata_mark 表示对象标记、属于 markOop 类型，也就是接下来要讲解的 <code>Mark World</code>，它记录了对象和锁有关的信息_metadata 表示类元信息，类元信息存储的是对象指向它的类元数据(Klass)的首地址，其中 Klass 表示普通指针、_compressed_klass 表示压缩类指针</p><h5 id="MarkWord-对象头"><a href="#MarkWord-对象头" class="headerlink" title="MarkWord(对象头 %}"></a>MarkWord(对象头 %}</h5><p>Mark word 记录了对象和锁有关的信息，当某个对象被synchronized 关键字当成同步锁时，那么围绕这个锁的一<br>系列操作都和 Mark word 有关系。Mark Word 在 32 位虚拟机的长度是 32bit、在 64 位虚拟机的长度是 64bit。<br>Mark Word里面存储的数据会随着锁标志位的变化而变化，Mark Word 可能变化为存储以下 5 中情况</p><img src="/2019/08/30/concurrency-2019-08-并发编程基础篇/MarkWord.png"><h5 id="为什么任何对象都可以实现锁"><a href="#为什么任何对象都可以实现锁" class="headerlink" title="为什么任何对象都可以实现锁?"></a>为什么任何对象都可以实现锁?</h5><ol><li>Java 中的每个对象都派生自 Object 类，而每个Java Object 在 JVM 内部都有一个 native 的 C++对象<br>oop/oopDesc 进行对应。</li><li>线程在获取锁的时候，实际上就是获得一个监视器对象(monitor) ,monitor 可以认为是一个同步对象，所有的Java 对象是天生携带 monitor。多个线程访问同步代码块时，相当于去争抢对象监视器修改对象中的锁标识,hotspot 源码的markOop.hpp 文件中ObjectMonitor这个对象和线程争抢锁的逻辑有密切的关系</li></ol><h5 id="synchronized锁升级"><a href="#synchronized锁升级" class="headerlink" title="synchronized锁升级"></a>synchronized锁升级</h5><h6 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h6><p>大部分情况下，锁不仅仅不存在多线程竞争，而是总是由同一个线程多次获得，为了让线程获取锁的代价更低就引入了偏向锁的概念。当一个线程访问加了同步锁的代码块时，会在对象头中存储当前线程的 ID，后续这个线程进入和退出这段加了同步锁的代码块时，不需要再次加锁和释放锁。而是直接比较对象头里面是否存储了指向当前线程的偏向锁。如果相等表示偏向锁是偏向于当前线程的，就不需要再尝试获得锁了</p><p>在我们的应用开发中，绝大部分情况下一定会存在 2 个以上的线程竞争，那么如果开启偏向锁，反而会提升获取锁的资源消耗。所以可以通过 jvm 参数UseBiasedLocking 来设置开启或关闭偏向锁</p><p>为什么偏向锁只有撤销,没有释放? </p><blockquote><p>当处于全局安全点( 没有线程执行指令)的时候, 会进行批量撤销,升级eopch的值, 撤销并且重新偏向</p></blockquote><p>什么是CAS?</p><blockquote><p>CAS的全称为Compare-And-Swap，是一条CPU的原子指令，其作用是让CPU比较后原子地更新某个位置的值，经过调查发现，其实现方式是基于硬件平台的汇编指令，就是说CAS是靠硬件实现的，JVM只是封装了汇编调用，那些AtomicInteger类便是使用了这些封装后的接口。</p></blockquote><img src="/2019/08/30/concurrency-2019-08-并发编程基础篇/偏向锁升级和撤销.png"><h6 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h6><p>适用于绝大数线程获得锁之后, 会在非常短的时间内释放线程. </p><p>轻量级锁在加锁过程中，用到了<code>自旋锁</code>所谓自旋，就是指当有另外一个线程来竞争锁时，这个线程会在原地循环等待，而不是把该线程给阻塞，直到那个获得锁的线程释放锁之后，这个线程就可以马上获得锁的。注意，锁在原地循环的时候，是会消耗 cpu 的，就相当于在执行一个啥也没有的 for 循环。所以，轻量级锁适用于那些同步代码块执行的很快的场景，这样，线程原地等待很短的时间就能够获得锁了。自旋锁的使用，其实也是有一定的概率背景，在大部分同步代码块执行的时间都是很短的。所以通过看似无异议的循环反而能提升锁的性能。但是自旋必须要有一定的条件控制，否则如果一个线程执行同步代码块的时间很长，那么这个线程不断的循环反而会消耗 CPU 资源。默认情况下自旋的次数是 10 次，可以通过 preBlockSpin 来修改在 JDK1.6 之后，引入了自适应自旋锁，自适应意味着自旋的次数不是固定不变的，而是根据前一次在同一个锁上自旋的时间以及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源</p><p>轻量级锁的锁释放逻辑其实就是获得锁的逆向逻辑，通过CAS 操作把线程栈帧中的 LockRecord 替换回到锁对象的<br>MarkWord 中，如果成功表示没有竞争。如果失败，表示当前锁存在竞争，那么轻量级锁就会膨胀成为重量级锁</p><img src="/2019/08/30/concurrency-2019-08-并发编程基础篇/轻量级锁.png"><h6 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h6><p>当轻量级锁膨胀到重量级锁之后，意味着线程只能被挂起阻塞(BLOCKED %}来等待被唤醒了。加了同步代码块以后,在字节码中会看到一个monitorenter 和 monitorexit。每一个 JAVA 对象都会与一个监视器 monitor 关联，我们<br>可以把它理解成为一把锁，当一个线程想要执行一段被synchronized 修饰的同步方法或者代码块时，该线程得先<br>获取到 synchronized 修饰的对象对应的 monitor。monitorenter 表示去获得一个对象监视器。monitorexit 表<br>示释放 monitor 监视器的所有权，使得其他被阻塞的线程可以尝试去获得这个监视器monitor 依赖操作系统的 MutexLock(互斥锁)来实现的, 线程被阻塞后便进入内核（Linux）调度状态，这个会导致系统在用户态与内核态之间来回切换，严重影响锁的性能</p><img src="/2019/08/30/concurrency-2019-08-并发编程基础篇/重量级锁.png"><h3 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h3><p>在多线程中, 保证跨线程之间的可见性.但不保证原子性。 被volatile修饰的属性/对象,编译后会新增一条lock的汇编指令, 从而实现基于总线锁/缓存锁的可见性. </p><h4 id="缓存一致性协议-MESI"><a href="#缓存一致性协议-MESI" class="headerlink" title="缓存一致性协议(MESI)"></a>缓存一致性协议(MESI)</h4><p>为了达到数据访问的一致，需要各个处理器在访问缓存时遵循一些协议，在读写时根据协议来操作，常见的协议有  MSI，MESI，MOSI 等。最常见的就是 MESI 协议。MESI 表示缓存行的四种状态，分别是</p><ol><li>M(Modify) 表示共享数据只缓存在当前 CPU 缓存中，并且是被修改状态，也就是缓存的数据和主内存中的数据不一致</li><li>E(Exclusive) 表示缓存的独占状态，数据只缓存在当前CPU 缓存中，并且没有被修改</li><li>S(Shared) 表示数据可能被多个 CPU 缓存，并且各个缓存中的数据和主内存数据一致</li><li>I(Invalid) 表示缓存已经失效在 MESI 协议中，每个缓存的缓存控制器不仅知道自己的读写操作，而且也监听(snoop)其它 Cache 的读写操作</li></ol><p>对于 MESI 协议，从 CPU 读写角度来说会遵循以下原则：CPU 读请求：缓存处于 M、E、S 状态都可以被读取，I 状态 CPU 只能从主存中读取数据CPU 写请求：缓存处于 M、E 状态才可以被写。对于 S 状态的写，需要将其他 CPU 中缓存行置为无效才可写使用总线锁和缓存锁机制之后，CPU 对于内存的操作大概可以抽象成下面这样的结构。从而达到缓存一致性效果</p><img src="/2019/08/30/concurrency-2019-08-并发编程基础篇/缓存一致性协议.png"><h3 id="JMM-Java抽象内存模型"><a href="#JMM-Java抽象内存模型" class="headerlink" title="JMM(Java抽象内存模型)"></a>JMM(Java抽象内存模型)</h3><h4 id="JMM简介"><a href="#JMM简介" class="headerlink" title="JMM简介"></a>JMM简介</h4><p>全称Java Memory Model. 在Java中导致可见性问题的根本原因是缓存以及重排序而 JMM 实际上就是提供了合理的禁用缓存以及禁止重排序的方法。所以它最核心的价值在于解决可见性和有序性。</p><p>JMM 抽象模型分为主内存、工作内存；主内存是所有线程共享的，一般是实例对象、静态字段、数组对象等存储在堆内存中的变量。工作内存是每个线程独占的，线程对变量的所有操作都必须在工作内存中进行，不能直接读写主内存中的变量，线程之间的共享变量值的传递都是基于主内存来完成</p><p>Java 内存模型底层实现可以简单的认为：通过内存屏障(memory barrier)禁止重排序，即时编译器根据具体的底层体系架构，将这些内存屏障替换成具体的 CPU 指令。对于编译器而言，内存屏障将限制它所能做的重排序优化。而对于处理器而言，内存屏障将会导致缓存的刷新操作。比如，对于 volatile，编译器将在 volatile 字段的读写操作前后各插入一些内存屏障。</p><p>为了提高程序的执行性能，编译器和处理器都会对指令做重排序，其中处理器的重排序在前面已经分析过了。所谓<br>的重排序其实就是指执行的指令顺序。编译器的重排序指的是程序编写的指令在编译之后，指令可能会产生重排序来优化程序的执行性能。从源代码到最终执行的指令，可能会经过三种重排序。</p><blockquote><ol><li>源代码↓</li><li>编译器优化重排序↓</li><li>指令级并行重排序↓</li><li>内存系统重排序↓</li><li>最终执行的指令序列</li></ol></blockquote><p>2 和 3 属于处理器重排序。这些重排序可能会导致可见性问题。编译器的重排序，JMM 提供了禁止特定类型的编译器重排序。处理器重排序，JMM 会要求编译器生成指令时，会插入内存屏障来禁止处理器重排序</p><p>JMM在程序中的应用形式: volatile、synchronized、final；</p><h4 id="HappenBefore规则"><a href="#HappenBefore规则" class="headerlink" title="HappenBefore规则"></a>HappenBefore规则</h4><p>它的意思表示的是前一个操作的结果对于后续操作是可见的，所以它是一种表达多个线程之间对于内存的可见性。<br>所以我们可以认为在 JMM 中，如果一个操作执行的结果需要对另一个操作课件，那么这两个操作必须要存在happens-before 关系。这两个操作可以是同一个线程，也可以是不同的线程</p><h5 id="JMM中建立的happen-before规则"><a href="#JMM中建立的happen-before规则" class="headerlink" title="JMM中建立的happen-before规则"></a>JMM中建立的happen-before规则</h5><blockquote><ol><li>程序顺序规则: 一个线程中的每个操作，happens-before 于该线程中的任意后续操作; 可以简单认为是 as-if-serial。 单个线程中的代码顺序不管怎么变，对于结果来说是不变的</li><li>监视器锁规则: 对于一个锁的解锁, happen-before于随后对这个锁的加锁</li><li>volatile变量规则: 对一个volatile 域的写, happen-before于任意后续对这个volatile域的读</li><li>传递性: 如果A happen-before B, 且 B happen-before C ,那么A happen-before C</li><li>start()规则: 如果线程A执行操作ThreadB.start(). 那么A线程的ThreadB.start()操作happen-before 于线程B中的任意操作</li><li>join()规则: 如果线程A执行操作ThreadB.join()并成功返回, 那么线程B中的任意操作happen-before于线程A从ThreadB.join()操作成功返回</li></ol></blockquote><p>as-if-serial语义给编写单线程程序的程序员创造了一个幻境: 单线程程序是按程序的顺序来执行的. </p><p>happen-before关系给编写正确同步的多线程程序的程序员创造了一个幻境: 正确同步的多线程程序是按happen-before指定的顺序来执行的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;线程的基本使用&quot;&gt;&lt;a href=&quot;#线程的基本使用&quot; class=&quot;headerlink&quot; title=&quot;线程的基本使用&quot;&gt;&lt;/a&gt;线程的基本使用&lt;/h3&gt;&lt;h4 id=&quot;实现Runnable接口&quot;&gt;&lt;a href=&quot;#实现Runnable接口&quot; class=&quot;
      
    
    </summary>
    
      <category term="并发编程" scheme="http://yoursite.com/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务</title>
    <link href="http://yoursite.com/2019/08/27/Spring-2019-08-Spring%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/08/27/Spring-2019-08-Spring事务/</id>
    <published>2019-08-27T09:28:26.000Z</published>
    <updated>2019-08-27T10:41:34.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事务配置"><a href="#事务配置" class="headerlink" title="事务配置"></a>事务配置</h3><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="hljs-tag"> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/tx/spring-tx-4.3.xsd</span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 配置事务通知属性 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionAdvice"</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"add*"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">"Exception,RuntimeException,SQLException"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"remove*"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">"Exception,RuntimeException,SQLException"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"edit*"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">"Exception,RuntimeException,SQLException"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"login"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"NOT_SUPPORTED"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"query*"</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">"true"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"transactionAdvice"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"transactionPointcut"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionPointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(public * com.xxx..*.service..*Service.*(..))"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h3><h4 id="事务基本概念"><a href="#事务基本概念" class="headerlink" title="事务基本概念"></a>事务基本概念</h4><p>事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。 特点：事务是恢复和并发控制的基本单位。事务应该具有 4 个属性：原子性、一致性、 隔离性、持久性。这四个属性通常称为 ACID 特性。</p><ol><li><p><code>原子性（Automicity）</code>: 一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</p></li><li><p><code>一致性（Consistency）</code>: 事务必须是使数据库从一个一致性状态变到另一个一致性状态。 一致性与原子性是密切相关的。</p></li><li><p><code>隔离性（Isolation）</code>: 一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><code>持久性（Durability）</code>: 持久性也称永久性（Permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何 </p><p>影响。</p></li></ol><h4 id="事务基本原理"><a href="#事务基本原理" class="headerlink" title="事务基本原理"></a>事务基本原理</h4><p>Spring 事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，Spring 是无法提供事务功能的。对于纯 JDBC 操作数据库，想要用到事务，可以按照以下步骤进行： </p><p>1、获取连接 Connection con = DriverManager.getConnection() </p><p>2、开启事务 con.setAutoCommit(true/false); </p><p>3、执行 CRUD </p><p>4、提交事务/回滚事务 con.commit() / con.rollback(); </p><p>5、关闭连接 conn.close(); </p><p>使用 Spring 的事务管理功能后，我们可以不再写步骤 2 和 4 的代码，而是由 Spirng 自动完成。 那么 Spring 是如何在我们书写的 CRUD 之前和之后开启事务和关闭事务的 呢？解决这个问题，也就可以从整体上理解 Spring 的事务管理实现原理了。下面简单地介绍下，注解方式为例子</p><p>配置文件开启注解驱动，在相关的类和方法上通过注解<code>@Transactional</code> 标识。 Spring 在启动的时候会去解析生成相关的 bean，这时候会查看拥有相关注解的类和方法，并且为这些类和方法生成代理，并根据@Transaction的相关参数进行相关配置注入， 这样就在代理中为我们把相关的事务处理掉了（开启正常提交事务，异常回滚事务）。 真正的数据库层的事务提交和回滚是通过 <code>binlog</code> 或者 <code>redo log</code> 实现的。</p><h4 id="Spring事务的传播属性"><a href="#Spring事务的传播属性" class="headerlink" title="Spring事务的传播属性"></a>Spring事务的传播属性</h4><p>所谓 spring 事务的传播属性，就是定义在存在多个事务同时存在的时候，spring 应该如何处理这些事务的行为。这些属性在 TransactionDefinition 中定义，具体常量的解释见下表： </p><table><thead><tr><th>常量名称</th><th>常量解释</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择，也是 Spring默认的事务的传播。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。新建的事务将和被挂起的事务没有任何关系，是两个独立的事务，外层事务失败回滚之后，不能回滚内层事务执行的结果， 内层事务失败抛出异常，外层事务捕获，也可以不处理回滚操作</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>支持当前事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性执行。它使用了一个单独的事务，这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionManager事务管理器起效。</td></tr></tbody></table><h4 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h4><table><thead><tr><th>隔离级别</th><th>导致的问题</th></tr></thead><tbody><tr><td>Read-Uncommitted</td><td>导致脏读</td></tr><tr><td>Read-Committed</td><td>避免脏读，允许不可重复读和幻读</td></tr><tr><td>Repeatable-Read</td><td>避免脏读，不可重复读，允许幻读</td></tr><tr><td>Serializable</td><td>串行化读，事务只能一个一个执行，避免了脏读、不可重复读、幻读。执行效率慢，使用时慎重</td></tr></tbody></table><ul><li>脏读：一事务对数据进行了增删改，但未提交，另一事务可以读取到未提交的数据。如果第一个事务这时候回滚了，那么第二个事务就读到了脏数据。 </li><li>不可重复读：一个事务中发生了两次读操作，第一次读操作和第二次操作之间，另外一个事务对数据进行了修改，这时候两次读取的数据是不一致的。 </li><li>幻读：第一个事务对一定范围的数据进行批量修改，第二个事务在这个范围增加一条数据，这时候第一个事务就会丢失对新增数据的修改。</li></ul><p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。大多数的数据库默认隔离级别为 Read Commited，比如 SqlServer、Oracle 少数数据库默认隔离级别为：Repeatable Read 比如： MySQL InnoDB</p><h4 id="Spring-中的隔离级别"><a href="#Spring-中的隔离级别" class="headerlink" title="Spring 中的隔离级别"></a>Spring 中的隔离级别</h4><table><thead><tr><th>常量</th><th>解释</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>这是个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应。</td></tr><tr><td>ISOLATION_READ_UNCOMMITTED</td><td>这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。</td></tr></tbody></table><h4 id="事务的嵌套"><a href="#事务的嵌套" class="headerlink" title="事务的嵌套"></a>事务的嵌套</h4><p>我们通过分析一些嵌套事务的场景，来深入理解 Spring 事务传播的机制。假设外层事务 Service A 的 Method A() 调用内层 Service B 的 Method B() </p><h5 id="PROPAGATION-REQUIRED-Spring-默认"><a href="#PROPAGATION-REQUIRED-Spring-默认" class="headerlink" title="PROPAGATION_REQUIRED(Spring 默认)"></a><code>PROPAGATION_REQUIRED(Spring 默认)</code></h5><p>如果 ServiceB.MethodB() 的事务级别定义为 PROPAGATION_REQUIRED，那么执行ServiceA.MethodA() 的时候 Spring 已经起了事务，这时调用 ServiceB.MethodB()， ServiceB.MethodB() 看到自己已经运行在 ServiceA.MethodA() 的事务内部，就<code>不再起新的事务</code>。 假如 ServiceB.MethodB() 运行的时候发现自己没有在事务中，他就会为自己分配一个事务。这样，<code>在 ServiceA.MethodA() 或者在 ServiceB.MethodB() 内的任何地方出现异常， 事务都会被回滚</code>。</p><h5 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a><code>PROPAGATION_REQUIRES_NEW</code></h5><p>比如我们设计 ServiceA.MethodA() 的事务级别为 PROPAGATION_REQUIRED， ServiceB.MethodB() 的事务级别为 PROPAGATION_REQUIRES_NEW。 那么当执行到 ServiceB.MethodB() 的时候，ServiceA.MethodA() 所在的事务就会挂起，ServiceB.MethodB() 会起一个新的事务，等待 ServiceB.MethodB() 的事务完成以后，它才继续执行。他与PROPAGATION_REQUIRED的事务区别在于事务的回滚程度, 因为ServiceB.MethodB()是一个新起的事务,那么就是存在两个不同的事务, 如果ServiceB.MethodB()已经提交, 那么<code>ServiceA.MethodA()失败回滚ServiceB.MethodB()是不会回滚的</code>. 如果ServiceB.MethodB()失败回滚, 如果他<code>抛出异常被ServiceA.MethodA()捕获, ServiceA.MethodA()事务仍然可能提交</code>(主要看 B 抛出的异常是不是 A 会回滚的异常)。 </p><h5 id="PROPAGATION-SUPPORTS"><a href="#PROPAGATION-SUPPORTS" class="headerlink" title="PROPAGATION_SUPPORTS"></a><code>PROPAGATION_SUPPORTS</code></h5><p>假设 ServiceB.MethodB() 的事务级别为 PROPAGATION_SUPPORTS，那么当执行到ServiceB.MethodB()时，如果发现 ServiceA.MethodA()已经开启了一个事务，则加入当前的事务，如果发现 ServiceA.MethodA()没有开启事务，则自己也不开启事务。这种时候，<code>内部方法的事务性完全依赖于最外层的事务</code>。</p><h5 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a><code>PROPAGATION_NESTED</code></h5><p>现在的情况就变得比较复杂了, ServiceB.MethodB()的事务属性被配置为PROPAGATION_NESTED, 此时两者之间又将如何协作呢? ServiceB.MethodB() 如果 rollback, 那么内部事务(即 ServiceB.MethodB()) 将回滚到它执行前的 SavePoint 而外部事务(即 ServiceA.MethodA()) 可以有以下两种处理方式: </p><ol><li>捕获异常，执行异常分支逻辑</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MethodA</span><span class="hljs-params">()</span> </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">try</span> &#123; </span><br><span class="line">        ServiceB.MethodB(); </span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (SomeException) &#123; </span><br><span class="line">        <span class="hljs-comment">// 执行其他业务, 如 ServiceC.MethodC(); </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式也是嵌套事务最右价值的地方, 它起到了分之执行的效果, 如果ServiceB.MethodB()失败, 那么执行 ServiceC.MethodC(), 而 ServiceB.MethodB() 已经回滚到它执行之前的 SavePoint, 所以不会产生脏数据(相当于此方法从未执行过), 这种特性可以用在某些特殊的业务中, 而 PROPAGATION_REQUIRED 和PROPAGATION_REQUIRES_NEW 都没有办法做到这一点。</p><ol start="2"><li>外部事务回滚/提交 代码不做任何修改</li></ol><p>那么如果内部事务(ServiceB.MethodB()) rollback, 那么首先 ServiceB.MethodB() 回滚到它执行之前的SavePoint(在任何情况下都会如此), 外部事务(即 ServiceA.MethodA()) 将根据具体的配置决定自己是commit 还是 rollback。 </p><h3 id="浅谈分布式事务"><a href="#浅谈分布式事务" class="headerlink" title="浅谈分布式事务"></a>浅谈分布式事务</h3><p>现今互联网界，分布式系统和微服务架构盛行。一个简单操作，在服务端非常可能是由多个服务和数据库实例协同完成的。在一致性要求较高的场景下，多个独立操作之间的一致性问题显得格外棘手。 基于水平扩容能力和成本考虑，传统的强一致的解决方案（e.g.单机事务）纷纷被抛弃。 其理论依据就是响当当的 CAP 原理。往往为了可用性和分区容错性，忍痛放弃强一致支持，转而追求最终一致性。</p><h4 id="分布式系统的特性"><a href="#分布式系统的特性" class="headerlink" title="分布式系统的特性"></a>分布式系统的特性</h4><p>在分布式系统中，同时满足 CAP 定律中的一致性 Consistency、可用性 Availability 和分区容错性 Partition Tolerance 三者是不可能的。在绝大多数的场景，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证最终一致性。 </p><p>分布式事务服务（Distributed Transaction Service，DTS）是一个分布式事务框架，用来保障在大规模分布式环境下事务的最终一致性。 CAP 理论告诉我们在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络 硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的，所以我们只能在一致性和可用性之间进行权衡。 为了保障系统的可用性，互联网系统大多将强一致性需求转换成最终一致性的需求，并通过系统执行幂等性的保证，保证数据的最终一致性。</p><h4 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h4><ul><li><code>强一致性</code> : 当更新操作完成之后，任何多个后续进程或者线程的访问都会返回最新的更新过的值。这种是对用户最友好的，就是用户上一次写什么，下一次就保证能读到什么。 根据 CAP 理论，这种实现需要牺牲可用性。</li><li><code>弱一致性</code> : 系统并不保证后续进程或者线程的访问都会返回最新的更新过的值。系统在数据写入成功之后，不承诺立即可以读到最新写入的值，也不会具体的承诺多久之后可以读到。 </li><li><code>最终一致性</code> : 弱一致性的特定形式。系统保证在没有后续更新的前提下，系统最终返回上一次更新操作的值。在没有故障发生的前提下，不一致窗口的时间主要受通信延迟， 系统负载和复制副本的个数影响。DNS 是一个典型的最终一致性系统。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事务配置&quot;&gt;&lt;a href=&quot;#事务配置&quot; class=&quot;headerlink&quot; title=&quot;事务配置&quot;&gt;&lt;/a&gt;事务配置&lt;/h3&gt;&lt;figure class=&quot;highlight xml hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="事务" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="transaction" scheme="http://yoursite.com/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>渐入Spring-MVC</title>
    <link href="http://yoursite.com/2019/08/25/Spring-2019-08-%E6%B8%90%E5%85%A5Spring-MVC/"/>
    <id>http://yoursite.com/2019/08/25/Spring-2019-08-渐入Spring-MVC/</id>
    <published>2019-08-25T11:10:42.000Z</published>
    <updated>2019-08-27T10:48:05.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-MVC-初体验"><a href="#Spring-MVC-初体验" class="headerlink" title="Spring MVC 初体验"></a>Spring MVC 初体验</h3><h4 id="初探-Spring-MVC-请求处理流程"><a href="#初探-Spring-MVC-请求处理流程" class="headerlink" title="初探 Spring MVC 请求处理流程"></a>初探 Spring MVC 请求处理流程</h4><p>Spring MVC 相对于前面的章节算是比较简单的，我们首先引用《Spring in Action》上的一张图来了解 Spring MVC 的核心组件和大致处理流程：</p><img src="/2019/08/25/Spring-2019-08-渐入Spring-MVC/SpringMVC处理流程.jpg"><p>从上图中看到</p><p>①、DispatcherServlet 是 SpringMVC 中的前端控制器(Front Controller),负责接收 Request 并将 Request 转发给对应的处理组件。<br>② 、 HanlerMapping 是 SpringMVC 中 完 成 url 到 Controller 映 射 的 组 件 。DispatcherServlet 接收 Request,然后从 HandlerMapping 查找处理 Request 的Controller。<br>③、Controller 处理 Request,并返回 ModelAndView 对象,Controller 是 SpringMVC中负责处理 Request 的组件(类似于 Struts2 中的 Action),ModelAndView 是封装结果视图的组件。<br>④、⑤、⑥视图解析器解析 ModelAndView 对象并返回对应的视图给客户端。容器初始化时会建立所有 url 和 Controller 中的Method 的对应关系，保存到 HandlerMapping 中，用户请求是根据 Request 请求的url 快速定位到 Controller 中的某个方法。在 Spring 中先将 url 和 Controller 的对应关系,保存到 Map&lt;url,Controller&gt;中。Web 容器启动时会通知 Spring 初始化容器(加载Bean 的定义信息和初始化所有单例 Bean),然后 SpringMVC 会遍历容器中的 Bean，获取每一个 Controller 中的所有方法访问的 url，然后将 url 和 Controller 保存到一个 Map<br>中；这样就可以根据 Request 快速定位到 Controller，因为最终处理 Request 的是Controller 中的方法，Map 中只保留了 url 和 Controller 中的对应关系，所以要根据Request 的 url 进一步确认 Controller 中的 Method，这一步工作的原理就是拼接Controller 的 url(Controller 上@RequestMapping 的值)和方法的 url(Method 上@RequestMapping 的值)，与 request 的 url 进行匹配，找到匹配的那个方法；确定处理请求的 Method 后，接下来的任务就是参数绑定，把 Request 中参数绑定到方法的形式参数上，这一步是整个请求处理过程中最复杂的一个步骤。</p><h4 id="Spring-MVC-九大组件"><a href="#Spring-MVC-九大组件" class="headerlink" title="Spring MVC 九大组件"></a>Spring MVC 九大组件</h4><h5 id="HandlerMappings"><a href="#HandlerMappings" class="headerlink" title="HandlerMappings"></a>HandlerMappings</h5><p>HandlerMapping 是用来查找 Handler 的，也就是处理器，具体的表现形式可以是类也可以是方法。比如，标注了@RequestMapping 的每个 method 都可以看成是一个Handler，由 Handler 来负责实际的请求处理。 HandlerMapping 在请求到达之后，它的作用便是找到请求相应的处理器 Handler 和 Interceptors。</p><h5 id="HandlerAdapters"><a href="#HandlerAdapters" class="headerlink" title="HandlerAdapters"></a>HandlerAdapters</h5><p>从名字上看，这是一个适配器。因为 Spring MVC 中 Handler 可以是任意形式的，只要能够处理请求便行, 但是把请求交给 Servlet 的时候，由于 Servlet 的方法结构都是如doService(HttpServletRequest req, HttpServletResponse resp) 这样的形式，让固定的 Servlet 处理方法调用 Handler 来进行处理，这一步工作便是 HandlerAdapter 要做的事。</p><h5 id="HandlerExceptionResolvers"><a href="#HandlerExceptionResolvers" class="headerlink" title="HandlerExceptionResolvers"></a>HandlerExceptionResolvers</h5><p>从这个组件的名字上看，这个就是用来处理 Handler 过程中产生的异常情况的组件。 具体来说，此组件的作用是根据异常设置 ModelAndView, 之后再交给 render()方法进行渲 染 ， 而 render() 便 将 ModelAndView 渲 染 成 页 面 。 不 过 有 一 点 ，HandlerExceptionResolver 只是用于解析对请求做处理阶段产生的异常，而渲染阶段的<br>异常则不归他管了，这也是 Spring MVC 组件设计的一大原则分工明确互不干涉。</p><h5 id="ViewResolvers"><a href="#ViewResolvers" class="headerlink" title="ViewResolvers"></a>ViewResolvers</h5><p>视图解析器，相信大家对这个应该都很熟悉了。因为通常在 SpringMVC 的配置文件中，都会配上一个该接口的实现类来进行视图的解析。 这个组件的主要作用，便是将 String类型的视图名和Locale解析为View类型的视图。这个接口只有一个resolveViewName()方法。从方法的定义就可以看出，Controller 层返回的 String 类型的视图名 viewName，最终会在这里被解析成为 View。View 是用来渲染页面的，也就是说，它会将程序返回的参数和数据填入模板中，最终生成 html 文件。ViewResolver 在这个过程中，主要做两件大事，即，ViewResolver 会找到渲染所用的模板（使用什么模板来渲染？）和所用的技术（其实也就是视图的类型，如 JSP 啊还是其他什么 Blabla 的）填入参数。默认情况下，Spring MVC 会为我们自动配置一个 InternalResourceViewResolver，这个是针对 JSP 类型视图的。</p><h5 id="RequestToViewNameTranslator"><a href="#RequestToViewNameTranslator" class="headerlink" title="RequestToViewNameTranslator"></a>RequestToViewNameTranslator</h5><p>这个组件的作用，在于从 Request 中获取 viewName. 因为ViewResolver 是根据ViewName 查找 View, 但有的 Handler 处理完成之后，没有设置 View 也没有设置ViewName， 便要通过这个组件来从 Request 中查找 viewName。</p><h5 id="LocaleResolver"><a href="#LocaleResolver" class="headerlink" title="LocaleResolver"></a>LocaleResolver</h5><p>在上面我们有看到 ViewResolver 的 resolveViewName()方法，需要两个参数。那么第二个参数 Locale 是从哪来的呢，这就是 LocaleResolver 要做的事了。 LocaleResolver用于从 request 中解析出 Locale, 在中国大陆地区，Locale 当然就会是 zh-CN 之类，用来表示一个区域。这个类也是 i18n 的基础。</p><h5 id="ThemeResolver"><a href="#ThemeResolver" class="headerlink" title="ThemeResolver"></a>ThemeResolver</h5><p>从名字便可看出，这个类是用来解析主题的。主题，就是样式，图片以及它们所形成的显示效果的集合。Spring MVC 中一套主题对应一个 properties 文件，里面存放着跟当前主题相关的所有资源，如图片，css 样式等。创建主题非常简单，只需准备好资源，然后新建一个 “主题名.properties” 并将资源设置进去，放在 classpath 下，便可以在页面中使用了。 Spring MVC 中跟主题有关的类有 ThemeResolver, ThemeSource 和Theme。 ThemeResolver 负责从 request 中解析出主题名， ThemeSource 则根据主题名找到具体的主题， 其抽象也就是 Theme, 通过 Theme 来获取主题和具体的资源。</p><h5 id="MultipartResolver"><a href="#MultipartResolver" class="headerlink" title="MultipartResolver"></a>MultipartResolver</h5><p>其实这是一个大家很熟悉的组件，MultipartResolver 用于处理上传请求，通过将普通的<br>Request 包装成 MultipartHttpServletRequest来实现。MultipartHttpServletRequest<br>可以通过 getFile() 直接获得文件，如果是多个文件上传，还可以通过调用 getFileMap<br>得到 Map&lt;FileName, File&gt; 这样的结构。MultipartResolver 的作用就是用来封装普通<br>的 request，使其拥有处理文件上传的功能。</p><h5 id="FlashMapManager"><a href="#FlashMapManager" class="headerlink" title="FlashMapManager"></a>FlashMapManager</h5><p>说到 FlashMapManager，就得先提一下 FlashMap。FlashMap 用于重定向 Redirect 时的参数数据传递，比如，在处理用户订单提交时，为了避免重复提交，可以处理完 post 请求后 redirect 到一个 get 请求，这个 get 请求可以用来显示订单详情之类的信息。这样做虽然可以规避用户刷新重新提交表单的问题，但是在这个页面上要显示订单的信息，那这些数据从哪里去获取呢，因为 redirect 重定向是没有传递参数这一功能的，如果不想把参数写进 url(其实也不推荐这么做，url 有长度限制不说，把参数都直接暴露，感觉也不安全)， 那么就可以通过 flashMap 来传递。只需 要 在 redirect 之 前 ， 将 要 传 递 的 数 据 写 入 request （ 可 以 通 过ServletRequestAttributes.getRequest() 获 得 ） 的 属 性OUTPUT_FLASH_MAP_ATTRIBUTE 中，这样在 redirect 之后的 handler 中 Spring 就会自动将其设置到 Model 中，在显示订单信息的页面上，就可以直接从 Model 中取得数据了。而 FlashMapManager 就是用来管理 FlashMap 的。</p><h4 id="Spring-MVC-源码分析"><a href="#Spring-MVC-源码分析" class="headerlink" title="Spring MVC 源码分析"></a>Spring MVC 源码分析</h4><p>根据上面分析的 Spring MVC 工作机制，从三个部分来分析 Spring MVC 的源代码。<br>其一，ApplicationContext 初始化时用 Map 保存所有 url 和 Controller 类的对应关系；<br>其二，根据请求 url 找到对应的 Controller，并从 Controller 中找到处理请求的方法;<br>其三，Request 参数绑定到方法的形参，执行方法处理请求，并返回结果视图。</p><h5 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h5><p>我们首先找到 <code>DispatcherServlet</code> 这个类，必然是寻找 init()方法。然后，我们发现其 init方法其实在父类 HttpServletBean 中，其源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="hljs-string">"Initializing servlet '"</span> + getServletName() + <span class="hljs-string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Set bean properties from init parameters.</span></span><br><span class="line">    PropertyValues pvs = <span class="hljs-keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="hljs-keyword">this</span>.requiredProperties);</span><br><span class="line">    <span class="hljs-keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//定位资源</span></span><br><span class="line">            BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="hljs-keyword">this</span>);</span><br><span class="line">            <span class="hljs-comment">//加载配置信息</span></span><br><span class="line">            ResourceLoader resourceLoader = <span class="hljs-keyword">new</span> ServletContextResourceLoader(getServletContext());</span><br><span class="line">            bw.registerCustomEditor(Resource.class, <span class="hljs-keyword">new</span> ResourceEditor(resourceLoader, getEnvironment()));</span><br><span class="line">            initBeanWrapper(bw);</span><br><span class="line">            bw.setPropertyValues(pvs, <span class="hljs-keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">                logger.error(<span class="hljs-string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="hljs-string">"'"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">    initServletBean();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="hljs-string">"Servlet '"</span> + getServletName() + <span class="hljs-string">"' configured successfully"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FrameworkSERvlet</code>实现了<code>initServletBean()</code></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initServletBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    getServletContext().log(<span class="hljs-string">"Initializing Spring FrameworkServlet '"</span> + getServletName() + <span class="hljs-string">"'"</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">"FrameworkServlet '"</span> + getServletName() + <span class="hljs-string">"': initialization started"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">        initFrameworkServlet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.logger.error(<span class="hljs-string">"Context initialization failed"</span>, ex);</span><br><span class="line">        <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.logger.error(<span class="hljs-string">"Context initialization failed"</span>, ex);</span><br><span class="line">        <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">        <span class="hljs-keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">        <span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">"FrameworkServlet '"</span> + getServletName() + <span class="hljs-string">"': initialization completed in "</span> +</span><br><span class="line">                         elapsedTime + <span class="hljs-string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中最主要的逻辑就是初始化 IOC 容器，最终会调用 refresh()方法，IOC 容器初始化之后，最后有调用了 onRefresh()方法。这个方法最终是在DisptcherServlet 中实现，来看源码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onRefresh</span><span class="hljs-params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">    initStrategies(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Initialize the strategy objects that this servlet uses.</span></span><br><span class="line"><span class="hljs-comment"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//初始化策略</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//多文件上传的组件</span></span><br><span class="line">    initMultipartResolver(context);</span><br><span class="line">    <span class="hljs-comment">//初始化本地语言环境</span></span><br><span class="line">    initLocaleResolver(context);</span><br><span class="line">    <span class="hljs-comment">//初始化模板处理器</span></span><br><span class="line">    initThemeResolver(context);</span><br><span class="line">    <span class="hljs-comment">//handlerMapping</span></span><br><span class="line">    initHandlerMappings(context);</span><br><span class="line">    <span class="hljs-comment">//初始化参数适配器</span></span><br><span class="line">    initHandlerAdapters(context);</span><br><span class="line">    <span class="hljs-comment">//初始化异常拦截器</span></span><br><span class="line">    initHandlerExceptionResolvers(context);</span><br><span class="line">    <span class="hljs-comment">//初始化视图预处理器</span></span><br><span class="line">    initRequestToViewNameTranslator(context);</span><br><span class="line">    <span class="hljs-comment">//初始化视图转换器</span></span><br><span class="line">    initViewResolvers(context);</span><br><span class="line">    <span class="hljs-comment">//</span></span><br><span class="line">    initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这一步就完成了Spring MVC的九大组件的初始化。接下来，我们来看url和Controller的关系是如何建立的HandlerMapping 的子类AbstractDetectingUrlHandlerMapping 实现了 initApplicationContext()方法，所以我们直接看子类中的初始化容器方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initApplicationContext</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ApplicationContextException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>.initApplicationContext();</span><br><span class="line">    detectHandlers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Register all handlers found in the current ApplicationContext.</span></span><br><span class="line"><span class="hljs-comment"> * &lt;p&gt;The actual URL determination for a handler is up to the concrete</span></span><br><span class="line"><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #determineUrlsForHandler(String)&#125; implementation. A bean for</span></span><br><span class="line"><span class="hljs-comment"> * which no such URLs could be determined is simply not considered a handler.</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> org.springframework.beans.BeansException if the handler couldn't be registered</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #determineUrlsForHandler(String)</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 建立当前ApplicationContext中的所有controller和url的对应关系</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">detectHandlers</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = obtainApplicationContext();</span><br><span class="line">    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="hljs-string">"Looking for URL mappings in application context: "</span> + applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 获取ApplicationContext容器中所有bean的Name</span></span><br><span class="line">    String[] beanNames = (<span class="hljs-keyword">this</span>.detectHandlersInAncestorContexts ?</span><br><span class="line">                          BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class) :</span><br><span class="line">                          applicationContext.getBeanNamesForType(Object.class));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Take any bean name that we can determine URLs for.</span></span><br><span class="line">    <span class="hljs-comment">// 遍历beanNames,并找到这些bean对应的url</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        <span class="hljs-comment">// 找bean上的所有url(controller上的url+方法上的url),该方法由对应的子类实现</span></span><br><span class="line">        String[] urls = determineUrlsForHandler(beanName);</span><br><span class="line">        <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(urls)) &#123;</span><br><span class="line">            <span class="hljs-comment">// URL paths found: Let's consider it a handler.</span></span><br><span class="line">            <span class="hljs-comment">// 保存urls和beanName的对应关系,put it to Map&lt;urls,beanName&gt;,该方法在父类AbstractUrlHandlerMapping中实现</span></span><br><span class="line">            registerHandler(urls, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="hljs-string">"Rejected bean name '"</span> + beanName + <span class="hljs-string">"': no URL paths identified"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Determine the URLs for the given handler bean.</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> beanName the name of the candidate bean</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the URLs determined for the bean, or an empty array if none</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">/** 获取controller中所有方法的url,由子类实现,典型的模板模式 **/</span></span><br><span class="line"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> String[] determineUrlsForHandler(String beanName);</span><br></pre></td></tr></table></figure><p>determineUrlsForHandler(String beanName)方法的作用是获取每个 Controller 中的url，不同的子类有不同的实现，这是一个典型的模板设计模式。因为开发中我们用的最多的就是用注解来配置 Controller 中的 url，BeanNameUrlHandlerMapping 是AbstractDetectingUrlHandlerMapping的子类,处理注解形式的url映射.所以我们这里以<code>BeanNameUrlHandlerMapping</code>进行分析我们看<code>BeanNameUrlHandlerMapping</code> 是如何查 beanName 上所有映射的 url。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">protected</span> String[] determineUrlsForHandler(String beanName) &#123;</span><br><span class="line">    List&lt;String&gt; urls = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">if</span> (beanName.startsWith(<span class="hljs-string">"/"</span>)) &#123;</span><br><span class="line">        urls.add(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    String[] aliases = obtainApplicationContext().getAliases(beanName);</span><br><span class="line">    <span class="hljs-keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (alias.startsWith(<span class="hljs-string">"/"</span>)) &#123;</span><br><span class="line">            urls.add(alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> StringUtils.toStringArray(urls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里 HandlerMapping 组件就已经建立所有 url 和 Controller 的对应关系。</p><h4 id="运行调用阶段"><a href="#运行调用阶段" class="headerlink" title="运行调用阶段"></a>运行调用阶段</h4><p>这一步步是由请求触发的，所以入口为 DispatcherServlet 的核心方法为 doService()，doService()中的核心逻辑由 doDispatch()实现，源代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** 中央控制器,控制请求的转发 **/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> multipartRequestParsed = <span class="hljs-keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        ModelAndView mv = <span class="hljs-keyword">null</span>;</span><br><span class="line">        Exception dispatchException = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 1.检查是否是文件上传的请求</span></span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="hljs-comment">// 2.取得处理当前请求的controller,这里也称为hanlder,处理器,</span></span><br><span class="line">            <span class="hljs-comment">//  第一个步骤的意义就在这里体现了.这里并不是直接返回controller,</span></span><br><span class="line">            <span class="hljs-comment">// 而是返回的HandlerExecutionChain请求处理器链对象,</span></span><br><span class="line">            <span class="hljs-comment">// 该对象封装了handler和interceptors.</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="hljs-comment">// 如果handler为空,则返回404</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="hljs-keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Determine handler adapter for the current request.</span></span><br><span class="line">            <span class="hljs-comment">//3. 获取处理request的处理器适配器handler adapter</span></span><br><span class="line">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            <span class="hljs-comment">// 处理 last-modified 请求头</span></span><br><span class="line">            String method = request.getMethod();</span><br><span class="line">            <span class="hljs-keyword">boolean</span> isGet = <span class="hljs-string">"GET"</span>.equals(method);</span><br><span class="line">            <span class="hljs-keyword">if</span> (isGet || <span class="hljs-string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line">                <span class="hljs-keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="hljs-string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="hljs-string">"] is: "</span> + lastModified);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="hljs-comment">// 4.实际的处理器处理请求,返回结果视图对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// 结果视图对象的处理</span></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="hljs-comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="hljs-keyword">new</span> NestedServletException(<span class="hljs-string">"Handler dispatch failed"</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="hljs-keyword">new</span> NestedServletException(<span class="hljs-string">"Handler processing failed"</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="hljs-comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-comment">// 请求成功响应之后的方法</span></span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getHandler(processedRequest)</code>方法实际上就是从 HandlerMapping 中找到 url 和Controller 的对应关系。也就是 <code>Map&lt;url,Controller&gt;</code>。我们知道，最终处理 Request的是 Controller 中的方法，我们现在只是知道了 Controller，我们如何确认 Controller中处理 Request 的方法呢？继续往下看。</p><p>从 Map&lt;urls,beanName&gt;中取得 Controller 后，经过拦截器的预处理方法，再通过反射获取该方法上的注解和参数，解析方法和参数上的注解，然后反射调用方法获取ModelAndView 结果视图。最后，调用的就是RequestMappingHandlerAdapter 的handle()中的核心逻辑由 <code>handleInternal(request, response, handler)</code>实现。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                                      HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ModelAndView mav;</span><br><span class="line">    checkRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">        HttpSession session = request.getSession(<span class="hljs-keyword">false</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (session != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">            <span class="hljs-keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">                mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">            mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// No synchronization on session demanded at all...</span></span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">            applyCacheSeconds(response, <span class="hljs-keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            prepareResponse(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个处理过程中最核心的逻辑其实就是拼接 Controller 的 url 和方法的 url，与 Request的 url 进行匹配，找到匹配的方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> HandlerMethod <span class="hljs-title">getHandlerInternal</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);</span><br><span class="line">   <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="hljs-string">"Looking up handler method for path "</span> + lookupPath);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">this</span>.mappingRegistry.acquireReadLock();</span><br><span class="line">   <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);</span><br><span class="line">      <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="hljs-keyword">if</span> (handlerMethod != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            logger.debug(<span class="hljs-string">"Returning handler method ["</span> + handlerMethod + <span class="hljs-string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="hljs-string">"Did not find handler method for ["</span> + lookupPath + <span class="hljs-string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">return</span> (handlerMethod != <span class="hljs-keyword">null</span> ? handlerMethod.createWithResolvedBean() : <span class="hljs-keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.mappingRegistry.releaseReadLock();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码分析，已经可以找到处理 Request 的 Controller 中的方法了，现在看如何解析该方法上的参数，并反射调用该方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** 获取处理请求的方法,执行并返回结果视图 **/</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">      HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">   ServletWebRequest webRequest = <span class="hljs-keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">   <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">      ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">      ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.argumentResolvers != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">         invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-keyword">this</span>.argumentResolvers);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.returnValueHandlers != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">         invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-keyword">this</span>.returnValueHandlers);</span><br><span class="line">      &#125;</span><br><span class="line">      invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">      invocableMethod.setParameterNameDiscoverer(<span class="hljs-keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line">      ModelAndViewContainer mavContainer = <span class="hljs-keyword">new</span> ModelAndViewContainer();</span><br><span class="line">      mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">      modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">      mavContainer.setIgnoreDefaultModelOnRedirect(<span class="hljs-keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"></span><br><span class="line">      AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">      asyncWebRequest.setTimeout(<span class="hljs-keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">      WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">      asyncManager.setTaskExecutor(<span class="hljs-keyword">this</span>.taskExecutor);</span><br><span class="line">      asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">      asyncManager.registerCallableInterceptors(<span class="hljs-keyword">this</span>.callableInterceptors);</span><br><span class="line">      asyncManager.registerDeferredResultInterceptors(<span class="hljs-keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">         Object result = asyncManager.getConcurrentResult();</span><br><span class="line">         mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="hljs-number">0</span>];</span><br><span class="line">         asyncManager.clearConcurrentResult();</span><br><span class="line">         <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="hljs-string">"Found concurrent result value ["</span> + result + <span class="hljs-string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">      <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">         <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">      webRequest.requestCompleted();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">      Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">   Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">   setResponseStatus(webRequest);</span><br><span class="line"></span><br><span class="line">   <span class="hljs-keyword">if</span> (returnValue == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="hljs-keyword">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">         mavContainer.setRequestHandled(<span class="hljs-keyword">true</span>);</span><br><span class="line">         <span class="hljs-keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class="line">      mavContainer.setRequestHandled(<span class="hljs-keyword">true</span>);</span><br><span class="line">      <span class="hljs-keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   mavContainer.setRequestHandled(<span class="hljs-keyword">false</span>);</span><br><span class="line">   Assert.state(<span class="hljs-keyword">this</span>.returnValueHandlers != <span class="hljs-keyword">null</span>, <span class="hljs-string">"No return value handlers"</span>);</span><br><span class="line">   <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">            returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(getReturnValueHandlingErrorMessage(<span class="hljs-string">"Error handling return value"</span>, returnValue), ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>invocableMethod.invokeAndHandle()</code>最终要实现的目的就是：完成 Request 中的参数和方法参数上数据的绑定。Spring MVC 中提供两种 Request 参数到方法中参数的绑定方式：</p><ol><li>通过注解进行绑定，@RequestParam。</li><li>通过参数名称进行绑定。</li></ol><p>使用注解进行绑定，我们只要在方法参数前面声明<code>@RequestParam(&quot;name&quot;)</code>，就可以将 request 中参数 name 的值绑定到方法的该参数上。使用参数名称进行绑定的前提是必须要获取方法中参数的名称，Java 反射只提供了获取方法的参数的类型，并没有提供获取参数名称的方法。SpringMVC 解决这个问题的方法是用 asm 框架读取字节码文件，来获取方法的参数名称。asm 框架是一个字节码操作框架，关于 asm 更多介绍可以参考其官网。个人建议，使用注解来完成参数绑定，这样就可以省去 asm 框架的读取字节码的操作。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invokeForRequest</span><span class="hljs-params">(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                               Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">    <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="hljs-string">"Invoking '"</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</span><br><span class="line">                     <span class="hljs-string">"' with arguments "</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">    Object returnValue = doInvoke(args);</span><br><span class="line">    <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="hljs-string">"Method ["</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</span><br><span class="line">                     <span class="hljs-string">"] returned ["</span> + returnValue + <span class="hljs-string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Get the method argument values for the current request.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">private</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">                                         Object... providedArgs) <span class="hljs-keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">    Object[] args = <span class="hljs-keyword">new</span> Object[parameters.length];</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">        MethodParameter parameter = parameters[i];</span><br><span class="line">        parameter.initParameterNameDiscovery(<span class="hljs-keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">        args[i] = resolveProvidedArgument(parameter, providedArgs);</span><br><span class="line">        <span class="hljs-keyword">if</span> (args[i] != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.argumentResolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                args[i] = <span class="hljs-keyword">this</span>.argumentResolvers.resolveArgument(</span><br><span class="line">                    parameter, mavContainer, request, <span class="hljs-keyword">this</span>.dataBinderFactory);</span><br><span class="line">                <span class="hljs-keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(getArgumentResolutionErrorMessage(<span class="hljs-string">"Failed to resolve"</span>, i), ex);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (args[i] == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Could not resolve method parameter at index "</span> +</span><br><span class="line">                                            parameter.getParameterIndex() + <span class="hljs-string">" in "</span> + parameter.getExecutable().toGenericString() +</span><br><span class="line">                                            <span class="hljs-string">": "</span> + getArgumentResolutionErrorMessage(<span class="hljs-string">"No suitable resolver for"</span>, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里,方法的参数值列表也获取到了,就可以直接进行方法的调用了。整个请求过程中最复杂的一步就是在这里了。到这里整个请求处理过程的关键步骤都已了解。理解了Spring MVC 中的请求处理流程,整个代码还是比较清晰的。最后我们再来梳理一下Spring MVC 核心组件的关联关系（如下图）：</p><img src="/2019/08/25/Spring-2019-08-渐入Spring-MVC/SpringMVC关联关系.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring-MVC-初体验&quot;&gt;&lt;a href=&quot;#Spring-MVC-初体验&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC 初体验&quot;&gt;&lt;/a&gt;Spring MVC 初体验&lt;/h3&gt;&lt;h4 id=&quot;初探-Spring-MVC-请求处
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="MVC" scheme="http://yoursite.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring、IOC、DI、AOP时序图</title>
    <link href="http://yoursite.com/2019/08/23/Spring-2019-08-Spring%E3%80%81IOC%E3%80%81DI%E3%80%81AOP%E6%97%B6%E5%BA%8F%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/08/23/Spring-2019-08-Spring、IOC、DI、AOP时序图/</id>
    <published>2019-08-23T07:59:47.000Z</published>
    <updated>2019-08-30T09:46:29.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-IOC时序图"><a href="#Spring-IOC时序图" class="headerlink" title="Spring IOC时序图"></a>Spring IOC时序图</h3><img src="/2019/08/23/Spring-2019-08-Spring、IOC、DI、AOP时序图/SpringIOC时序图.png"><h3 id="Spring-DI时序图"><a href="#Spring-DI时序图" class="headerlink" title="Spring DI时序图"></a>Spring DI时序图</h3><img src="/2019/08/23/Spring-2019-08-Spring、IOC、DI、AOP时序图/SpringDI时序图.png"><h3 id="Spring-AOP时序图"><a href="#Spring-AOP时序图" class="headerlink" title="Spring AOP时序图"></a>Spring AOP时序图</h3><img src="/2019/08/23/Spring-2019-08-Spring、IOC、DI、AOP时序图/SpringAop时序图.png"><h3 id="Spring-MVC时序图"><a href="#Spring-MVC时序图" class="headerlink" title="Spring MVC时序图"></a>Spring MVC时序图</h3><img src="/2019/08/23/Spring-2019-08-Spring、IOC、DI、AOP时序图/SpringMVC时序图.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring-IOC时序图&quot;&gt;&lt;a href=&quot;#Spring-IOC时序图&quot; class=&quot;headerlink&quot; title=&quot;Spring IOC时序图&quot;&gt;&lt;/a&gt;Spring IOC时序图&lt;/h3&gt;&lt;img src=&quot;/2019/08/23/Spring-
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="IOC" scheme="http://yoursite.com/tags/IOC/"/>
    
      <category term="DI" scheme="http://yoursite.com/tags/DI/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>渐入Spring-AOP</title>
    <link href="http://yoursite.com/2019/08/22/Spring-2019-08-%E6%B8%90%E5%85%A5Spring-AOP/"/>
    <id>http://yoursite.com/2019/08/22/Spring-2019-08-渐入Spring-AOP/</id>
    <published>2019-08-21T16:03:34.000Z</published>
    <updated>2019-08-27T10:48:05.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-AOP源码分析"><a href="#Spring-AOP源码分析" class="headerlink" title="Spring AOP源码分析"></a>Spring AOP源码分析</h2><h3 id="一、寻找入口"><a href="#一、寻找入口" class="headerlink" title="一、寻找入口"></a>一、寻找入口</h3><p>Spring 的 AOP 是通过接入 <code>BeanPostProcessor</code> 后置处理器开始的，它是 Spring IOC 容器经常使用到的一个特性，这个 Bean 后置处理器是一个监听器，可以监听容器触发的 Bean 声明周期事件。后置处理器向容器注册以后，容器中管理的 Bean 就具备了接收 IOC 容器事件回调的能力。</p><p><code>BeanPostProcessor</code> 的使用非常简单，只需要提供一个实现接口 BeanPostProcessor 的实现类，然后在 Bean 的配置文件中设置即可。</p><h4 id="1-BeanPostProcessor-源码"><a href="#1-BeanPostProcessor-源码" class="headerlink" title="1. BeanPostProcessor 源码"></a>1. BeanPostProcessor 源码</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//为在 Bean 的初始化前提供回调入口</span></span><br><span class="line">    <span class="hljs-meta">@Nullable</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">default</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//为在 Bean 的初始化之后提供回调入口</span></span><br><span class="line">    <span class="hljs-meta">@Nullable</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">default</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个回调的入口都是和容器管理的 Bean 的生命周期事件紧密相关，可以为用户提供在 Spring IOC容器初始化 Bean 过程中自定义的处理操作。</p><h4 id="2-AbstractAutowireCapableBeanFactory-类对容器生成的-Bean-添加后置处理器"><a href="#2-AbstractAutowireCapableBeanFactory-类对容器生成的-Bean-添加后置处理器" class="headerlink" title="2. AbstractAutowireCapableBeanFactory 类对容器生成的 Bean 添加后置处理器"></a>2. AbstractAutowireCapableBeanFactory 类对容器生成的 Bean 添加后置处理器</h4><p>BeanPostProcessor 后置处理器的调用发生在 Spring IOC 容器完成对 Bean 实例对象的创建和属性的依赖注入完成之后，在对Spring依赖注入的源码分析过程中我们知道，当应用程序第一次调用getBean()方法(lazy-init 预实例化除外)向 Spring IOC 容器索取指定 Bean 时触发 Spring IOC 容器创建 Bean 实例对象并进行依赖注入的过程，其中真正实现创建 Bean 对象并进行依 赖注入的 方 法 是<code>AbstractAutowireCapableBeanFactory</code> 类的<code>doCreateBean()</code>方法，主要源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//真正创建Bean的方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">doCreateBean</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String beanName, <span class="hljs-keyword">final</span> RootBeanDefinition mbd, <span class="hljs-keyword">final</span> @Nullable Object[] args)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Instantiate the bean.</span></span><br><span class="line">    <span class="hljs-comment">//封装被创建的Bean对象</span></span><br><span class="line">    BeanWrapper instanceWrapper = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        instanceWrapper = <span class="hljs-keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (instanceWrapper == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">    <span class="hljs-comment">//获取实例化对象的类型</span></span><br><span class="line">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">    <span class="hljs-keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">        mbd.resolvedTargetType = beanType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">    <span class="hljs-comment">//调用PostProcessor后置处理器</span></span><br><span class="line">    <span class="hljs-keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                <span class="hljs-string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            mbd.postProcessed = <span class="hljs-keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">    <span class="hljs-comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">    <span class="hljs-comment">//向容器中缓存单例模式的Bean对象，以防循环引用</span></span><br><span class="line">    <span class="hljs-keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="hljs-keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                                      isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    <span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="hljs-string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">                         <span class="hljs-string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//这里是一个匿名内部类，为了防止循环引用，尽早持有对象的引用</span></span><br><span class="line">        addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Initialize the bean instance.</span></span><br><span class="line">    <span class="hljs-comment">//Bean对象的初始化，依赖注入在此触发</span></span><br><span class="line">    <span class="hljs-comment">//这个exposedObject在初始化完成之后返回作为依赖注入完成后的Bean</span></span><br><span class="line">    Object exposedObject = bean;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//将Bean实例对象封装，并且Bean定义中配置的属性值赋值给实例对象</span></span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        <span class="hljs-comment">//初始化Bean对象</span></span><br><span class="line">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, <span class="hljs-string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="hljs-comment">//获取指定名称的已注册的单例模式Bean对象</span></span><br><span class="line">        Object earlySingletonReference = getSingleton(beanName, <span class="hljs-keyword">false</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (earlySingletonReference != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-comment">//根据名称获取的已注册的Bean和正在实例化的Bean是同一个</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                <span class="hljs-comment">//当前实例化的Bean初始化完成</span></span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//当前Bean依赖其他Bean，并且当发生循环引用时不允许新创建实例对象</span></span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                Set&lt;String&gt; actualDependentBeans = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line">                <span class="hljs-comment">//获取当前Bean所依赖的其他Bean</span></span><br><span class="line">                <span class="hljs-keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                    <span class="hljs-comment">//对依赖Bean进行类型检查</span></span><br><span class="line">                    <span class="hljs-keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.add(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                                                               <span class="hljs-string">"Bean with name '"</span> + beanName + <span class="hljs-string">"' has been injected into other beans ["</span> +</span><br><span class="line">                                                               StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                                                               <span class="hljs-string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                                                               <span class="hljs-string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                                                               <span class="hljs-string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                                                               <span class="hljs-string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Register bean as disposable.</span></span><br><span class="line">    <span class="hljs-comment">//注册完成依赖注入的Bean</span></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="hljs-string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中我们知道，为 Bean 实例对象添加 BeanPostProcessor 后置处理器的入口的是<code>initializeBean()</code>方法</p><h4 id="3-initializeBean-方法为容器产生的-Bean-实例对象添加-BeanPostProcessor-后置处理器"><a href="#3-initializeBean-方法为容器产生的-Bean-实例对象添加-BeanPostProcessor-后置处理器" class="headerlink" title="3. initializeBean()方法为容器产生的 Bean 实例对象添加 BeanPostProcessor 后置处理器"></a>3. initializeBean()方法为容器产生的 Bean 实例对象添加 BeanPostProcessor 后置处理器</h4><p>同样在 <code>AbstractAutowireCapableBeanFactory</code> 类中，<code>initializeBean()</code>方法实现为容器创建的 Bean实例对象添加 BeanPostProcessor 后置处理器，源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//初始容器创建的Bean实例对象，为其添加BeanPostProcessor后置处理器</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">initializeBean</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String beanName, <span class="hljs-keyword">final</span> Object bean, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//JDK的安全机制验证权限</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">//实现PrivilegedAction接口的匿名内部类</span></span><br><span class="line">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            invokeAwareMethods(beanName, bean);</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//为Bean实例对象包装相关属性，如名称，类加载器，所属容器等信息</span></span><br><span class="line">        invokeAwareMethods(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object wrappedBean = bean;</span><br><span class="line">    <span class="hljs-comment">//对BeanPostProcessor后置处理器的postProcessBeforeInitialization</span></span><br><span class="line">    <span class="hljs-comment">//回调方法的调用，为Bean实例初始化前做一些处理</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (mbd == <span class="hljs-keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//调用Bean实例对象初始化的方法，这个初始化方法是在Spring Bean定义配置</span></span><br><span class="line">    <span class="hljs-comment">//文件中通过init-method属性指定的</span></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">            (mbd != <span class="hljs-keyword">null</span> ? mbd.getResourceDescription() : <span class="hljs-keyword">null</span>),</span><br><span class="line">            beanName, <span class="hljs-string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//对BeanPostProcessor后置处理器的postProcessAfterInitialization</span></span><br><span class="line">    <span class="hljs-comment">//回调方法的调用，为Bean实例初始化之后做一些处理</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (mbd == <span class="hljs-keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//调用BeanPostProcessor后置处理器实例对象初始化之前的处理方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">applyBeanPostProcessorsBeforeInitialization</span><span class="hljs-params">(Object existingBean, String beanName)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    Object result = existingBean;</span><br><span class="line">    <span class="hljs-comment">//遍历容器为所创建的Bean添加的所有BeanPostProcessor后置处理器</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">        <span class="hljs-comment">//调用Bean实例所有的后置处理中的初始化前处理方法，为Bean实例对象在</span></span><br><span class="line">        <span class="hljs-comment">//初始化之前做一些自定义的处理操作</span></span><br><span class="line">        Object current = beanProcessor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">        <span class="hljs-keyword">if</span> (current == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        result = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BeanPostProcessor</code> 是一个接口，其初始化前的操作方法和初始化后的操作方法均委托其实现子类来实现，在 Spring 中，BeanPostProcessor 的实现子类非常的多，分别完成不同的操作，如：AOP 面向切面编程的注册通知适配器、Bean 对象的数据校验、Bean 继承属性、方法的合并等等，我们以最简单的AOP 切面织入来简单了解其主要的功能。下面我们来分析其中一个创建 AOP 代理对象的子类<code>AbstractAutoProxyCreator</code> 类。该类重写了 <code>postProcessAfterInitialization()</code>方法。</p><h3 id="二、选择代理策略"><a href="#二、选择代理策略" class="headerlink" title="二、选择代理策略"></a>二、选择代理策略</h3><p>进入 postProcessAfterInitialization()方法，我们发现调到了一个非常核心的方法<code>wrapIfNecessary()</code>，其源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(@Nullable Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (bean != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">wrapIfNecessary</span><span class="hljs-params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="hljs-keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (Boolean.FALSE.equals(<span class="hljs-keyword">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        <span class="hljs-keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Create proxy if we have advice.</span></span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="hljs-keyword">null</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        Object proxy = createProxy(</span><br><span class="line">            bean.getClass(), beanName, specificInterceptors, <span class="hljs-keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line">        <span class="hljs-keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        <span class="hljs-keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    <span class="hljs-keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">createProxy</span><span class="hljs-params">(Class&lt;?&gt; beanClass, @Nullable String beanName,@Nullable Object[] specificInterceptors, TargetSource targetSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.beanFactory <span class="hljs-keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">        AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="hljs-keyword">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ProxyFactory proxyFactory = <span class="hljs-keyword">new</span> ProxyFactory();</span><br><span class="line">    proxyFactory.copyFrom(<span class="hljs-keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">            proxyFactory.setProxyTargetClass(<span class="hljs-keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">    proxyFactory.addAdvisors(advisors);</span><br><span class="line">    proxyFactory.setTargetSource(targetSource);</span><br><span class="line">    customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">    proxyFactory.setFrozen(<span class="hljs-keyword">this</span>.freezeProxy);</span><br><span class="line">    <span class="hljs-keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">        proxyFactory.setPreFiltered(<span class="hljs-keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程跟下来，我发现最终调用的是 proxyFactory.getProxy()方法。到这里我们大概能够猜到proxyFactory 有 JDK 和 CGLib 的，那么我们该如何选择呢？最终调用的是DefaultAopProxyFactory的 createAopProxy()方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultAopProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AopProxyFactory</span>, <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AopProxy <span class="hljs-title">createAopProxy</span><span class="hljs-params">(AdvisedSupport config)</span> <span class="hljs-keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line"><span class="hljs-keyword">if</span> (targetClass == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AopConfigException(<span class="hljs-string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line"><span class="hljs-string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ObjenesisCglibAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Determine whether the supplied &#123;<span class="hljs-doctag">@link</span> AdvisedSupport&#125; has only the</span></span><br><span class="line"><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.aop.SpringProxy&#125; interface specified</span></span><br><span class="line"><span class="hljs-comment"> * (or no proxy interfaces specified at all).</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNoUserSuppliedProxyInterfaces</span><span class="hljs-params">(AdvisedSupport config)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt;[] ifcs = config.getProxiedInterfaces();</span><br><span class="line"><span class="hljs-keyword">return</span> (ifcs.length == <span class="hljs-number">0</span> || (ifcs.length == <span class="hljs-number">1</span> &amp;&amp; SpringProxy.class.isAssignableFrom(ifcs[<span class="hljs-number">0</span>])));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、调用代理方法"><a href="#三、调用代理方法" class="headerlink" title="三、调用代理方法"></a>三、调用代理方法</h3><p>分析调用逻辑之前先上类图，看看 Spring 中主要的 AOP 组件：</p><img src="/2019/08/22/Spring-2019-08-渐入Spring-AOP/AopProxy.png"><p>上面我们已经了解到 Spring 提供了两种方式来生成代理方式有 JDKProxy 和 CGLib。下面我们来研究一下 Spring 如何使用 JDK 来生成代理对象，具体的生成代码放在<code>JdkDynamicAopProxy</code> 这个类中，直接上相关代码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取代理类要实现的接口,除了Advised对象中配置的,还会加上SpringProxy, Advised(opaque=false)</span></span><br><span class="line"><span class="hljs-comment"> * 检查上面得到的接口中有没有定义 equals或者hashcode的接口</span></span><br><span class="line"><span class="hljs-comment"> * 调用Proxy.newProxyInstance创建代理对象</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">(@Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">       <span class="hljs-comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="hljs-keyword">this</span>.advised, <span class="hljs-keyword">true</span>);</span><br><span class="line">    findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line">    <span class="hljs-keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过注释我们应该已经看得非常明白代理对象的生成过程，此处不再赘述。下面的问题是，代理对象生成了，那切面是如何织入的? </p><p>我们知道 <code>InvocationHandler</code> 是 JDK 动态代理的核心，生成的代理对象的方法调用都会委托到<code>InvocationHandler.invoke()</code>方法。而从 <code>JdkDynamicAopProxy</code> 的源码我们可以看到这个类其实也实现了 <code>InvocationHandler</code>，下面我们分析 Spring AOP 是如何织入切面的，直接上源码看 invoke()方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    MethodInvocation invocation;</span><br><span class="line">    Object oldProxy = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> setProxyContext = <span class="hljs-keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    TargetSource targetSource = <span class="hljs-keyword">this</span>.advised.targetSource;</span><br><span class="line">    Object target = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//eqauls()方法，具目标对象未实现此方法</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">            <span class="hljs-comment">// The target does not implement the equals(Object) method itself.</span></span><br><span class="line">            <span class="hljs-keyword">return</span> equals(args[<span class="hljs-number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//hashCode()方法，具目标对象未实现此方法</span></span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">            <span class="hljs-comment">// The target does not implement the hashCode() method itself.</span></span><br><span class="line">            <span class="hljs-keyword">return</span> hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.getDeclaringClass() == DecoratingProxy.class) &#123;</span><br><span class="line">            <span class="hljs-comment">// There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span></span><br><span class="line">            <span class="hljs-keyword">return</span> AopProxyUtils.ultimateTargetClass(<span class="hljs-keyword">this</span>.advised);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//Advised接口或者其父接口中定义的方法,直接反射调用,不应用通知</span></span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">                 method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line">            <span class="hljs-comment">// Service invocations on ProxyConfig with the proxy config...</span></span><br><span class="line">            <span class="hljs-keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="hljs-keyword">this</span>.advised, method, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object retVal;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.advised.exposeProxy) &#123;</span><br><span class="line">            <span class="hljs-comment">// Make invocation available if necessary.</span></span><br><span class="line">            oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">            setProxyContext = <span class="hljs-keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Get as late as possible to minimize the time we "own" the target,</span></span><br><span class="line">        <span class="hljs-comment">// in case it comes from a pool.</span></span><br><span class="line">        <span class="hljs-comment">//获得目标对象的类</span></span><br><span class="line">        target = targetSource.getTarget();</span><br><span class="line">        Class&lt;?&gt; targetClass = (target != <span class="hljs-keyword">null</span> ? target.getClass() : <span class="hljs-keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Get the interception chain for this method.</span></span><br><span class="line">        <span class="hljs-comment">//获取可以应用到此方法上的Interceptor列表</span></span><br><span class="line">        List&lt;Object&gt; chain = <span class="hljs-keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Check whether we have any advice. If we don't, we can fallback on direct</span></span><br><span class="line">        <span class="hljs-comment">// reflective invocation of the target, and avoid creating a MethodInvocation.</span></span><br><span class="line">        <span class="hljs-comment">//如果没有可以应用到此方法的通知(Interceptor)，此直接反射调用 method.invoke(target, args)</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">            <span class="hljs-comment">// We can skip creating a MethodInvocation: just invoke the target directly</span></span><br><span class="line">            <span class="hljs-comment">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></span><br><span class="line">            <span class="hljs-comment">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></span><br><span class="line">            Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">            retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// We need to create a method invocation...</span></span><br><span class="line">            <span class="hljs-comment">//创建MethodInvocation</span></span><br><span class="line">            invocation = <span class="hljs-keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">            <span class="hljs-comment">// Proceed to the joinpoint through the interceptor chain.</span></span><br><span class="line">            retVal = invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Massage return value if necessary.</span></span><br><span class="line">        Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">        <span class="hljs-keyword">if</span> (retVal != <span class="hljs-keyword">null</span> &amp;&amp; retVal == target &amp;&amp;</span><br><span class="line">            returnType != Object.class &amp;&amp; returnType.isInstance(proxy) &amp;&amp;</span><br><span class="line">            !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</span><br><span class="line">            <span class="hljs-comment">// Special case: it returned "this" and the return type of the method</span></span><br><span class="line">            <span class="hljs-comment">// is type-compatible. Note that we can't help if the target sets</span></span><br><span class="line">            <span class="hljs-comment">// a reference to itself in another returned object.</span></span><br><span class="line">            retVal = proxy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (retVal == <span class="hljs-keyword">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AopInvocationException(</span><br><span class="line">                <span class="hljs-string">"Null return value from advice does not match primitive return type for: "</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (target != <span class="hljs-keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">            <span class="hljs-comment">// Must have come from TargetSource.</span></span><br><span class="line">            targetSource.releaseTarget(target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (setProxyContext) &#123;</span><br><span class="line">            <span class="hljs-comment">// Restore old proxy.</span></span><br><span class="line">            AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要实现思路可以简述为：首先获取应用到此方法上的通知链（Interceptor Chain）。如果有通知，则应用通知，并执行 JoinPoint；如果没有通知，则直接反射执行 JoinPoint。而这里的关键是通知链是如何获取的以及它又是如何执行的呢？现在来逐一分析。首先，从上面的代码可以看到，通知链是通过</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Advised.getInterceptorsAndDynamicInterceptionAdvice()</span><br></pre></td></tr></table></figure><p>这个方法来获取的，我们来看下这个方法的实现逻辑：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="hljs-params">(Method Method, @Nullable Class&lt;?&gt; targetClass)</span></span>&#123;</span><br><span class="line">    MethodCacheKey cacheKey = <span class="hljs-keyword">new</span> MethodCacheKey(Method);</span><br><span class="line">    List&lt;Object&gt; cached = <span class="hljs-keyword">this</span>.MethodCache.get(cacheKey);</span><br><span class="line">    <span class="hljs-keyword">if</span> (cached == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        cached = <span class="hljs-keyword">this</span>.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(</span><br><span class="line">        <span class="hljs-keyword">this</span>, Method, targetClass);</span><br><span class="line">        <span class="hljs-keyword">this</span>.MethodCache.put(cacheKey, cached);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> cached;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的源码我们可以看到，实际获取通知的实现逻辑其实是由<code>AdvisorChainFactory</code> 的<code>getInterceptorsAndDynamicInterceptionAdvice()</code>方法来完成的，且获取到的结果会被缓存。下面来分析<code>getInterceptorsAndDynamicInterceptionAdvice()</code>方法的实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 从提供的配置实例config中获取advisor列表,遍历处理这些advisor.如果是IntroductionAdvisor,</span></span><br><span class="line"><span class="hljs-comment"> * 则判断此Advisor能否应用到目标类targetClass上.如果是PointcutAdvisor,则判断</span></span><br><span class="line"><span class="hljs-comment"> * 此Advisor能否应用到目标方法method上.将满足条件的Advisor通过AdvisorAdaptor转化成Interceptor列表返回.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    Advised config, Method method, @Nullable Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// This is somewhat tricky... We have to process introductions first,</span></span><br><span class="line">    <span class="hljs-comment">// but we need to preserve order in the ultimate list.</span></span><br><span class="line">    List&lt;Object&gt; interceptorList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(config.getAdvisors().length);</span><br><span class="line">    Class&lt;?&gt; actualClass = (targetClass != <span class="hljs-keyword">null</span> ? targetClass : method.getDeclaringClass());</span><br><span class="line">    <span class="hljs-comment">//查看是否包含IntroductionAdvisor</span></span><br><span class="line">    <span class="hljs-keyword">boolean</span> hasIntroductions = hasMatchingIntroductions(config, actualClass);</span><br><span class="line">    <span class="hljs-comment">//这里实际上注册一系列AdvisorAdapter,用于将Advisor转化成MethodInterceptor</span></span><br><span class="line">    AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (Advisor advisor : config.getAdvisors()) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (advisor <span class="hljs-keyword">instanceof</span> PointcutAdvisor) &#123;</span><br><span class="line">            <span class="hljs-comment">// Add it conditionally.</span></span><br><span class="line">            PointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor;</span><br><span class="line">            <span class="hljs-keyword">if</span> (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                <span class="hljs-comment">//这个地方这两个方法的位置可以互换下</span></span><br><span class="line">                <span class="hljs-comment">//将Advisor转化成Interceptor</span></span><br><span class="line">                MethodInterceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">                <span class="hljs-comment">//检查当前advisor的pointcut是否可以匹配当前方法</span></span><br><span class="line">                MethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher();</span><br><span class="line">                <span class="hljs-keyword">if</span> (MethodMatchers.matches(mm, method, actualClass, hasIntroductions)) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (mm.isRuntime()) &#123;</span><br><span class="line">                        <span class="hljs-comment">// Creating a new object instance in the getInterceptors() method</span></span><br><span class="line">                        <span class="hljs-comment">// isn't a problem as we normally cache created chains.</span></span><br><span class="line">                        <span class="hljs-keyword">for</span> (MethodInterceptor interceptor : interceptors) &#123;</span><br><span class="line">                            interceptorList.add(<span class="hljs-keyword">new</span> InterceptorAndDynamicMethodMatcher(interceptor, mm));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (advisor <span class="hljs-keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">            IntroductionAdvisor ia = (IntroductionAdvisor) advisor;</span><br><span class="line">            <span class="hljs-keyword">if</span> (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">                interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">            interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> interceptorList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法执行完成后，Advised 中配置能够应用到连接点（JoinPoint）或者目标类（Target Object）的 Advisor 全部被转化成了 MethodInterceptor，接下来我们再看下得到的拦截器链是怎么起作用的。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//如果没有可以应用到此方法的通知(Interceptor)，此直接反射调用 method.invoke(target, args)</span></span><br><span class="line"><span class="hljs-keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">    <span class="hljs-comment">// We can skip creating a MethodInvocation: just invoke the target directly</span></span><br><span class="line">    <span class="hljs-comment">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></span><br><span class="line">    <span class="hljs-comment">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></span><br><span class="line">    Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">    retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// We need to create a method invocation...</span></span><br><span class="line">    <span class="hljs-comment">//创建MethodInvocation</span></span><br><span class="line">    invocation = <span class="hljs-keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">    <span class="hljs-comment">// Proceed to the joinpoint through the interceptor chain.</span></span><br><span class="line">    retVal = invocation.proceed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这段代码可以看出，如果得到的拦截器链为空，则直接反射调用目标方法，否则创建<code>MethodInvocation</code>，调用其 proceed()方法，触发拦截器链的执行，来看下具体代码:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">proceed</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//We start with an index of -1 and increment early.</span></span><br><span class="line">    <span class="hljs-comment">//如果Interceptor执行完了，则执行joinPoint</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.currentInterceptorIndex == <span class="hljs-keyword">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="hljs-number">1</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> invokeJoinpoint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object interceptorOrInterceptionAdvice =</span><br><span class="line">        <span class="hljs-keyword">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="hljs-keyword">this</span>.currentInterceptorIndex);</span><br><span class="line">    <span class="hljs-comment">//如果要动态匹配joinPoint</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (interceptorOrInterceptionAdvice <span class="hljs-keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line">        <span class="hljs-comment">// Evaluate dynamic method matcher here: static part will already have</span></span><br><span class="line">        <span class="hljs-comment">// been evaluated and found to match.</span></span><br><span class="line">        InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">            (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line">        <span class="hljs-comment">//动态匹配：运行时参数是否满足匹配条件</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (dm.methodMatcher.matches(<span class="hljs-keyword">this</span>.method, <span class="hljs-keyword">this</span>.targetClass, <span class="hljs-keyword">this</span>.arguments)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> dm.interceptor.invoke(<span class="hljs-keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Dynamic matching failed.</span></span><br><span class="line">            <span class="hljs-comment">// Skip this interceptor and invoke the next in the chain.</span></span><br><span class="line">            <span class="hljs-comment">//动态匹配失败时,略过当前Intercetpor,调用下一个Interceptor</span></span><br><span class="line">            <span class="hljs-keyword">return</span> proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// It's an interceptor, so we just invoke it: The pointcut will have</span></span><br><span class="line">        <span class="hljs-comment">// been evaluated statically before this object was constructed.</span></span><br><span class="line">        <span class="hljs-comment">//执行当前Intercetpor</span></span><br><span class="line">        <span class="hljs-keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="hljs-keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，通知链就完美地形成了。我们再往下来看 <code>invokeJoinpointUsingReflection()</code>方法，其实就是反射调用：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">invokeJoinpointUsingReflection</span><span class="hljs-params">(@Nullable Object target, Method method, Object[] args)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Use reflection to invoke the method.</span></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        ReflectionUtils.makeAccessible(method);</span><br><span class="line">        <span class="hljs-keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        <span class="hljs-comment">// Invoked method threw a checked exception.</span></span><br><span class="line">        <span class="hljs-comment">// We must rethrow it. The client won't see the interceptor.</span></span><br><span class="line">        <span class="hljs-keyword">throw</span> ex.getTargetException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AopInvocationException(<span class="hljs-string">"AOP configuration seems to be invalid: tried calling method ["</span> +</span><br><span class="line">                                         method + <span class="hljs-string">"] on target ["</span> + target + <span class="hljs-string">"]"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AopInvocationException(<span class="hljs-string">"Could not access method ["</span> + method + <span class="hljs-string">"]"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring AOP 源码就分析到这儿, 下面是AOP时序图:</p><img src="/2019/08/22/Spring-2019-08-渐入Spring-AOP/spring_aop_Timing.jpg"><h3 id="四、触发通知"><a href="#四、触发通知" class="headerlink" title="四、触发通知"></a>四、触发通知</h3><p>在为 AopProxy 代理对象配置拦截器的实现中，有一个取得拦截器的配置过程，这个过程是由 <code>DefaultAdvisorChainFactory</code> 实现的，这个工厂类负责生成拦截器链，在它的<code>getInterceptorsAndDynamicInterceptionAdvice</code> 方法中，有一个适配器和注册过程，通过配置 Spring 预先设计好的拦截器，Spring 加入了它对 AOP 实现的处理。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 从提供的配置实例config中获取advisor列表,遍历处理这些advisor.如果是IntroductionAdvisor,</span></span><br><span class="line"><span class="hljs-comment"> * 则判断此Advisor能否应用到目标类targetClass上.如果是PointcutAdvisor,则判断</span></span><br><span class="line"><span class="hljs-comment"> * 此Advisor能否应用到目标方法method上.将满足条件的Advisor通过AdvisorAdaptor转化成Interceptor列表返回.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    Advised config, Method method, @Nullable Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    List&lt;Object&gt; interceptorList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(config.getAdvisors().length);</span><br><span class="line">    Class&lt;?&gt; actualClass = (targetClass != <span class="hljs-keyword">null</span> ? targetClass : method.getDeclaringClass());</span><br><span class="line">    <span class="hljs-comment">//查看是否包含IntroductionAdvisor</span></span><br><span class="line">    <span class="hljs-keyword">boolean</span> hasIntroductions = hasMatchingIntroductions(config, actualClass);</span><br><span class="line">    <span class="hljs-comment">//这里实际上注册一系列AdvisorAdapter,用于将Advisor转化成MethodInterceptor</span></span><br><span class="line">    AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line"><span class="hljs-comment">//....</span></span><br><span class="line">    <span class="hljs-keyword">return</span> interceptorList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GlobalAdvisorAdapterRegistry</code> 负责拦截器的适配和注册过程。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalAdvisorAdapterRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Keep track of a single instance so we can return it to classes that request it.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> AdvisorAdapterRegistry instance = <span class="hljs-keyword">new</span> DefaultAdvisorAdapterRegistry();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Return the singleton &#123;<span class="hljs-doctag">@link</span> DefaultAdvisorAdapterRegistry&#125; instance.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AdvisorAdapterRegistry <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Reset the singleton &#123;<span class="hljs-doctag">@link</span> DefaultAdvisorAdapterRegistry&#125;, removing any</span></span><br><span class="line"><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> AdvisorAdapterRegistry#registerAdvisorAdapter(AdvisorAdapter) registered&#125;</span></span><br><span class="line"><span class="hljs-comment"> * adapters.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">instance = <span class="hljs-keyword">new</span> DefaultAdvisorAdapterRegistry();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>GlobalAdvisorAdapterRegistry</code> 起到了适配器和单例模式的作用，提供了一个<code>DefaultAdvisorAdapterRegistry</code>，它用来完成各种通知的适配和注册过程。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultAdvisorAdapterRegistry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AdvisorAdapterRegistry</span>, <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;AdvisorAdapter&gt; adapters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Create a new DefaultAdvisorAdapterRegistry, registering well-known adapters.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultAdvisorAdapterRegistry</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">registerAdvisorAdapter(<span class="hljs-keyword">new</span> MethodBeforeAdviceAdapter());</span><br><span class="line">registerAdvisorAdapter(<span class="hljs-keyword">new</span> AfterReturningAdviceAdapter());</span><br><span class="line">registerAdvisorAdapter(<span class="hljs-keyword">new</span> ThrowsAdviceAdapter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Advisor <span class="hljs-title">wrap</span><span class="hljs-params">(Object adviceObject)</span> <span class="hljs-keyword">throws</span> UnknownAdviceTypeException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (adviceObject <span class="hljs-keyword">instanceof</span> Advisor) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> (Advisor) adviceObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (!(adviceObject <span class="hljs-keyword">instanceof</span> Advice)) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnknownAdviceTypeException(adviceObject);</span><br><span class="line">&#125;</span><br><span class="line">Advice advice = (Advice) adviceObject;</span><br><span class="line"><span class="hljs-keyword">if</span> (advice <span class="hljs-keyword">instanceof</span> MethodInterceptor) &#123;</span><br><span class="line"><span class="hljs-comment">// So well-known it doesn't even need an adapter.</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultPointcutAdvisor(advice);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (AdvisorAdapter adapter : <span class="hljs-keyword">this</span>.adapters) &#123;</span><br><span class="line"><span class="hljs-comment">// Check that it is supported.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultPointcutAdvisor(advice);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnknownAdviceTypeException(advice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-keyword">public</span> MethodInterceptor[] getInterceptors(Advisor advisor) <span class="hljs-keyword">throws</span> UnknownAdviceTypeException &#123;</span><br><span class="line">List&lt;MethodInterceptor&gt; interceptors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-number">3</span>);</span><br><span class="line">Advice advice = advisor.getAdvice();</span><br><span class="line"><span class="hljs-keyword">if</span> (advice <span class="hljs-keyword">instanceof</span> MethodInterceptor) &#123;</span><br><span class="line">interceptors.add((MethodInterceptor) advice);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (AdvisorAdapter adapter : <span class="hljs-keyword">this</span>.adapters) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line">interceptors.add(adapter.getInterceptor(advisor));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (interceptors.isEmpty()) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnknownAdviceTypeException(advisor.getAdvice());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> interceptors.toArray(<span class="hljs-keyword">new</span> MethodInterceptor[interceptors.size()]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerAdvisorAdapter</span><span class="hljs-params">(AdvisorAdapter adapter)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.adapters.add(adapter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DefaultAdvisorAdapterRegistry</code> 设置了一系列的是配置，正是这些适配器的实现，为Spring AOP 提供了编织能力。下面以 <code>MethodBeforeAdviceAdapter</code> 为例，看具体的实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodBeforeAdviceAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AdvisorAdapter</span>, <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">supportsAdvice</span><span class="hljs-params">(Advice advice)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> (advice <span class="hljs-keyword">instanceof</span> MethodBeforeAdvice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> MethodInterceptor <span class="hljs-title">getInterceptor</span><span class="hljs-params">(Advisor advisor)</span> </span>&#123;</span><br><span class="line">MethodBeforeAdvice advice = (MethodBeforeAdvice) advisor.getAdvice();</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MethodBeforeAdviceInterceptor(advice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring AOP 为了实现 advice 的织入，设计了特定的拦截器对这些功能进行了封装。我们接着看 <code>MethodBeforeAdviceInterceptor</code> 如何完成封装的？</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodBeforeAdviceInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span>, <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> MethodBeforeAdvice advice;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MethodBeforeAdviceInterceptor</span><span class="hljs-params">(MethodBeforeAdvice advice)</span> </span>&#123;</span><br><span class="line">Assert.notNull(advice, <span class="hljs-string">"Advice must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.advice = advice;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis() );</span><br><span class="line"><span class="hljs-keyword">return</span> mi.proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，invoke 方法中，首先触发了 advice 的 before 回调，然后才是 proceed。<code>AfterReturningAdviceInterceptor</code> 的源码：</p><p>同理, <code>AfterReturningAdviceInterceptor</code>源码, 则先执行proceed:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AfterReturningAdviceInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span>, <span class="hljs-title">AfterAdvice</span>, <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AfterReturningAdvice advice;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">    * Create a new AfterReturningAdviceInterceptor for the given advice.</span></span><br><span class="line"><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> advice the AfterReturningAdvice to wrap</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AfterReturningAdviceInterceptor</span><span class="hljs-params">(AfterReturningAdvice advice)</span> </span>&#123;</span><br><span class="line">      Assert.notNull(advice, <span class="hljs-string">"Advice must not be null"</span>);</span><br><span class="line">      <span class="hljs-keyword">this</span>.advice = advice;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-meta">@Override</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      Object retVal = mi.proceed();</span><br><span class="line">      <span class="hljs-keyword">this</span>.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());</span><br><span class="line">      <span class="hljs-keyword">return</span> retVal;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ThrowsAdviceInterceptor</code> 的源码:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThrowsAdviceInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span>, <span class="hljs-title">AfterAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AFTER_THROWING = <span class="hljs-string">"afterThrowing"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Log logger = LogFactory.getLog(ThrowsAdviceInterceptor.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object throwsAdvice;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-comment">/** Methods on throws advice, keyed by exception class */</span></span><br><span class="line">   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Class&lt;?&gt;, Method&gt; exceptionHandlerMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThrowsAdviceInterceptor</span><span class="hljs-params">(Object throwsAdvice)</span> </span>&#123;</span><br><span class="line">      Assert.notNull(throwsAdvice, <span class="hljs-string">"Advice must not be null"</span>);</span><br><span class="line">      <span class="hljs-keyword">this</span>.throwsAdvice = throwsAdvice;</span><br><span class="line"></span><br><span class="line">      Method[] methods = throwsAdvice.getClass().getMethods();</span><br><span class="line">      <span class="hljs-keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">         <span class="hljs-keyword">if</span> (method.getName().equals(AFTER_THROWING) &amp;&amp;</span><br><span class="line">               (method.getParameterCount() == <span class="hljs-number">1</span> || method.getParameterCount() == <span class="hljs-number">4</span>) &amp;&amp;</span><br><span class="line">               Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - <span class="hljs-number">1</span>])</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="hljs-comment">// Have an exception handler</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - <span class="hljs-number">1</span>], method);</span><br><span class="line">            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="hljs-string">"Found exception handler method: "</span> + method);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.exceptionHandlerMap.isEmpty()) &#123;</span><br><span class="line">         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(</span><br><span class="line">               <span class="hljs-string">"At least one handler method must be found in class ["</span> + throwsAdvice.getClass() + <span class="hljs-string">"]"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHandlerMethodCount</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.exceptionHandlerMap.size();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-meta">@Nullable</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">private</span> Method <span class="hljs-title">getExceptionHandler</span><span class="hljs-params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">      Class&lt;?&gt; exceptionClass = exception.getClass();</span><br><span class="line">      <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="hljs-string">"Trying to find handler for exception of type ["</span> + exceptionClass.getName() + <span class="hljs-string">"]"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Method handler = <span class="hljs-keyword">this</span>.exceptionHandlerMap.get(exceptionClass);</span><br><span class="line">      <span class="hljs-keyword">while</span> (handler == <span class="hljs-keyword">null</span> &amp;&amp; exceptionClass != Throwable.class) &#123;</span><br><span class="line">         exceptionClass = exceptionClass.getSuperclass();</span><br><span class="line">         handler = <span class="hljs-keyword">this</span>.exceptionHandlerMap.get(exceptionClass);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span> (handler != <span class="hljs-keyword">null</span> &amp;&amp; logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="hljs-string">"Found handler for exception of type ["</span> + exceptionClass.getName() + <span class="hljs-string">"]: "</span> + handler);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">return</span> handler;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-meta">@Override</span></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">         <span class="hljs-keyword">return</span> mi.proceed();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">         Method handlerMethod = getExceptionHandler(ex);</span><br><span class="line">         <span class="hljs-keyword">if</span> (handlerMethod != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            invokeHandlerMethod(mi, ex, handlerMethod);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeHandlerMethod</span><span class="hljs-params">(MethodInvocation mi, Throwable ex, Method method)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      Object[] handlerArgs;</span><br><span class="line">      <span class="hljs-keyword">if</span> (method.getParameterCount() == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">         handlerArgs = <span class="hljs-keyword">new</span> Object[] &#123; ex &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">         handlerArgs = <span class="hljs-keyword">new</span> Object[] &#123;mi.getMethod(), mi.getArguments(), mi.getThis(), ex&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">         method.invoke(<span class="hljs-keyword">this</span>.throwsAdvice, handlerArgs);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">catch</span> (InvocationTargetException targetEx) &#123;</span><br><span class="line">         <span class="hljs-keyword">throw</span> targetEx.getTargetException();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们知道了对目标对象的增强是通过拦截器实现的，最后还是上时序图:</p><img src="/2019/08/22/Spring-2019-08-渐入Spring-AOP/spring_aop_Timing.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-AOP源码分析&quot;&gt;&lt;a href=&quot;#Spring-AOP源码分析&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP源码分析&quot;&gt;&lt;/a&gt;Spring AOP源码分析&lt;/h2&gt;&lt;h3 id=&quot;一、寻找入口&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>渐入Spring-DI</title>
    <link href="http://yoursite.com/2019/08/21/Spring-2019-08-%E6%B8%90%E5%85%A5Spring-DI/"/>
    <id>http://yoursite.com/2019/08/21/Spring-2019-08-渐入Spring-DI/</id>
    <published>2019-08-21T07:23:04.000Z</published>
    <updated>2019-08-27T10:48:05.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-自动装配之依赖注入"><a href="#Spring-自动装配之依赖注入" class="headerlink" title="Spring 自动装配之依赖注入"></a>Spring 自动装配之依赖注入</h2><h3 id="一、依赖注入发生的时间"><a href="#一、依赖注入发生的时间" class="headerlink" title="一、依赖注入发生的时间"></a>一、依赖注入发生的时间</h3><p>当 Spring IOC 容器完成了 Bean 定义资源的定位、载入和解析注册以后，IOC 容器中已经管理类 Bean<br>定义的相关数据，但是此时 IOC 容器还没有对所管理的 Bean 进行依赖注入，依赖注入在以下两种情况<br>发生：</p><ol><li>用户第一次调用 <code>getBean()</code>方法时，IOC 容器触发依赖注入。</li><li>当用户在配置文件中将<code>&lt;bean&gt;</code>元素配置了 <code>lazy-init=false</code> 属性，即让容器在解析注册 Bean 定义<br>时进行预实例化，触发依赖注入。</li></ol><p><code>BeanFactory</code> 接口定义了 Spring IOC 容器的基本功能规范，是 Spring IOC 容器所应遵守的最底层和<br>最基本的编程规范。BeanFactory 接口中定义了几个 <code>getBean()</code>方法，就是用户向 IOC 容器索取管理的<br>Bean 的方法，我们通过分析其子类的具体实现，理解 Spring IOC 容器在用户索取 Bean 时如何完成依<br>赖注入。</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-DI/DefaultListableBeanFactory.png"><p>在 BeanFactory 中我们可以看到 getBean(String…)方法，但它具体实现在 AbstractBeanFactory 中。</p><h3 id="二、寻找获取Bean的入口"><a href="#二、寻找获取Bean的入口" class="headerlink" title="二、寻找获取Bean的入口"></a>二、寻找获取Bean的入口</h3><p><code>AbstractBeanFactory</code> 的 getBean()相关方法的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//---------------------------------------------------------------------</span></span><br><span class="line"><span class="hljs-comment">// Implementation of BeanFactory interface</span></span><br><span class="line"><span class="hljs-comment">//---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//获取IOC容器中指定名称的Bean</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span><br><span class="line">    <span class="hljs-keyword">return</span> doGetBean(name, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//获取IOC容器中指定名称和类型的Bean</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(String name, @Nullable Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span><br><span class="line">    <span class="hljs-keyword">return</span> doGetBean(name, requiredType, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//获取IOC容器中指定名称和参数的Bean</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getBean</span><span class="hljs-params">(String name, Object... args)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span><br><span class="line">    <span class="hljs-keyword">return</span> doGetBean(name, <span class="hljs-keyword">null</span>, args, <span class="hljs-keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//获取IOC容器中指定名称、类型和参数的Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(String name, @Nullable Class&lt;T&gt; requiredType, @Nullable Object... args)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span><br><span class="line">    <span class="hljs-keyword">return</span> doGetBean(name, requiredType, args, <span class="hljs-keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)</span><br><span class="line"><span class="hljs-comment">//真正实现向IOC容器获取Bean的功能，也是触发依赖注入功能的地方</span></span><br><span class="line"><span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">doGetBean</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name, @Nullable <span class="hljs-keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                          @Nullable <span class="hljs-keyword">final</span> Object[] args, <span class="hljs-keyword">boolean</span> typeCheckOnly)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖</span></span><br><span class="line">    <span class="hljs-comment">//如果指定的是别名，将别名转换为规范的Bean名称</span></span><br><span class="line">    <span class="hljs-keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">    <span class="hljs-comment">//先从缓存中取是否已经有被创建过的单态类型的Bean</span></span><br><span class="line">    <span class="hljs-comment">//对于单例模式的Bean整个IOC容器中只创建一次，不需要重复创建</span></span><br><span class="line">    Object sharedInstance = getSingleton(beanName);</span><br><span class="line">    <span class="hljs-comment">//IOC容器创建单例模式Bean实例对象</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (sharedInstance != <span class="hljs-keyword">null</span> &amp;&amp; args == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="hljs-comment">//如果指定名称的Bean在容器中已有单例模式的Bean被创建</span></span><br><span class="line">            <span class="hljs-comment">//直接返回已经创建的Bean</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.debug(<span class="hljs-string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                             <span class="hljs-string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                logger.debug(<span class="hljs-string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="hljs-string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//获取给定Bean的实例对象，主要是完成FactoryBean的相关处理</span></span><br><span class="line">        <span class="hljs-comment">//注意：BeanFactory是管理容器中Bean的工厂，而FactoryBean是</span></span><br><span class="line">        <span class="hljs-comment">//创建创建对象的工厂Bean，两者之间有区别</span></span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="hljs-keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">        <span class="hljs-comment">// We're assumably within a circular reference.</span></span><br><span class="line">        <span class="hljs-comment">//缓存没有正在创建的单例模式Bean</span></span><br><span class="line">        <span class="hljs-comment">//缓存中已经有已经创建的原型模式Bean</span></span><br><span class="line">        <span class="hljs-comment">//但是由于循环引用的问题导致实例化对象失败</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">        <span class="hljs-comment">//对IOC容器中是否存在指定名称的BeanDefinition进行检查，首先检查是否</span></span><br><span class="line">        <span class="hljs-comment">//能在当前的BeanFactory中获取的所需要的Bean，如果不能则委托当前容器</span></span><br><span class="line">        <span class="hljs-comment">//的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找</span></span><br><span class="line">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">        <span class="hljs-comment">//当前容器的父级容器存在，且当前容器中不存在指定名称的Bean</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (parentBeanFactory != <span class="hljs-keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="hljs-comment">// Not found -&gt; check parent.</span></span><br><span class="line">            <span class="hljs-comment">//解析指定Bean名称的原始名称</span></span><br><span class="line">            String nameToLookup = originalBeanName(name);</span><br><span class="line">            <span class="hljs-keyword">if</span> (parentBeanFactory <span class="hljs-keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">                    nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (args != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-comment">// Delegation to parent with explicit args.</span></span><br><span class="line">                <span class="hljs-comment">//委派父级容器根据指定名称和显式的参数查找</span></span><br><span class="line">                <span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">                <span class="hljs-comment">//委派父级容器根据指定名称和类型查找</span></span><br><span class="line">                <span class="hljs-keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//创建的Bean是否需要进行类型验证，一般不需要</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">            <span class="hljs-comment">//向容器标记指定的Bean已经被创建</span></span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//根据指定Bean名称获取其父级的Bean定义</span></span><br><span class="line">            <span class="hljs-comment">//主要解决Bean继承时子类合并父类公共属性问题</span></span><br><span class="line">            <span class="hljs-keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">            <span class="hljs-comment">//获取当前Bean所有依赖Bean的名称</span></span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            <span class="hljs-comment">//如果当前Bean有依赖Bean</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                        <span class="hljs-string">"Circular depends-on relationship between '"</span> + beanName + <span class="hljs-string">"' and '"</span> + dep + <span class="hljs-string">"'"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-comment">//递归调用getBean方法，获取当前Bean的依赖Bean</span></span><br><span class="line">                    registerDependentBean(dep, beanName);</span><br><span class="line">                    <span class="hljs-comment">//把被依赖Bean注册给当前依赖的Bean</span></span><br><span class="line">                    getBean(dep);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Create bean instance.</span></span><br><span class="line">            <span class="hljs-comment">//创建单例模式Bean的实例对象</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                <span class="hljs-comment">//这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象</span></span><br><span class="line">                sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">                    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                        <span class="hljs-comment">//创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义</span></span><br><span class="line">                        <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                        <span class="hljs-comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                        <span class="hljs-comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                        <span class="hljs-comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                        <span class="hljs-comment">//显式地从容器单例模式Bean缓存中清除实例对象</span></span><br><span class="line">                        destroySingleton(beanName);</span><br><span class="line">                        <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="hljs-comment">//获取给定Bean的实例对象</span></span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">//IOC容器创建原型模式Bean实例对象</span></span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">                <span class="hljs-comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">                <span class="hljs-comment">//原型模式(Prototype)是每次都会创建一个新的对象</span></span><br><span class="line">                Object prototypeInstance = <span class="hljs-keyword">null</span>;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">//回调beforePrototypeCreation方法，默认的功能是注册当前创建的原型对象</span></span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    <span class="hljs-comment">//创建指定Bean对象实例</span></span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">//回调afterPrototypeCreation方法，默认的功能告诉IOC容器指定Bean的原型对象不再创建</span></span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-comment">//获取给定Bean的实例对象</span></span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">//要创建的Bean既不是单例模式，也不是原型模式，则根据Bean定义资源中</span></span><br><span class="line">            <span class="hljs-comment">//配置的生命周期范围，选择实例化Bean的合适方法，这种在Web应用程序中</span></span><br><span class="line">            <span class="hljs-comment">//比较常用，如：request、session、application等生命周期</span></span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                String scopeName = mbd.getScope();</span><br><span class="line">                <span class="hljs-keyword">final</span> Scope scope = <span class="hljs-keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">                <span class="hljs-comment">//Bean定义资源中没有配置生命周期范围，则Bean定义不合法</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (scope == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"No Scope registered for scope name '"</span> + scopeName + <span class="hljs-string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">//这里又使用了一个匿名内部类，获取一个指定生命周期范围的实例</span></span><br><span class="line">                    Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">                        beforePrototypeCreation(beanName);</span><br><span class="line">                        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                            <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">                            afterPrototypeCreation(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="hljs-comment">//获取给定Bean的实例对象</span></span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                                                    <span class="hljs-string">"Scope '"</span> + scopeName + <span class="hljs-string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                                                    <span class="hljs-string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                                                    ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">    <span class="hljs-comment">//对创建的Bean实例对象进行类型检查</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">            <span class="hljs-keyword">if</span> (convertedBean == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> convertedBean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="hljs-string">"Failed to convert bean '"</span> + name + <span class="hljs-string">"' to required type '"</span> +</span><br><span class="line">                             ClassUtils.getQualifiedName(requiredType) + <span class="hljs-string">"'"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面对向 IOC 容器获取 Bean 方法的分析，我们可以看到在 Spring 中，如果 Bean 定义的单例模式(Singleton)，则容器在创建之前先从缓存中查找，以确保整个容器中只存在一个实例对象。如果 Bean定义的是原型模式(Prototype)，则容器每次都会创建一个新的实例对象。除此之外，Bean 定义还可以扩展为指定其生命周期范围。上面的源码只是定义了根据 Bean 定义的模式，采取的不同创建 Bean 实例对象的策略，具体的 Bean实例对象的创建过程由实现了 <code>ObjectFactory</code> 接口的匿名内部类的 createBean()方法完成，ObjectFactory使用委派模式, 具体的Bean实例创建过程交由其实现类<code>AbstractAutowireCapableBeanFactory</code>完成. 我们继续分析<code>AbstractAutowireCapableBeanFactory</code>的createBean()方法的源码, 理解其创建Bean实例的具体实现过程.</p><h3 id="三、开始实例化"><a href="#三、开始实例化" class="headerlink" title="三、开始实例化"></a>三、开始实例化</h3><p><code>AbstractAutowireCapableBeanFactory</code> 类实现了 <code>ObjectFactory</code> 接口，创建容器指定的 Bean 实例对<br>象，同时还对创建的 Bean 实例对象进行初始化处理。其创建 Bean 实例对象的方法源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//创建Bean实例对象</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">createBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="hljs-string">"Creating instance of bean '"</span> + beanName + <span class="hljs-string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RootBeanDefinition mbdToUse = mbd;</span><br><span class="line">    <span class="hljs-comment">//判断需要创建的Bean是否可以实例化，即是否可以通过当前的类加载器加载</span></span><br><span class="line">    Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">    <span class="hljs-keyword">if</span> (resolvedClass != <span class="hljs-keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        mbdToUse = <span class="hljs-keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">        mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//校验和准备Bean中的方法覆盖</span></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        mbdToUse.prepareMethodOverrides();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">                                               beanName, <span class="hljs-string">"Validation of method overrides failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//如果Bean配置了初始化前和初始化后的处理器，则试图返回一个需要创建Bean的代理对象</span></span><br><span class="line">        Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">        <span class="hljs-keyword">if</span> (bean != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">                                        <span class="hljs-string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//创建Bean的入口</span></span><br><span class="line">        Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="hljs-string">"Finished creating instance of bean '"</span> + beanName + <span class="hljs-string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">        <span class="hljs-comment">// A previously detected exception with proper bean creation context already...</span></span><br><span class="line">        <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">        <span class="hljs-comment">// An IllegalStateException to be communicated up to DefaultSingletonBeanRegistry...</span></span><br><span class="line">        <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">            mbdToUse.getResourceDescription(), beanName, <span class="hljs-string">"Unexpected exception during bean creation"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//真正创建Bean的方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">doCreateBean</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String beanName, <span class="hljs-keyword">final</span> RootBeanDefinition mbd, <span class="hljs-keyword">final</span> @Nullable Object[] args)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Instantiate the bean.</span></span><br><span class="line">    <span class="hljs-comment">//封装被创建的Bean对象</span></span><br><span class="line">    BeanWrapper instanceWrapper = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        instanceWrapper = <span class="hljs-keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (instanceWrapper == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">    <span class="hljs-comment">//获取实例化对象的类型</span></span><br><span class="line">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">    <span class="hljs-keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">        mbd.resolvedTargetType = beanType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">    <span class="hljs-comment">//调用PostProcessor后置处理器</span></span><br><span class="line">    <span class="hljs-keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                <span class="hljs-string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            mbd.postProcessed = <span class="hljs-keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">    <span class="hljs-comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">    <span class="hljs-comment">//向容器中缓存单例模式的Bean对象，以防循环引用</span></span><br><span class="line">    <span class="hljs-keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="hljs-keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                                      isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    <span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="hljs-string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">                         <span class="hljs-string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//这里是一个匿名内部类，为了防止循环引用，尽早持有对象的引用</span></span><br><span class="line">        addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Initialize the bean instance.</span></span><br><span class="line">    <span class="hljs-comment">//Bean对象的初始化，依赖注入在此触发</span></span><br><span class="line">    <span class="hljs-comment">//这个exposedObject在初始化完成之后返回作为依赖注入完成后的Bean</span></span><br><span class="line">    Object exposedObject = bean;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//将Bean实例对象封装，并且Bean定义中配置的属性值赋值给实例对象</span></span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        <span class="hljs-comment">//初始化Bean对象</span></span><br><span class="line">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, <span class="hljs-string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="hljs-comment">//获取指定名称的已注册的单例模式Bean对象</span></span><br><span class="line">        Object earlySingletonReference = getSingleton(beanName, <span class="hljs-keyword">false</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (earlySingletonReference != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-comment">//根据名称获取的已注册的Bean和正在实例化的Bean是同一个</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                <span class="hljs-comment">//当前实例化的Bean初始化完成</span></span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//当前Bean依赖其他Bean，并且当发生循环引用时不允许新创建实例对象</span></span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                Set&lt;String&gt; actualDependentBeans = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line">                <span class="hljs-comment">//获取当前Bean所依赖的其他Bean</span></span><br><span class="line">                <span class="hljs-keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                    <span class="hljs-comment">//对依赖Bean进行类型检查</span></span><br><span class="line">                    <span class="hljs-keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.add(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                                                               <span class="hljs-string">"Bean with name '"</span> + beanName + <span class="hljs-string">"' has been injected into other beans ["</span> +</span><br><span class="line">                                                               StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                                                               <span class="hljs-string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                                                               <span class="hljs-string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                                                               <span class="hljs-string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                                                               <span class="hljs-string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Register bean as disposable.</span></span><br><span class="line">    <span class="hljs-comment">//注册完成依赖注入的Bean</span></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="hljs-string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到具体的依赖注入实现其实就在以下两个方法中：</p><ol><li><code>createBeanInstance()</code>方法，生成 Bean 所包含的 java 对象实例。</li><li><code>populateBean()</code>方法，对 Bean 属性的依赖注入进行处理。</li></ol><p>下面继续分析这两个方法的代码实现。</p><h3 id="四、选择Bean实例化策略"><a href="#四、选择Bean实例化策略" class="headerlink" title="四、选择Bean实例化策略"></a>四、选择Bean实例化策略</h3><p>在 createBeanInstance()方法中，根据指定的初始化策略，使用简单工厂、工厂方法或者容器的自动装配特性生成 Java 实例对象，创建对象的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//创建Bean的实例对象</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> BeanWrapper <span class="hljs-title">createBeanInstance</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">    <span class="hljs-comment">//检查确认Bean是可实例化的</span></span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">    <span class="hljs-comment">//使用工厂方法对Bean进行实例化</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (beanClass != <span class="hljs-keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                        <span class="hljs-string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">    <span class="hljs-keyword">if</span> (instanceSupplier != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (mbd.getFactoryMethodName() != <span class="hljs-keyword">null</span>)  &#123;</span><br><span class="line">        <span class="hljs-comment">//调用工厂方法实例化</span></span><br><span class="line">        <span class="hljs-keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Shortcut when re-creating the same bean...</span></span><br><span class="line">    <span class="hljs-comment">//使用容器的自动装配方法进行实例化</span></span><br><span class="line">    <span class="hljs-keyword">boolean</span> resolved = <span class="hljs-keyword">false</span>;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> autowireNecessary = <span class="hljs-keyword">false</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (args == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                resolved = <span class="hljs-keyword">true</span>;</span><br><span class="line">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (resolved) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">            <span class="hljs-comment">//配置了自动装配属性，使用容器的自动装配实例化</span></span><br><span class="line">            <span class="hljs-comment">//容器的自动装配是根据参数类型匹配Bean的构造方法</span></span><br><span class="line">            <span class="hljs-keyword">return</span> autowireConstructor(beanName, mbd, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//使用默认的无参构造方法实例化</span></span><br><span class="line">            <span class="hljs-keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Need to determine the constructor...</span></span><br><span class="line">    <span class="hljs-comment">//使用Bean的构造方法进行实例化</span></span><br><span class="line">    Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">    <span class="hljs-keyword">if</span> (ctors != <span class="hljs-keyword">null</span> ||</span><br><span class="line">        mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">        mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">        <span class="hljs-comment">//使用容器的自动装配特性，调用匹配的构造方法实例化</span></span><br><span class="line">        <span class="hljs-keyword">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// No special handling: simply use no-arg constructor.</span></span><br><span class="line">    <span class="hljs-comment">//使用默认的无参构造方法实例化</span></span><br><span class="line">    <span class="hljs-keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//使用默认的无参构造方法实例化Bean对象</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> BeanWrapper <span class="hljs-title">instantiateBean</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String beanName, <span class="hljs-keyword">final</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        Object beanInstance;</span><br><span class="line">        <span class="hljs-keyword">final</span> BeanFactory parent = <span class="hljs-keyword">this</span>;</span><br><span class="line">        <span class="hljs-comment">//获取系统的安全管理接口，JDK标准的安全管理API</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-comment">//这里是一个匿名内置类，根据实例化策略创建实例对象</span></span><br><span class="line">            beanInstance = AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt;</span><br><span class="line">                                                         getInstantiationStrategy().instantiate(mbd, beanName, parent),</span><br><span class="line">                                                         getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//将实例化的对象封装起来</span></span><br><span class="line">            beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">        &#125;</span><br><span class="line">        BeanWrapper bw = <span class="hljs-keyword">new</span> BeanWrapperImpl(beanInstance);</span><br><span class="line">        initBeanWrapper(bw);</span><br><span class="line">        <span class="hljs-keyword">return</span> bw;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="hljs-string">"Instantiation of bean failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看出, 对使用工厂方法和自动装配特性的 Bean 的实例化相对比较清楚，调用相应的工厂方法或者参数匹配的构造方法即可完成实例化对象的工作，但是对于我们最常使用的默认无参构造方法就需要使用相应的初始化策略(JDK 的反射机制或者 CGLib)来进行初始化了，在方法 getInstantiationStrategy().instantiate()中就具体实现类使用初始策略实例化对象。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//使用初始化策略实例化Bean对象</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">instantiate</span><span class="hljs-params">(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Don't override the class with CGLIB if no overrides.</span></span><br><span class="line">    <span class="hljs-comment">//如果Bean定义中没有方法覆盖，则就不需要CGLIB父类类的方法</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (!bd.hasMethodOverrides()) &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">        <span class="hljs-keyword">synchronized</span> (bd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="hljs-comment">//获取对象的构造方法或工厂方法</span></span><br><span class="line">            constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">            <span class="hljs-comment">//如果没有构造方法且没有工厂方法</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (constructorToUse == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-comment">//使用JDK的反射机制，判断要实例化的Bean是否是接口</span></span><br><span class="line">                <span class="hljs-keyword">final</span> Class&lt;?&gt; clazz = bd.getBeanClass();</span><br><span class="line">                <span class="hljs-keyword">if</span> (clazz.isInterface()) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanInstantiationException(clazz, <span class="hljs-string">"Specified class is an interface"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                        <span class="hljs-comment">//这里是一个匿名内置类，使用反射机制获取Bean的构造方法</span></span><br><span class="line">                        constructorToUse = AccessController.doPrivileged(</span><br><span class="line">                            (PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;) () -&gt; clazz.getDeclaredConstructor());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        constructorToUse =clazz.getDeclaredConstructor();</span><br><span class="line">                    &#125;</span><br><span class="line">                    bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanInstantiationException(clazz, <span class="hljs-string">"No default constructor found"</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//使用BeanUtils实例化，通过反射机制调用”构造方法.newInstance(arg)”来进行实例化</span></span><br><span class="line">        <span class="hljs-keyword">return</span> BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">    &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// Must generate CGLIB subclass.</span></span><br><span class="line">        <span class="hljs-comment">//使用CGLIB来实例化对象</span></span><br><span class="line">        <span class="hljs-keyword">return</span> instantiateWithMethodInjection(bd, beanName, owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CGLib 是一个常用的字节码生成器的类库，它提供了一系列 API 实现 Java 字节码的生成和转换功能。</p><h3 id="五、准备依赖注入"><a href="#五、准备依赖注入" class="headerlink" title="五、准备依赖注入"></a>五、准备依赖注入</h3><p>在前面的分析中我们已经了解到 Bean 的依赖注入主要分为两个步骤，首先调用 <code>createBeanInstance()</code>方法生成 Bean 所包含的 Java 对象实例。然后，调用 <code>populateBean()</code>方法，对 Bean 属性的依赖注入进行处理。上面我们已经分析了容器初始化生成 Bean 所包含的 Java 实例对象的过程，现在我们继续分析生成对象后，Spring IOC 容器是如何将 Bean 的属性依赖关系注入 Bean 实例对象中并设置好的，回到<code>AbstractAutowireCapableBeanFactory</code> 的 populateBean()方法，对属性依赖注入的代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//将Bean属性设置到生成的实例对象上</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">populateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (bw == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, <span class="hljs-string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Skip property population phase for null instance.</span></span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span></span><br><span class="line">    <span class="hljs-comment">// state of the bean before properties are set. This can be used, for example,</span></span><br><span class="line">    <span class="hljs-comment">// to support styles of field injection.</span></span><br><span class="line">    <span class="hljs-keyword">boolean</span> continueWithPropertyPopulation = <span class="hljs-keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (bp <span class="hljs-keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                <span class="hljs-keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                    continueWithPropertyPopulation = <span class="hljs-keyword">false</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//获取容器在解析Bean定义资源时为BeanDefiniton中设置的属性值</span></span><br><span class="line">    PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="hljs-keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//对依赖注入处理，首先处理autowiring自动装配的依赖注入</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">        mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        MutablePropertyValues newPvs = <span class="hljs-keyword">new</span> MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line">        <span class="hljs-comment">//根据Bean名称进行autowiring自动装配处理</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line">        <span class="hljs-comment">//根据Bean类型进行autowiring自动装配处理</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pvs = newPvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//对非autowiring的属性进行依赖注入处理</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">    <span class="hljs-keyword">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (pvs == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            pvs = mbd.getPropertyValues();</span><br><span class="line">        &#125;</span><br><span class="line">        PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">        <span class="hljs-keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (bp <span class="hljs-keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                    InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                    pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                    <span class="hljs-keyword">if</span> (pvs == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                        <span class="hljs-keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">            checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (pvs != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">//对属性进行注入</span></span><br><span class="line">        applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析上述代码，我们可以看出，对属性的注入过程分以下两种情况：</p><ol><li>属性值类型不需要强制转换时，不需要解析属性值，直接准备进行依赖注入。</li><li>属性值需要进行类型强制转换时，如对其他对象的引用等，首先需要解析属性值，然后对解析后的属性值进行依赖注入。</li></ol><p>对属性值的解析是在<code>BeanDefinitionValueResolver</code>类中的<code>resolveValueIfNecessary()</code>方法中进行的，<br>对属性值的依赖注入是通过 <code>bw.setPropertyValues()</code>方法实现的，在分析属性值的依赖注入之前，我们<br>先分析一下对属性值的解析过程。</p><h3 id="六-、解析属性注入规则"><a href="#六-、解析属性注入规则" class="headerlink" title="六 、解析属性注入规则"></a>六 、解析属性注入规则</h3><p>当容器在对属性进行依赖注入时，如果发现属性值需要进行类型转换，如属性值是容器中另一个 Bean实例对象的引用，则容器首先需要根据属性值解析出所引用的对象，然后才能将该引用对象注入到目标实例对象的属性上去，对属性进行解析的由 <code>resolveValueIfNecessary()</code>方法实现，其源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析属性值，对注入类型进行转换</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">resolveValueIfNecessary</span><span class="hljs-params">(Object argName, @Nullable Object value)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// We must check each value to see whether it requires a runtime reference</span></span><br><span class="line">    <span class="hljs-comment">// to another bean to be resolved.</span></span><br><span class="line">    <span class="hljs-comment">//对引用类型的属性进行解析</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> RuntimeBeanReference) &#123;</span><br><span class="line">        RuntimeBeanReference ref = (RuntimeBeanReference) value;</span><br><span class="line">        <span class="hljs-comment">//调用引用类型属性的解析方法</span></span><br><span class="line">        <span class="hljs-keyword">return</span> resolveReference(argName, ref);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//对属性值是引用容器中另一个Bean名称的解析</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> RuntimeBeanNameReference) &#123;</span><br><span class="line">        String refName = ((RuntimeBeanNameReference) value).getBeanName();</span><br><span class="line">        refName = String.valueOf(doEvaluate(refName));</span><br><span class="line">        <span class="hljs-comment">//从容器中获取指定名称的Bean</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.beanFactory.containsBean(refName)) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">                <span class="hljs-string">"Invalid bean name '"</span> + refName + <span class="hljs-string">"' in bean reference for "</span> + argName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> refName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//对Bean类型属性的解析，主要是Bean中的内部类</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> BeanDefinitionHolder) &#123;</span><br><span class="line">        <span class="hljs-comment">// Resolve BeanDefinitionHolder: contains BeanDefinition with name and aliases.</span></span><br><span class="line">        BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value;</span><br><span class="line">        <span class="hljs-keyword">return</span> resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> BeanDefinition) &#123;</span><br><span class="line">        <span class="hljs-comment">// Resolve plain BeanDefinition, without contained name: use dummy name.</span></span><br><span class="line">        BeanDefinition bd = (BeanDefinition) value;</span><br><span class="line">        String innerBeanName = <span class="hljs-string">"(inner bean)"</span> + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +</span><br><span class="line">            ObjectUtils.getIdentityHexString(bd);</span><br><span class="line">        <span class="hljs-keyword">return</span> resolveInnerBean(argName, innerBeanName, bd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//对集合数组类型的属性解析</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> ManagedArray) &#123;</span><br><span class="line">        <span class="hljs-comment">// May need to resolve contained runtime references.</span></span><br><span class="line">        ManagedArray array = (ManagedArray) value;</span><br><span class="line">        <span class="hljs-comment">//获取数组的类型</span></span><br><span class="line">        Class&lt;?&gt; elementType = array.resolvedElementType;</span><br><span class="line">        <span class="hljs-keyword">if</span> (elementType == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-comment">//获取数组元素的类型</span></span><br><span class="line">            String elementTypeName = array.getElementTypeName();</span><br><span class="line">            <span class="hljs-keyword">if</span> (StringUtils.hasText(elementTypeName)) &#123;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">//使用反射机制创建指定类型的对象</span></span><br><span class="line">                    elementType = ClassUtils.forName(elementTypeName, <span class="hljs-keyword">this</span>.beanFactory.getBeanClassLoader());</span><br><span class="line">                    array.resolvedElementType = elementType;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    <span class="hljs-comment">// Improve the message by showing the context.</span></span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">                        <span class="hljs-keyword">this</span>.beanDefinition.getResourceDescription(), <span class="hljs-keyword">this</span>.beanName,</span><br><span class="line">                        <span class="hljs-string">"Error resolving array type for "</span> + argName, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//没有获取到数组的类型，也没有获取到数组元素的类型</span></span><br><span class="line">            <span class="hljs-comment">//则直接设置数组的类型为Object</span></span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                elementType = Object.class;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//创建指定类型的数组</span></span><br><span class="line">        <span class="hljs-keyword">return</span> resolveManagedArray(argName, (List&lt;?&gt;) value, elementType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//解析list类型的属性值</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> ManagedList) &#123;</span><br><span class="line">        <span class="hljs-comment">// May need to resolve contained runtime references.</span></span><br><span class="line">        <span class="hljs-keyword">return</span> resolveManagedList(argName, (List&lt;?&gt;) value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//解析set类型的属性值</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> ManagedSet) &#123;</span><br><span class="line">        <span class="hljs-comment">// May need to resolve contained runtime references.</span></span><br><span class="line">        <span class="hljs-keyword">return</span> resolveManagedSet(argName, (Set&lt;?&gt;) value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//解析map类型的属性值</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> ManagedMap) &#123;</span><br><span class="line">        <span class="hljs-comment">// May need to resolve contained runtime references.</span></span><br><span class="line">        <span class="hljs-keyword">return</span> resolveManagedMap(argName, (Map&lt;?, ?&gt;) value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//解析props类型的属性值，props其实就是key和value均为字符串的map</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> ManagedProperties) &#123;</span><br><span class="line">        Properties original = (Properties) value;</span><br><span class="line">        <span class="hljs-comment">//创建一个拷贝，用于作为解析后的返回值</span></span><br><span class="line">        Properties copy = <span class="hljs-keyword">new</span> Properties();</span><br><span class="line">        original.forEach((propKey, propValue) -&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (propKey <span class="hljs-keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">                propKey = evaluate((TypedStringValue) propKey);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (propValue <span class="hljs-keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">                propValue = evaluate((TypedStringValue) propValue);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (propKey == <span class="hljs-keyword">null</span> || propValue == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">                    <span class="hljs-keyword">this</span>.beanDefinition.getResourceDescription(), <span class="hljs-keyword">this</span>.beanName,</span><br><span class="line">                    <span class="hljs-string">"Error converting Properties key/value pair for "</span> + argName + <span class="hljs-string">": resolved to null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            copy.put(propKey, propValue);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//解析字符串类型的属性值</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">        <span class="hljs-comment">// Convert value to target type here.</span></span><br><span class="line">        TypedStringValue typedStringValue = (TypedStringValue) value;</span><br><span class="line">        Object valueObject = evaluate(typedStringValue);</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//获取属性的目标类型</span></span><br><span class="line">            Class&lt;?&gt; resolvedTargetType = resolveTargetType(typedStringValue);</span><br><span class="line">            <span class="hljs-keyword">if</span> (resolvedTargetType != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-comment">//对目标类型的属性进行解析，递归调用</span></span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//没有获取到属性的目标对象，则按Object类型返回</span></span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> valueObject;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="hljs-comment">// Improve the message by showing the context.</span></span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">                <span class="hljs-keyword">this</span>.beanDefinition.getResourceDescription(), <span class="hljs-keyword">this</span>.beanName,</span><br><span class="line">                <span class="hljs-string">"Error converting typed String value for "</span> + argName, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> evaluate(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//解析引用类型的属性值</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">resolveReference</span><span class="hljs-params">(Object argName, RuntimeBeanReference ref)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        Object bean;</span><br><span class="line">        <span class="hljs-comment">//获取引用的Bean名称</span></span><br><span class="line">        String refName = ref.getBeanName();</span><br><span class="line">        refName = String.valueOf(doEvaluate(refName));</span><br><span class="line">        <span class="hljs-comment">//如果引用的对象在父类容器中，则从父类容器中获取指定的引用对象</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (ref.isToParent()) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.beanFactory.getParentBeanFactory() == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">                    <span class="hljs-keyword">this</span>.beanDefinition.getResourceDescription(), <span class="hljs-keyword">this</span>.beanName,</span><br><span class="line">                    <span class="hljs-string">"Can't resolve reference to bean '"</span> + refName +</span><br><span class="line">                    <span class="hljs-string">"' in parent factory: no parent factory available"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bean = <span class="hljs-keyword">this</span>.beanFactory.getParentBeanFactory().getBean(refName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//从当前的容器中获取指定的引用Bean对象，如果指定的Bean没有被实例化</span></span><br><span class="line">        <span class="hljs-comment">//则会递归触发引用Bean的初始化和依赖注入</span></span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            bean = <span class="hljs-keyword">this</span>.beanFactory.getBean(refName);</span><br><span class="line">            <span class="hljs-comment">//将当前实例化对象的依赖引用对象</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.beanFactory.registerDependentBean(refName, <span class="hljs-keyword">this</span>.beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">            bean = <span class="hljs-keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">            <span class="hljs-keyword">this</span>.beanDefinition.getResourceDescription(), <span class="hljs-keyword">this</span>.beanName,</span><br><span class="line">            <span class="hljs-string">"Cannot resolve reference to bean '"</span> + ref.getBeanName() + <span class="hljs-string">"' while setting "</span> + argName, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * For each element in the managed array, resolve reference if necessary.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//解析array类型的属性</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">resolveManagedArray</span><span class="hljs-params">(Object argName, List&lt;?&gt; ml, Class&lt;?&gt; elementType)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//创建一个指定类型的数组，用于存放和返回解析后的数组</span></span><br><span class="line">    Object resolved = Array.newInstance(elementType, ml.size());</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ml.size(); i++) &#123;</span><br><span class="line">        <span class="hljs-comment">//递归解析array的每一个元素，并将解析后的值设置到resolved数组中，索引为i</span></span><br><span class="line">        Array.set(resolved, i,</span><br><span class="line">                  resolveValueIfNecessary(<span class="hljs-keyword">new</span> KeyedArgName(argName, i), ml.get(i)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> resolved;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码分析，我们明白了 Spring 是如何将引用类型，内部类以及集合类型等属性进行解析的，<br>属性值解析完成后就可以进行依赖注入了，依赖注入的过程就是 Bean 对象实例设置到它所依赖的 Bean<br>对象属性上去。而真正的依赖注入是通过 <code>bw.setPropertyValues()</code>方法实现的，该方法也使用了委托模<br>式 ， 在 <code>BeanWrapper</code> 接口中至少定义了方法声明，依赖注入具体实现交由其实现类<code>BeanWrapperImpl</code> 来完成，下面我们就分析依 <code>BeanWrapperImpl</code> 中赖注入相关的源码。</p><h3 id="七、注入赋值"><a href="#七、注入赋值" class="headerlink" title="七、注入赋值"></a>七、注入赋值</h3><p>BeanWrapperImpl 类主要是对容器中完成初始化的 Bean 实例对象进行属性的依赖注入，即把 Bean<br>对象设置到它所依赖的另一个 Bean 的属性中去。然而，BeanWrapperImpl 中的注入方法实际上由<br><code>AbstractNestablePropertyAccessor</code> 来实现的，其相关源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//实现属性依赖注入功能</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPropertyValue</span><span class="hljs-params">(PropertyTokenHolder tokens, PropertyValue pv)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (tokens.keys != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        processKeyedProperty(tokens, pv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        processLocalProperty(tokens, pv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//实现属性依赖注入功能</span></span><br><span class="line"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processKeyedProperty</span><span class="hljs-params">(PropertyTokenHolder tokens, PropertyValue pv)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//调用属性的getter方法，获取属性的值</span></span><br><span class="line">    Object propValue = getPropertyHoldingValue(tokens);</span><br><span class="line">    PropertyHandler ph = getLocalPropertyHandler(tokens.actualName);</span><br><span class="line">    <span class="hljs-keyword">if</span> (ph == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidPropertyException(</span><br><span class="line">            getRootClass(), <span class="hljs-keyword">this</span>.nestedPath + tokens.actualName, <span class="hljs-string">"No property handler found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Assert.state(tokens.keys != <span class="hljs-keyword">null</span>, <span class="hljs-string">"No token keys"</span>);</span><br><span class="line">    String lastKey = tokens.keys[tokens.keys.length - <span class="hljs-number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//注入array类型的属性值</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (propValue.getClass().isArray()) &#123;</span><br><span class="line">        Class&lt;?&gt; requiredType = propValue.getClass().getComponentType();</span><br><span class="line">        <span class="hljs-keyword">int</span> arrayIndex = Integer.parseInt(lastKey);</span><br><span class="line">        Object oldValue = <span class="hljs-keyword">null</span>;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (isExtractOldValueForEditor() &amp;&amp; arrayIndex &lt; Array.getLength(propValue)) &#123;</span><br><span class="line">                oldValue = Array.get(propValue, arrayIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            Object convertedValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),</span><br><span class="line">                                                       requiredType, ph.nested(tokens.keys.length));</span><br><span class="line">            <span class="hljs-comment">//获取集合类型属性的长度</span></span><br><span class="line">            <span class="hljs-keyword">int</span> length = Array.getLength(propValue);</span><br><span class="line">            <span class="hljs-keyword">if</span> (arrayIndex &gt;= length &amp;&amp; arrayIndex &lt; <span class="hljs-keyword">this</span>.autoGrowCollectionLimit) &#123;</span><br><span class="line">                Class&lt;?&gt; componentType = propValue.getClass().getComponentType();</span><br><span class="line">                Object newArray = Array.newInstance(componentType, arrayIndex + <span class="hljs-number">1</span>);</span><br><span class="line">                System.arraycopy(propValue, <span class="hljs-number">0</span>, newArray, <span class="hljs-number">0</span>, length);</span><br><span class="line">                setPropertyValue(tokens.actualName, newArray);</span><br><span class="line">                <span class="hljs-comment">//调用属性的getter方法，获取属性的值</span></span><br><span class="line">                propValue = getPropertyValue(tokens.actualName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//将属性的值赋值给数组中的元素</span></span><br><span class="line">            Array.set(propValue, arrayIndex, convertedValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="hljs-comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//注入list类型的属性值</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propValue <span class="hljs-keyword">instanceof</span> List) &#123;</span><br><span class="line">        <span class="hljs-comment">//获取list集合的类型</span></span><br><span class="line">        Class&lt;?&gt; requiredType = ph.getCollectionType(tokens.keys.length);</span><br><span class="line">        List&lt;Object&gt; list = (List&lt;Object&gt;) propValue;</span><br><span class="line">        <span class="hljs-comment">//获取list集合的size</span></span><br><span class="line">        <span class="hljs-keyword">int</span> index = Integer.parseInt(lastKey);</span><br><span class="line">        Object oldValue = <span class="hljs-keyword">null</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (isExtractOldValueForEditor() &amp;&amp; index &lt; list.size()) &#123;</span><br><span class="line">            oldValue = list.get(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//获取list解析后的属性值</span></span><br><span class="line">        Object convertedValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),</span><br><span class="line">                                                   requiredType, ph.nested(tokens.keys.length));</span><br><span class="line">        <span class="hljs-keyword">int</span> size = list.size();</span><br><span class="line">        <span class="hljs-comment">//如果list的长度大于属性值的长度，则多余的元素赋值为null</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (index &gt;= size &amp;&amp; index &lt; <span class="hljs-keyword">this</span>.autoGrowCollectionLimit) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size; i &lt; index; i++) &#123;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    list.add(<span class="hljs-keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">catch</span> (NullPointerException ex) &#123;</span><br><span class="line">                   <span class="hljs-comment">// ...</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(convertedValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                <span class="hljs-comment">//将值添加到list中</span></span><br><span class="line">                list.set(index, convertedValue);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">              <span class="hljs-comment">//  ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//注入map类型的属性值</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propValue <span class="hljs-keyword">instanceof</span> Map) &#123;</span><br><span class="line">        <span class="hljs-comment">//获取map集合key的类型</span></span><br><span class="line">        Class&lt;?&gt; mapKeyType = ph.getMapKeyType(tokens.keys.length);</span><br><span class="line">        <span class="hljs-comment">//获取map集合value的类型</span></span><br><span class="line">        Class&lt;?&gt; mapValueType = ph.getMapValueType(tokens.keys.length);</span><br><span class="line">        Map&lt;Object, Object&gt; map = (Map&lt;Object, Object&gt;) propValue;</span><br><span class="line">        <span class="hljs-comment">// IMPORTANT: Do not pass full property name in here - property editors</span></span><br><span class="line">        <span class="hljs-comment">// must not kick in for map keys but rather only for map values.</span></span><br><span class="line">        TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType);</span><br><span class="line">        <span class="hljs-comment">//解析map类型属性key值</span></span><br><span class="line">        Object convertedMapKey = convertIfNecessary(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, lastKey, mapKeyType, typeDescriptor);</span><br><span class="line">        Object oldValue = <span class="hljs-keyword">null</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (isExtractOldValueForEditor()) &#123;</span><br><span class="line">            oldValue = map.get(convertedMapKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// Pass full property name and old value in here, since we want full</span></span><br><span class="line">        <span class="hljs-comment">// conversion ability for map values.</span></span><br><span class="line">        <span class="hljs-comment">//解析map类型属性value值</span></span><br><span class="line">        Object convertedMapValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),</span><br><span class="line">                                                      mapValueType, ph.nested(tokens.keys.length));</span><br><span class="line">        <span class="hljs-comment">//将解析后的key和value值赋值给map集合属性</span></span><br><span class="line">        map.put(convertedMapKey, convertedMapValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidPropertyException(getRootClass(), <span class="hljs-keyword">this</span>.nestedPath + tokens.canonicalName,<span class="hljs-string">"..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">getPropertyHoldingValue</span><span class="hljs-params">(PropertyTokenHolder tokens)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Apply indexes and map keys: fetch value for all keys but the last one.</span></span><br><span class="line">    Assert.state(tokens.keys != <span class="hljs-keyword">null</span>, <span class="hljs-string">"No token keys"</span>);</span><br><span class="line">    PropertyTokenHolder getterTokens = <span class="hljs-keyword">new</span> PropertyTokenHolder(tokens.actualName);</span><br><span class="line">    getterTokens.canonicalName = tokens.canonicalName;</span><br><span class="line">    getterTokens.keys = <span class="hljs-keyword">new</span> String[tokens.keys.length - <span class="hljs-number">1</span>];</span><br><span class="line">    System.arraycopy(tokens.keys, <span class="hljs-number">0</span>, getterTokens.keys, <span class="hljs-number">0</span>, tokens.keys.length - <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">    Object propValue;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//获取属性值</span></span><br><span class="line">        propValue = getPropertyValue(getterTokens);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (NotReadablePropertyException ex) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (propValue == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">// null map value case</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (isAutoGrowNestedPaths()) &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> lastKeyIndex = tokens.canonicalName.lastIndexOf(<span class="hljs-string">'['</span>);</span><br><span class="line">            getterTokens.canonicalName = tokens.canonicalName.substring(<span class="hljs-number">0</span>, lastKeyIndex);</span><br><span class="line">            propValue = setDefaultValue(getterTokens);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullValueInNestedPathException(...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> propValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processLocalProperty</span><span class="hljs-params">(PropertyTokenHolder tokens, PropertyValue pv)</span> </span>&#123;</span><br><span class="line">    PropertyHandler ph = getLocalPropertyHandler(tokens.actualName);</span><br><span class="line">    <span class="hljs-keyword">if</span> (ph == <span class="hljs-keyword">null</span> || !ph.isWritable()) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (pv.isOptional()) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="hljs-string">"..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> createNotWritablePropertyException(tokens.canonicalName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object oldValue = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        Object originalValue = pv.getValue();</span><br><span class="line">        Object valueToApply = originalValue;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!Boolean.FALSE.equals(pv.conversionNecessary)) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (pv.isConverted()) &#123;</span><br><span class="line">                valueToApply = pv.getConvertedValue();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (isExtractOldValueForEditor() &amp;&amp; ph.isReadable()) &#123;</span><br><span class="line">                    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                        oldValue = ph.getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> PrivilegedActionException) &#123;</span><br><span class="line">                            ex = ((PrivilegedActionException) ex).getException();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                            logger.debug(<span class="hljs-string">"...);</span></span><br><span class="line"><span class="hljs-string">                        &#125;</span></span><br><span class="line"><span class="hljs-string">                    &#125;</span></span><br><span class="line"><span class="hljs-string">                &#125;</span></span><br><span class="line"><span class="hljs-string">                valueToApply = convertForProperty(</span></span><br><span class="line"><span class="hljs-string">                    tokens.canonicalName, oldValue, originalValue, ph.toTypeDescriptor());</span></span><br><span class="line"><span class="hljs-string">            &#125;</span></span><br><span class="line"><span class="hljs-string">            pv.getOriginalPropertyValue().conversionNecessary = (valueToApply != originalValue);</span></span><br><span class="line"><span class="hljs-string">        &#125;</span></span><br><span class="line"><span class="hljs-string">        ph.setValue(valueToApply);</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">    catch (TypeMismatchException ex) &#123;</span></span><br><span class="line"><span class="hljs-string">       // ...</span></span><br><span class="line"><span class="hljs-string">    &#125;</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure><p>通过对上面注入依赖代码的分析，我们已经明白了 Spring IOC 容器是如何将属性的值注入到 Bean 实例对象中去的：</p><ol><li>对于集合类型的属性，将其属性值解析为目标类型的集合后直接赋值给属性。</li><li>对于非集合类型的属性，大量使用了 JDK 的反射机制，通过属性的 getter()方法获取指定属性注入以前的值，同时调用属性的 setter()方法为属性设置注入后的值。</li></ol><img src="/2019/08/21/Spring-2019-08-渐入Spring-DI/spring_di_Timing.jpg"><p>至此 Spring IOC 容器对 Bean 定义资源文件的定位，载入、解析和依赖注入已经全部分析完毕，现在Spring IOC 容器中管理了一系列靠依赖关系联系起来的 Bean，程序不需要应用自己手动创建所需的对象，Spring IOC 容器会在我们使用的时候自动为我们创建，并且为我们注入好相关的依赖，这就是Spring 核心功能的控制反转和依赖注入的相关功能。</p><h2 id="IOC-容器中那些鲜为人知的细节"><a href="#IOC-容器中那些鲜为人知的细节" class="headerlink" title="IOC 容器中那些鲜为人知的细节"></a>IOC 容器中那些鲜为人知的细节</h2><p>通过前面章节中对 Spring IOC 容器的源码分析，我们已经基本上了解了 Spring IOC 容器对 Bean 定义资源的定位、载入和注册过程，同时也清楚了当用户通过 getBean()方法向 IOC 容器获取被管理的 Bean时，IOC 容器对 Bean 进行的初始化和依赖注入过程，这些是 Spring IOC 容器的基本功能特性。Spring IOC 容器还有一些高级特性，如使用 lazy-init 属性对 Bean 预初始化、FactoryBean 产生或者修饰 Bean 对象的生成、IOC 容器初始化 Bean 过程中使用 BeanPostProcessor 后置处理器对 Bean 声明周期事件管理等。</p><h3 id="一、关于延时加载"><a href="#一、关于延时加载" class="headerlink" title="一、关于延时加载"></a>一、关于延时加载</h3><p>通过前面我们对 IOC 容器的实现和工作原理分析，我们已经知道 IOC 容器的初始化过程就是对 Bean定义资源的定位、载入和注册，此时容器对 Bean 的依赖注入并没有发生，依赖注入主要是在应用程序第一次向容器索取 Bean 时，通过 getBean()方法的调用完成。<br>当 Bean 定义资源的<code>&lt;Bean&gt;</code>元素中配置了<code>lazy-init=false</code>属性时，容器将会在初始化的时候对所配置的 Bean 进行预实例化，Bean 的依赖注入在容器初始化的时候就已经完成。这样，当应用程序第一次向容器索取被管理的 Bean 时，就不用再初始化和对 Bean 进行依赖注入了，直接从容器中获取已经完成依赖注入的现成 Bean，可以提高应用第一次向容器获取 Bean 的性能。</p><h4 id="1-refresh-方法"><a href="#1-refresh-方法" class="headerlink" title="1. refresh()方法"></a>1. refresh()方法</h4><p>先从 IOC 容器的初始化过程开始，我们知道 IOC 容器读入已经定位的 Bean 定义资源是从 refresh()方法开始的，我们首先从 AbstractApplicationContext 类的 refresh()方法入手分析，源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="hljs-comment">// Prepare this context for refreshing.</span></span><br><span class="line">        <span class="hljs-comment">//1、调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        <span class="hljs-comment">//2、告诉子类启动refreshBeanFactory()方法，Bean定义资源文件的载入从</span></span><br><span class="line">        <span class="hljs-comment">//子类的refreshBeanFactory()方法启动</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        <span class="hljs-comment">//3、为BeanFactory配置容器特性，例如类加载器、事件处理器等</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            <span class="hljs-comment">//4、为容器的某些子类指定特殊的BeanPost事件处理器</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            <span class="hljs-comment">//5、调用所有注册的BeanFactoryPostProcessor的Bean</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            <span class="hljs-comment">//6、为BeanFactory注册BeanPost事件处理器.</span></span><br><span class="line">            <span class="hljs-comment">//BeanPostProcessor是Bean后置处理器，用于监听容器触发的事件</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Initialize message source for this context.</span></span><br><span class="line">            <span class="hljs-comment">//7、初始化信息源，和国际化相关.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            <span class="hljs-comment">//8、初始化容器事件传播器.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            <span class="hljs-comment">//9、调用子类的某些特殊Bean初始化方法</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Check for listener beans and register them.</span></span><br><span class="line">            <span class="hljs-comment">//10、为事件传播器注册事件监听器.</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            <span class="hljs-comment">//11、初始化所有剩余的单例Bean</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Last step: publish corresponding event.</span></span><br><span class="line">            <span class="hljs-comment">//12、初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="hljs-comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            <span class="hljs-comment">//13、销毁已创建的Bean</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Reset 'active' flag.</span></span><br><span class="line">            <span class="hljs-comment">//14、取消refresh操作，重置容器的同步标识。</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">            <span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            <span class="hljs-comment">//15、重设公共缓存</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 refresh()方法中 <code>ConfigurableListableBeanFactorybeanFactory = obtainFreshBeanFactory();</code>启动了 Bean 定义资源的载入、注册过程，而 <code>finishBeanFactoryInitialization</code> 方法是对注册后的 Bean定义中的预实例化<code>(lazy-init=false,Spring 默认就是预实例化,即为 true)</code>的 Bean 进行处理的地方。</p><h4 id="2-finishBeanFactoryInitialization-处理预实例化-Bean"><a href="#2-finishBeanFactoryInitialization-处理预实例化-Bean" class="headerlink" title="2. finishBeanFactoryInitialization 处理预实例化 Bean"></a>2. finishBeanFactoryInitialization 处理预实例化 Bean</h4><p>当 Bean 定义资源被载入 IOC 容器之后，容器将 Bean 定义资源解析为容器内部的数据结构<code>BeanDefinition</code>注册到容器中，<code>AbstractApplicationContext</code>类中的<code>finishBeanFactoryInitialization()</code>方法对配置了预实例化属性的 Bean 进行预初始化过程，源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//对配置了lazy-init属性的Bean进行预实例化处理</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finishBeanFactoryInitialization</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Initialize conversion service for this context.</span></span><br><span class="line">    <span class="hljs-comment">//这是Spring3以后新加的代码，为容器指定一个转换服务(ConversionService)</span></span><br><span class="line">    <span class="hljs-comment">//在对某些Bean属性进行转换时使用</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">        beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">        beanFactory.setConversionService(</span><br><span class="line">            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Register a default embedded value resolver if no bean post-processor</span></span><br><span class="line">    <span class="hljs-comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">    <span class="hljs-comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">        beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">        getBean(weaverAwareName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">    <span class="hljs-comment">//为了类型匹配，停止使用临时的类加载器</span></span><br><span class="line">    beanFactory.setTempClassLoader(<span class="hljs-keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">    <span class="hljs-comment">//缓存容器中所有注册的BeanDefinition元数据，以防被修改</span></span><br><span class="line">    beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">    <span class="hljs-comment">//对配置了lazy-init属性的单态模式Bean进行预实例化处理</span></span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ConfigurableListableBeanFactory</code> 是一个接口 ， 其 <code>preInstantiateSingletons()</code> 方法由其子类<code>DefaultListableBeanFactory</code> 提供。</p><h4 id="3-DefaultListableBeanFactory-对配置-lazy-init-属性单态-Bean-的预实例化"><a href="#3-DefaultListableBeanFactory-对配置-lazy-init-属性单态-Bean-的预实例化" class="headerlink" title="3. DefaultListableBeanFactory 对配置 lazy-init 属性单态 Bean 的预实例化"></a>3. DefaultListableBeanFactory 对配置 lazy-init 属性单态 Bean 的预实例化</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//对配置lazy-init属性单态Bean的预实例化</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preInstantiateSingletons</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Pre-instantiating singletons in "</span> + <span class="hljs-keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; beanNames = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        <span class="hljs-comment">//获取指定名称的Bean定义</span></span><br><span class="line">        RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        <span class="hljs-comment">//Bean不是抽象的，是单态模式的，且lazy-init属性配置为false</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">            <span class="hljs-comment">//如果指定名称的bean是创建容器的Bean</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">                <span class="hljs-comment">//FACTORY_BEAN_PREFIX=”&amp;”，当Bean名称前面加”&amp;”符号</span></span><br><span class="line">                <span class="hljs-comment">//时，获取的是产生容器对象本身，而不是容器产生的Bean.</span></span><br><span class="line">                <span class="hljs-comment">//调用getBean方法，触发容器对Bean实例化和依赖注入过程</span></span><br><span class="line">                <span class="hljs-keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">                <span class="hljs-comment">//标识是否需要预实例化</span></span><br><span class="line">                <span class="hljs-keyword">boolean</span> isEagerInit;</span><br><span class="line">                <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span> &amp;&amp; factory <span class="hljs-keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">                    <span class="hljs-comment">//一个匿名内部类</span></span><br><span class="line">                    isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;) () -&gt;</span><br><span class="line">                                                                ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit(),</span><br><span class="line">                                                                getAccessControlContext());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                    isEagerInit = (factory <span class="hljs-keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                                   ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">                    <span class="hljs-comment">//调用getBean方法，触发容器对Bean实例化和依赖注入过程</span></span><br><span class="line">                    getBean(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        Object singletonInstance = getSingleton(beanName);</span><br><span class="line">        <span class="hljs-keyword">if</span> (singletonInstance <span class="hljs-keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">            <span class="hljs-keyword">final</span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">            <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">                    smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">                &#125;, getAccessControlContext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对 lazy-init 处理源码的分析，我们可以看出，如果设置了 lazy-init 属性，则容器在完成 Bean 定义的注册之后，会通过 getBean 方法，触发对指定 Bean 的初始化和依赖注入过程，这样当应用第一次向容器索取所需的 Bean 时，容器不再需要对 Bean 进行初始化和依赖注入，直接从已经完成实例化和依赖注入的 Bean 中取一个现成的 Bean，这样就提高了第一次获取 Bean 的性能。</p><h3 id="二、关于FactoryBean和BeanFactory"><a href="#二、关于FactoryBean和BeanFactory" class="headerlink" title="二、关于FactoryBean和BeanFactory"></a>二、关于FactoryBean和BeanFactory</h3><h4 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h4><p>Bean 工厂，是一个工厂(Factory)，我们 Spring IOC 容器的最顶层接口就是这个BeanFactory，它的作用是管理 Bean，即实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。</p><h4 id="2-FactoryBean"><a href="#2-FactoryBean" class="headerlink" title="2. FactoryBean"></a>2. FactoryBean</h4><p>工厂 Bean，是一个 Bean，作用是产生其他 bean 实例。通常情况下，这种 Bean 没有什么特别的要求，仅需要提供一个工厂方法，该方法用来返回其他 Bean 实例。通常情况下，Bean 无须自己实现工厂模式，Spring 容器担任工厂角色；但少数情况下，容器中的 Bean 本身就是工厂，其作用是产生其它 Bean 实例。</p><p>当用户使用容器本身时，可以使用转义字符”&amp;”来得到 FactoryBean 本身，以区别通过 FactoryBean产生的实例对象和 FactoryBean 对象本身。在 BeanFactory 中通过如下代码定义了该转义字符：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String FACTORY_BEAN_PREFIX = <span class="hljs-string">"&amp;"</span>;</span><br></pre></td></tr></table></figure><p>如果 myJndiObject 是一个 FactoryBean，则使用&amp;myJndiObject 得到的是 myJndiObject 对象，而不是myJndiObject 产生出来的对象。</p><h4 id="a-FactoryBean-源码"><a href="#a-FactoryBean-源码" class="headerlink" title="a. FactoryBean 源码"></a>a. FactoryBean 源码</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//工厂Bean，用于产生其他对象</span><br><span class="line">public interface FactoryBean&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">//获取容器管理的对象实例</span><br><span class="line">@Nullable</span><br><span class="line">T getObject() throws Exception;</span><br><span class="line"></span><br><span class="line">//获取Bean工厂创建的对象的类型</span><br><span class="line">@Nullable</span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">//Bean工厂创建的对象是否是单态模式，如果是单态模式，则整个容器中只有一个实例</span><br><span class="line">//对象，每次请求都返回同一个实例对象</span><br><span class="line">default boolean isSingleton() &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-AbstractBeanFactory-的-getBean-方法调用-FactoryBean"><a href="#b-AbstractBeanFactory-的-getBean-方法调用-FactoryBean" class="headerlink" title="b. AbstractBeanFactory 的 getBean()方法调用 FactoryBean"></a>b. AbstractBeanFactory 的 getBean()方法调用 FactoryBean</h4><p>在前面我们分析 Spring IOC 容器实例化 Bean 并进行依赖注入过程的源码时，提到在 getBean()方法触发容器实例化 Bean 的时候会调用 AbstractBeanFactory 的 doGetBean()方法来进行实例化的过程，源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//真正实现向IOC容器获取Bean的功能，也是触发依赖注入功能的地方</span></span><br><span class="line"><span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">doGetBean</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name, @Nullable <span class="hljs-keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                          @Nullable <span class="hljs-keyword">final</span> Object[] args, <span class="hljs-keyword">boolean</span> typeCheckOnly)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖</span></span><br><span class="line">    <span class="hljs-comment">//如果指定的是别名，将别名转换为规范的Bean名称</span></span><br><span class="line">    <span class="hljs-keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">    <span class="hljs-comment">//先从缓存中取是否已经有被创建过的单态类型的Bean</span></span><br><span class="line">    <span class="hljs-comment">//对于单例模式的Bean整个IOC容器中只创建一次，不需要重复创建</span></span><br><span class="line">    Object sharedInstance = getSingleton(beanName);</span><br><span class="line">    <span class="hljs-comment">//IOC容器创建单例模式Bean实例对象</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (sharedInstance != <span class="hljs-keyword">null</span> &amp;&amp; args == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="hljs-comment">//如果指定名称的Bean在容器中已有单例模式的Bean被创建</span></span><br><span class="line">            <span class="hljs-comment">//直接返回已经创建的Bean</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.debug(<span class="hljs-string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                             <span class="hljs-string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                logger.debug(<span class="hljs-string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="hljs-string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//获取给定Bean的实例对象，主要是完成FactoryBean的相关处理</span></span><br><span class="line">        <span class="hljs-comment">//注意：BeanFactory是管理容器中Bean的工厂，而FactoryBean是</span></span><br><span class="line">        <span class="hljs-comment">//创建创建对象的工厂Bean，两者之间有区别</span></span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="hljs-keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">        <span class="hljs-comment">// We're assumably within a circular reference.</span></span><br><span class="line">        <span class="hljs-comment">//缓存没有正在创建的单例模式Bean</span></span><br><span class="line">        <span class="hljs-comment">//缓存中已经有已经创建的原型模式Bean</span></span><br><span class="line">        <span class="hljs-comment">//但是由于循环引用的问题导致实例化对象失败</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">        <span class="hljs-comment">//对IOC容器中是否存在指定名称的BeanDefinition进行检查，首先检查是否</span></span><br><span class="line">        <span class="hljs-comment">//能在当前的BeanFactory中获取的所需要的Bean，如果不能则委托当前容器</span></span><br><span class="line">        <span class="hljs-comment">//的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找</span></span><br><span class="line">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">        <span class="hljs-comment">//当前容器的父级容器存在，且当前容器中不存在指定名称的Bean</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (parentBeanFactory != <span class="hljs-keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="hljs-comment">// Not found -&gt; check parent.</span></span><br><span class="line">            <span class="hljs-comment">//解析指定Bean名称的原始名称</span></span><br><span class="line">            String nameToLookup = originalBeanName(name);</span><br><span class="line">            <span class="hljs-keyword">if</span> (parentBeanFactory <span class="hljs-keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">                    nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (args != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-comment">// Delegation to parent with explicit args.</span></span><br><span class="line">                <span class="hljs-comment">//委派父级容器根据指定名称和显式的参数查找</span></span><br><span class="line">                <span class="hljs-keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">                <span class="hljs-comment">//委派父级容器根据指定名称和类型查找</span></span><br><span class="line">                <span class="hljs-keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//创建的Bean是否需要进行类型验证，一般不需要</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">            <span class="hljs-comment">//向容器标记指定的Bean已经被创建</span></span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//根据指定Bean名称获取其父级的Bean定义</span></span><br><span class="line">            <span class="hljs-comment">//主要解决Bean继承时子类合并父类公共属性问题</span></span><br><span class="line">            <span class="hljs-keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">            <span class="hljs-comment">//获取当前Bean所有依赖Bean的名称</span></span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            <span class="hljs-comment">//如果当前Bean有依赖Bean</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                        <span class="hljs-string">"Circular depends-on relationship between '"</span> + beanName + <span class="hljs-string">"' and '"</span> + dep + <span class="hljs-string">"'"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-comment">//递归调用getBean方法，获取当前Bean的依赖Bean</span></span><br><span class="line">                    registerDependentBean(dep, beanName);</span><br><span class="line">                    <span class="hljs-comment">//把被依赖Bean注册给当前依赖的Bean</span></span><br><span class="line">                    getBean(dep);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// Create bean instance.</span></span><br><span class="line">            <span class="hljs-comment">//创建单例模式Bean的实例对象</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                <span class="hljs-comment">//这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象</span></span><br><span class="line">                sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">                    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                        <span class="hljs-comment">//创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义</span></span><br><span class="line">                        <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                        <span class="hljs-comment">//显式地从容器单例模式Bean缓存中清除实例对象</span></span><br><span class="line">                        destroySingleton(beanName);</span><br><span class="line">                        <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="hljs-comment">//获取给定Bean的实例对象</span></span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">//IOC容器创建原型模式Bean实例对象</span></span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">                <span class="hljs-comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">                <span class="hljs-comment">//原型模式(Prototype)是每次都会创建一个新的对象</span></span><br><span class="line">                Object prototypeInstance = <span class="hljs-keyword">null</span>;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">//回调beforePrototypeCreation方法，默认的功能是注册当前创建的原型对象</span></span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    <span class="hljs-comment">//创建指定Bean对象实例</span></span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">//回调afterPrototypeCreation方法，默认的功能告诉IOC容器指定Bean的原型对象不再创建</span></span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-comment">//获取给定Bean的实例对象</span></span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">//要创建的Bean既不是单例模式，也不是原型模式，则根据Bean定义资源中</span></span><br><span class="line">            <span class="hljs-comment">//配置的生命周期范围，选择实例化Bean的合适方法，这种在Web应用程序中</span></span><br><span class="line">            <span class="hljs-comment">//比较常用，如：request、session、application等生命周期</span></span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                String scopeName = mbd.getScope();</span><br><span class="line">                <span class="hljs-keyword">final</span> Scope scope = <span class="hljs-keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">                <span class="hljs-comment">//Bean定义资源中没有配置生命周期范围，则Bean定义不合法</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (scope == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"No Scope registered for scope name '"</span> + scopeName + <span class="hljs-string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    <span class="hljs-comment">//这里又使用了一个匿名内部类，获取一个指定生命周期范围的实例</span></span><br><span class="line">                    Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">                        beforePrototypeCreation(beanName);</span><br><span class="line">                        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                            <span class="hljs-keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">                            afterPrototypeCreation(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="hljs-comment">//获取给定Bean的实例对象</span></span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                                                    <span class="hljs-string">"Scope '"</span> + scopeName + <span class="hljs-string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                                                    <span class="hljs-string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                                                    ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            <span class="hljs-keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">    <span class="hljs-comment">//对创建的Bean实例对象进行类型检查</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (requiredType != <span class="hljs-keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">            <span class="hljs-keyword">if</span> (convertedBean == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> convertedBean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="hljs-string">"Failed to convert bean '"</span> + name + <span class="hljs-string">"' to required type '"</span> +</span><br><span class="line">                             ClassUtils.getQualifiedName(requiredType) + <span class="hljs-string">"'"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//获取给定Bean的实例对象，主要是完成FactoryBean的相关处理</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">getObjectForBeanInstance</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Don't let calling code try to dereference the factory if the bean isn't a factory.</span></span><br><span class="line">    <span class="hljs-comment">//容器已经得到了Bean实例对象，这个实例对象可能是一个普通的Bean，</span></span><br><span class="line">    <span class="hljs-comment">//也可能是一个工厂Bean，如果是一个工厂Bean，则使用它创建一个Bean实例对象，</span></span><br><span class="line">    <span class="hljs-comment">//如果调用本身就想获得一个容器的引用，则指定返回这个工厂Bean实例对象</span></span><br><span class="line">    <span class="hljs-comment">//如果指定的名称是容器的解引用(dereference，即是对象本身而非内存地址)，</span></span><br><span class="line">    <span class="hljs-comment">//且Bean实例也不是创建Bean实例对象的工厂Bean</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name) &amp;&amp; !(beanInstance <span class="hljs-keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class="line">    <span class="hljs-comment">// If it's a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class="line">    <span class="hljs-comment">// caller actually wants a reference to the factory.</span></span><br><span class="line">    <span class="hljs-comment">//如果Bean实例不是工厂Bean，或者指定名称是容器的解引用，</span></span><br><span class="line">    <span class="hljs-comment">//调用者向获取对容器的引用，则直接返回当前的Bean实例</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (!(beanInstance <span class="hljs-keyword">instanceof</span> FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//处理指定名称不是容器的解引用，或者根据名称获取的Bean实例对象是一个工厂Bean</span></span><br><span class="line">    <span class="hljs-comment">//使用工厂Bean创建一个Bean的实例对象</span></span><br><span class="line">    Object object = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (mbd == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">//从Bean工厂缓存中获取给定名称的Bean实例对象</span></span><br><span class="line">        object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//让Bean工厂生产给定名称的Bean对象实例</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">// Return bean instance from factory.</span></span><br><span class="line">        FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">        <span class="hljs-comment">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class="line">        <span class="hljs-comment">//如果从Bean工厂生产的Bean是单态模式的，则缓存</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (mbd == <span class="hljs-keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="hljs-comment">//从容器中获取指定名称的Bean定义，如果继承基类，则合并基类相关属性</span></span><br><span class="line">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//如果从容器得到Bean定义信息，并且Bean定义信息不是虚构的，</span></span><br><span class="line">        <span class="hljs-comment">//则让工厂Bean生产Bean实例对象</span></span><br><span class="line">        <span class="hljs-keyword">boolean</span> synthetic = (mbd != <span class="hljs-keyword">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line">        <span class="hljs-comment">//调用FactoryBeanRegistrySupport类的getObjectFromFactoryBean方法，</span></span><br><span class="line">        <span class="hljs-comment">//实现工厂Bean生产Bean对象实例的过程</span></span><br><span class="line">        object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面获取给定Bean的实例对象的getObjectForBeanInstance() 方法中,会调用<code>FactoryBeanRegistrySupport</code> 类的 getObjectFromFactoryBean()方法，该方法实现了 Bean 工厂生产 Bean 实例对象。</p><p>Dereference(解引用)：一个在 C/C++中应用比较多的术语，在 C++中，”*”是解引用符号，而”&amp;”是引用符号，解引用是指变量指向的是所引用对象的本身数据，而不是引用对象的内存地址。</p><h4 id="c-AbstractBeanFactory-生产-Bean-实例对象"><a href="#c-AbstractBeanFactory-生产-Bean-实例对象" class="headerlink" title="c. AbstractBeanFactory 生产 Bean 实例对象"></a>c. AbstractBeanFactory 生产 Bean 实例对象</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//Bean工厂生产Bean实例对象</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">getObjectFromFactoryBean</span><span class="hljs-params">(FactoryBean&lt;?&gt; factory, String beanName, <span class="hljs-keyword">boolean</span> shouldPostProcess)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//Bean工厂是单态模式，并且Bean工厂缓存中存在指定名称的Bean实例对象</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">        <span class="hljs-comment">//多线程同步，以防止数据不一致</span></span><br><span class="line">        <span class="hljs-keyword">synchronized</span> (getSingletonMutex()) &#123;</span><br><span class="line">            <span class="hljs-comment">//直接从Bean工厂缓存中获取指定名称的Bean实例对象</span></span><br><span class="line">            Object object = <span class="hljs-keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            <span class="hljs-comment">//Bean工厂缓存中没有指定名称的实例对象，则生产该实例对象</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-comment">//调用Bean工厂的getObject方法生产指定Bean的实例对象</span></span><br><span class="line">                object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">                <span class="hljs-comment">// Only post-process and store if not put there already during getObject() call above</span></span><br><span class="line">                <span class="hljs-comment">// (e.g. because of circular reference processing triggered by custom getBean calls)</span></span><br><span class="line">                Object alreadyThere = <span class="hljs-keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">                <span class="hljs-keyword">if</span> (alreadyThere != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                    object = alreadyThere;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">                        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                            object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                                                            <span class="hljs-string">"Post-processing of FactoryBean's singleton object failed"</span>, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-comment">//将生产的实例对象添加到Bean工厂缓存中</span></span><br><span class="line">                    <span class="hljs-keyword">this</span>.factoryBeanObjectCache.put(beanName, object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> object;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//调用Bean工厂的getObject方法生产指定Bean的实例对象</span></span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        <span class="hljs-keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(beanName, <span class="hljs-string">"Post-processing of FactoryBean's object failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//调用Bean工厂的getObject方法生产指定Bean的实例对象</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">doGetObjectFromFactoryBean</span><span class="hljs-params">(<span class="hljs-keyword">final</span> FactoryBean&lt;?&gt; factory, <span class="hljs-keyword">final</span> String beanName)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object object;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            AccessControlContext acc = getAccessControlContext();</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                <span class="hljs-comment">//实现PrivilegedExceptionAction接口的匿名内置类</span></span><br><span class="line">                <span class="hljs-comment">//根据JVM检查权限，然后决定BeanFactory创建实例对象</span></span><br><span class="line">                object = AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt;</span><br><span class="line">                                                       factory.getObject(), acc);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> pae.getException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//调用BeanFactory接口实现类的创建对象方法</span></span><br><span class="line">            object = factory.getObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (FactoryBeanNotInitializedException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCurrentlyInCreationException(beanName, ex.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(beanName, <span class="hljs-string">"FactoryBean threw exception on object creation"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Do not accept a null value for a FactoryBean that's not fully</span></span><br><span class="line">    <span class="hljs-comment">// initialized yet: Many FactoryBeans just return null then.</span></span><br><span class="line">    <span class="hljs-comment">//创建出来的实例对象为null，或者因为单态对象正在创建而返回null</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCurrentlyInCreationException(</span><br><span class="line">                beanName, <span class="hljs-string">"FactoryBean which is currently in creation returned null from getObject"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        object = <span class="hljs-keyword">new</span> NullBean();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源码分析中，我们可以看出，BeanFactory 接口调用其实现类的 getObject 方法来实现创建Bean 实例对象的功能。</p><h4 id="d-工厂-Bean-的实现类-getObject-方法创建-Bean-实例对象"><a href="#d-工厂-Bean-的实现类-getObject-方法创建-Bean-实例对象" class="headerlink" title="d. 工厂 Bean 的实现类 getObject 方法创建 Bean 实例对象"></a>d. 工厂 Bean 的实现类 getObject 方法创建 Bean 实例对象</h4><p>FactoryBean 的实现类有非常多，比如：Proxy、RMI、JNDI、ServletContextFactoryBean 等等，FactoryBean 接口为 Spring 容器提供了一个很好的封装机制，具体的 getObject()有不同的实现类根据不同的实现策略来具体提供，我们分析一个最简单的 <code>AnnotationTestBeanFactory</code> 的实现源码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationTestBeanFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">FactoryCreatedAnnotationTestBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> FactoryCreatedAnnotationTestBean instance = <span class="hljs-keyword">new</span> FactoryCreatedAnnotationTestBean();</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationTestBeanFactory</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.instance.setName(<span class="hljs-string">"FACTORY"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> FactoryCreatedAnnotationTestBean <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//AnnotationTestBeanFactory产生Bean实例对象的实现</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-keyword">public</span> Class&lt;? extends IJmxTestBean&gt; getObjectType() &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> FactoryCreatedAnnotationTestBean.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的 Proxy，RMI，JNDI 等等，都是根据相应的策略提供 getObject()的实现。这里不做一一分析，这已经不是 Spring 的核心功能</p><h3 id="三、再述autowiring"><a href="#三、再述autowiring" class="headerlink" title="三、再述autowiring"></a>三、再述autowiring</h3><p>Spring IOC 容器提供了两种管理 Bean 依赖关系的方式：</p><ol><li>显式管理：通过 <code>BeanDefinition</code> 的属性值和构造方法实现 Bean 依赖关系管理。</li><li>autowiring：Spring IOC 容器的依赖自动装配功能，不需要对 Bean 属性的依赖关系做显式的声明，只需要在配置好 autowiring 属性，IOC 容器会自动使用反射查找属性的类型和名称，然后基于属性的类型或者名称来自动匹配容器中管理的 Bean，从而自动地完成依赖注入。</li></ol><p>通过对 autowiring 自动装配特性的理解，我们知道容器对 Bean 的自动装配发生在容器对 Bean 依赖注入的过程中。在前面对 Spring IOC 容器的依赖注入过程源码分析中，我们已经知道了容器对 Bean 实例对象的属性注入的处理发生在 <code>AbstractAutoWireCapableBeanFactory</code> 类中的 populateBean()方法中，我们通过程序流程分析 autowiring 的实现原理：</p><h4 id="1-AbstractAutoWireCapableBeanFactory-对-Bean-实例进行属性依赖注入"><a href="#1-AbstractAutoWireCapableBeanFactory-对-Bean-实例进行属性依赖注入" class="headerlink" title="1. AbstractAutoWireCapableBeanFactory 对 Bean 实例进行属性依赖注入"></a>1. AbstractAutoWireCapableBeanFactory 对 Bean 实例进行属性依赖注入</h4><p>应用第一次通过 getBean()方法(配置了 lazy-init 预实例化属性的除外)向 IOC 容器索取 Bean 时，容器创建Bean实例对象， 并且对Bean实例对象进行属性依赖注入，<code>AbstractAutoWireCapableBeanFactory</code>的populateBean()方法就是实现Bean属性依赖注入的功能,其主要源码如下: </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//将Bean属性设置到生成的实例对象上</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">populateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (bw == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, <span class="hljs-string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Skip property population phase for null instance.</span></span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">boolean</span> continueWithPropertyPopulation = <span class="hljs-keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (bp <span class="hljs-keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                <span class="hljs-keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                    continueWithPropertyPopulation = <span class="hljs-keyword">false</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//获取容器在解析Bean定义资源时为BeanDefiniton中设置的属性值</span></span><br><span class="line">    PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="hljs-keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//对依赖注入处理，首先处理autowiring自动装配的依赖注入</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">        mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        MutablePropertyValues newPvs = <span class="hljs-keyword">new</span> MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line">        <span class="hljs-comment">//根据Bean名称进行autowiring自动装配处理</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line">        <span class="hljs-comment">//根据Bean类型进行autowiring自动装配处理</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pvs = newPvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//对非autowiring的属性进行依赖注入处理</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">    <span class="hljs-keyword">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (pvs == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            pvs = mbd.getPropertyValues();</span><br><span class="line">        &#125;</span><br><span class="line">        PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">        <span class="hljs-keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (bp <span class="hljs-keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                    InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                    pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                    <span class="hljs-keyword">if</span> (pvs == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                        <span class="hljs-keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">            checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (pvs != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">//对属性进行注入</span></span><br><span class="line">        applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//根据名称对属性进行自动依赖注入</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">autowireByName</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//对Bean对象中非简单属性(不是简单继承的对象，如8中原始类型，字符串，URL等都是简单属性)进行处理</span></span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    <span class="hljs-keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line">        <span class="hljs-comment">//如果Spring IOC容器中包含指定名称的Bean</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (containsBean(propertyName)) &#123;</span><br><span class="line">            <span class="hljs-comment">//调用getBean方法向IOC容器索取指定名称的Bean实例，迭代触发属性的初始化和依赖注入</span></span><br><span class="line">            Object bean = getBean(propertyName);</span><br><span class="line">            <span class="hljs-comment">//为指定名称的属性赋予属性值</span></span><br><span class="line">            pvs.add(propertyName, bean);</span><br><span class="line">            <span class="hljs-comment">//指定名称属性注册依赖Bean名称，进行属性依赖注入</span></span><br><span class="line">            registerDependentBean(propertyName, beanName);</span><br><span class="line">            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="hljs-string">"Added autowiring by name from bean name '"</span> + beanName +</span><br><span class="line">                             <span class="hljs-string">"' via property '"</span> + propertyName + <span class="hljs-string">"' to bean named '"</span> + propertyName + <span class="hljs-string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="hljs-string">"Not autowiring property '"</span> + propertyName + <span class="hljs-string">"' of bean '"</span> + beanName +</span><br><span class="line">                             <span class="hljs-string">"' by name: no matching bean found"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Spring-IOC容器根据Bean名称或者类型进行autowiring自动依赖注入"><a href="#2-Spring-IOC容器根据Bean名称或者类型进行autowiring自动依赖注入" class="headerlink" title="2. Spring IOC容器根据Bean名称或者类型进行autowiring自动依赖注入"></a>2. Spring IOC容器根据Bean名称或者类型进行autowiring自动依赖注入</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment">//根据类型对属性进行自动依赖注入</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">autowireByType</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//获取用户定义的类型转换器</span></span><br><span class="line">    TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">    <span class="hljs-keyword">if</span> (converter == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        converter = bw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//存放解析的要注入的属性</span></span><br><span class="line">    Set&lt;String&gt; autowiredBeanNames = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(<span class="hljs-number">4</span>);</span><br><span class="line">    <span class="hljs-comment">//对Bean对象中非简单属性(不是简单继承的对象，如8中原始类型，字符</span></span><br><span class="line">    <span class="hljs-comment">//URL等都是简单属性)进行处理</span></span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    <span class="hljs-keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//获取指定属性名称的属性描述器</span></span><br><span class="line">            PropertyDescriptor pd = bw.getPropertyDescriptor(propertyName);</span><br><span class="line">            <span class="hljs-comment">// Don't try autowiring by type for type Object: never makes sense,</span></span><br><span class="line">            <span class="hljs-comment">// even if it technically is a unsatisfied, non-simple property.</span></span><br><span class="line">            <span class="hljs-comment">//不对Object类型的属性进行autowiring自动依赖注入</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (Object.class != pd.getPropertyType()) &#123;</span><br><span class="line">                <span class="hljs-comment">//获取属性的setter方法</span></span><br><span class="line">                MethodParameter methodParam = BeanUtils.getWriteMethodParameter(pd);</span><br><span class="line">                <span class="hljs-comment">// Do not allow eager init for type matching in case of a prioritized post-processor.</span></span><br><span class="line">                <span class="hljs-comment">//检查指定类型是否可以被转换为目标对象的类型</span></span><br><span class="line">                <span class="hljs-keyword">boolean</span> eager = !PriorityOrdered.class.isInstance(bw.getWrappedInstance());</span><br><span class="line">                <span class="hljs-comment">//创建一个要被注入的依赖描述</span></span><br><span class="line">                DependencyDescriptor desc = <span class="hljs-keyword">new</span> AutowireByTypeDependencyDescriptor(methodParam, eager);</span><br><span class="line">                <span class="hljs-comment">//根据容器的Bean定义解析依赖关系，返回所有要被注入的Bean对象</span></span><br><span class="line">                Object autowiredArgument = resolveDependency(desc, beanName, autowiredBeanNames, converter);</span><br><span class="line">                <span class="hljs-keyword">if</span> (autowiredArgument != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                    <span class="hljs-comment">//为属性赋值所引用的对象</span></span><br><span class="line">                    pvs.add(propertyName, autowiredArgument);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">for</span> (String autowiredBeanName : autowiredBeanNames) &#123;</span><br><span class="line">                    <span class="hljs-comment">//指定名称属性注册依赖Bean名称，进行属性依赖注入</span></span><br><span class="line">                    registerDependentBean(autowiredBeanName, beanName);</span><br><span class="line">                    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(<span class="hljs-string">"Autowiring by type from bean name '"</span> + beanName + <span class="hljs-string">"' via property '"</span> +</span><br><span class="line">                                     propertyName + <span class="hljs-string">"' to bean named '"</span> + autowiredBeanName + <span class="hljs-string">"'"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-comment">//释放已自动注入的属性</span></span><br><span class="line">                autowiredBeanNames.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsatisfiedDependencyException(mbd.getResourceDescription(), beanName, propertyName, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看出来通过属性名进行自动依赖注入的相对比通过属性类型进行自动依赖注入要稍微简单一些， 但是真正实现属性注入的是 <code>DefaultSingletonBeanRegistry</code> 类的<code>registerDependentBean()</code>方法。</p><h4 id="3-DefaultSingletonBeanRegistry-的-registerDependentBean-方法对属性注入"><a href="#3-DefaultSingletonBeanRegistry-的-registerDependentBean-方法对属性注入" class="headerlink" title="3. DefaultSingletonBeanRegistry 的 registerDependentBean()方法对属性注入"></a>3. DefaultSingletonBeanRegistry 的 registerDependentBean()方法对属性注入</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//为指定的Bean注入依赖的Bean</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerDependentBean</span><span class="hljs-params">(String beanName, String dependentBeanName)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// A quick check for an existing entry upfront, avoiding synchronization...</span></span><br><span class="line">    <span class="hljs-comment">//处理Bean名称，将别名转换为规范的Bean名称</span></span><br><span class="line">    String canonicalName = canonicalName(beanName);</span><br><span class="line">    Set&lt;String&gt; dependentBeans = <span class="hljs-keyword">this</span>.dependentBeanMap.get(canonicalName);</span><br><span class="line">    <span class="hljs-keyword">if</span> (dependentBeans != <span class="hljs-keyword">null</span> &amp;&amp; dependentBeans.contains(dependentBeanName)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// No entry yet -&gt; fully synchronized manipulation of the dependentBeans Set</span></span><br><span class="line">    <span class="hljs-comment">//多线程同步，保证容器内数据的一致性</span></span><br><span class="line">    <span class="hljs-comment">//先从容器中：bean名称--&gt;全部依赖Bean名称集合找查找给定名称Bean的依赖Bean</span></span><br><span class="line">    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.dependentBeanMap) &#123;</span><br><span class="line">        <span class="hljs-comment">//获取给定名称Bean的所有依赖Bean名称</span></span><br><span class="line">        dependentBeans = <span class="hljs-keyword">this</span>.dependentBeanMap.get(canonicalName);</span><br><span class="line">        <span class="hljs-keyword">if</span> (dependentBeans == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-comment">//为Bean设置依赖Bean信息</span></span><br><span class="line">            dependentBeans = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(<span class="hljs-number">8</span>);</span><br><span class="line">            <span class="hljs-keyword">this</span>.dependentBeanMap.put(canonicalName, dependentBeans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//向容器中：bean名称--&gt;全部依赖Bean名称集合添加Bean的依赖信息</span></span><br><span class="line">        <span class="hljs-comment">//即，将Bean所依赖的Bean添加到容器的集合中</span></span><br><span class="line">        dependentBeans.add(dependentBeanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//从容器中：bean名称--&gt;指定名称Bean的依赖Bean集合找查找给定名称Bean的依赖Bean</span></span><br><span class="line">    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.dependenciesForBeanMap) &#123;</span><br><span class="line">        Set&lt;String&gt; dependenciesForBean = <span class="hljs-keyword">this</span>.dependenciesForBeanMap.get(dependentBeanName);</span><br><span class="line">        <span class="hljs-keyword">if</span> (dependenciesForBean == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            dependenciesForBean = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(<span class="hljs-number">8</span>);</span><br><span class="line">            <span class="hljs-keyword">this</span>.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//向容器中：bean名称--&gt;指定Bean的依赖Bean名称集合添加Bean的依赖信息</span></span><br><span class="line">        <span class="hljs-comment">//即，将Bean所依赖的Bean添加到容器的集合中</span></span><br><span class="line">        dependenciesForBean.add(canonicalName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对 autowiring 的源码分析，我们可以看出，autowiring 的实现过程：</p><p>a、对 Bean 的属性代调用 getBean()方法，完成依赖 Bean 的初始化和依赖注入。<br>b、将依赖 Bean 的属性引用设置到被依赖的 Bean 属性上。<br>c、将依赖 Bean 的名称和被依赖 Bean 的名称存储在 IOC 容器的集合中。</p><p>Spring IOC 容器的 autowiring 属性自动依赖注入是一个很方便的特性，可以简化开发时的配置，但是凡是都有两面性，自动属性依赖注入也有不足，首先，Bean 的依赖关系在 配置文件中无法很清楚地看出来，对于维护造成一定困难。其次，由于自动依赖注入是 Spring 容器自动执行的，容器是不会智能判断的，如果配置不当，将会带来无法预料的后果，所以自动依赖注入特性在使用时还是综合考虑 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-自动装配之依赖注入&quot;&gt;&lt;a href=&quot;#Spring-自动装配之依赖注入&quot; class=&quot;headerlink&quot; title=&quot;Spring 自动装配之依赖注入&quot;&gt;&lt;/a&gt;Spring 自动装配之依赖注入&lt;/h2&gt;&lt;h3 id=&quot;一、依赖注入发生的
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="DI" scheme="http://yoursite.com/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>渐入Spring-IOC</title>
    <link href="http://yoursite.com/2019/08/21/Spring-2019-08-%E6%B8%90%E5%85%A5Spring-IOC/"/>
    <id>http://yoursite.com/2019/08/21/Spring-2019-08-渐入Spring-IOC/</id>
    <published>2019-08-20T17:23:32.000Z</published>
    <updated>2019-08-27T10:48:05.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渐入Spring-IOC"><a href="#渐入Spring-IOC" class="headerlink" title="渐入Spring-IOC"></a>渐入Spring-IOC</h2><h3 id="一、IOC"><a href="#一、IOC" class="headerlink" title="一、IOC"></a>一、IOC</h3><ol><li><p><strong>Spring核心容器类图</strong></p><ul><li><p><code>BeanFactory</code></p><p>Spring Bean 的创建是典型的工厂模式，这一系列的 Bean 工厂，也即 IOC 容器为开发者管理对象间的依赖关系提供了很多便利和基础服务，在 Spring 中有许多的 IOC 容器的实现供用户选择和使用，其相互关系如下：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/BeanFactory.png"><p>其中 BeanFactory 作为最顶层的一个接口类，它定义了 IOC 容器的基本功能规范，BeanFactory 有三个重要的子类：ListableBeanFactory、HierarchicalBeanFactory 和 AutowireCapableBeanFactory。但是从类图中我们可以发现最终的默认实现类是 DefaultListableBeanFactory，它实现了所有的接口。那为何要定义这么多层次的接口呢？查阅这些接口的源码和说明发现，每个接口都有它使用的场合，它主要是为了区分在 Spring 内部在操作过程中对象的传递和转化过程时，对对象的数据访问所做的限制。例如 ListableBeanFactory 接口表示这些 Bean 是可列表化的，而 HierarchicalBeanFactory 表示的是这些 Bean 是有继承关系的，也就是每个 Bean 有可能有父 Bean。AutowireCapableBeanFactory 接口定义 Bean 的自动装配规则。这三个接口共同定义了 Bean 的集合、Bean 之间的关系、以及 Bean 行为。最基本的 IOC 容器接口 BeanFactory，来看一下它的源码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.core.ResolvableType;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BeanFactory</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//对FactoryBean的转义定义，因为如果使用bean的名字检索FactoryBean得到的对象是工厂生成的对象，如果需要得到工厂本身，需要转义</span></span><br><span class="line">String FACTORY_BEAN_PREFIX = <span class="hljs-string">"&amp;"</span>;</span><br><span class="line"><span class="hljs-comment">//根据bean的名字，获取在IOC容器中得到bean实例</span></span><br><span class="line"><span class="hljs-function">Object <span class="hljs-title">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"><span class="hljs-comment">//根据bean的名字和Class类型来得到bean实例，增加了类型安全验证机制。</span></span><br><span class="line">&lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(String name, @Nullable Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">Object <span class="hljs-title">getBean</span><span class="hljs-params">(String name, Object... args)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//提供对bean的检索，看看是否在IOC容器有这个名字的bean</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">containsBean</span><span class="hljs-params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//根据bean名字得到bean实例，并同时判断这个bean是不是单例</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isPrototype</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isTypeMatch</span><span class="hljs-params">(String name, ResolvableType typeToMatch)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isTypeMatch</span><span class="hljs-params">(String name, @Nullable Class&lt;?&gt; typeToMatch)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//得到bean实例的Class类型</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line">Class&lt;?&gt; getType(String name) <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//得到bean的别名，如果根据别名检索，那么其原名也会被检索出来</span></span><br><span class="line">String[] getAliases(String name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 BeanFactory 里只对 IOC 容器的基本行为作了定义，根本不关心你的 Bean 是如何定义怎样加载的。正如我们只关心工厂里得到什么的产品对象，至于工厂是怎么生产这些对象的，这个基本的接口不关心。而要知道工厂是如何产生对象的，我们需要看具体的 IOC 容器实现，Spring 提供了许多 IOC 容器的实现 。 比如 GenericApplicationContext ， ClasspathXmlApplicationContext 等 。ApplicationContext 是 Spring 提供的一个高级的 IOC 容器，它除了能够提供 IOC 容器的基本功能外，还为用户提供了以下的附加服务。</p><p>从 ApplicationContext 接口的实现，我们看出其特点：</p><blockquote><p>1、支持信息源，可以实现国际化。（实现 MessageSource 接口）<br>2、访问资源。(实现 ResourcePatternResolver 接口，后面章节会讲到)<br>3、支持应用事件。(实现 ApplicationEventPublisher 接口)</p></blockquote></li><li><p><code>BeanDefinition</code></p><p>SpringIOC 容器管理了我们定义的各种 Bean 对象及其相互的关系，Bean 对象在 Spring 实现中是以 BeanDefinition 来描述的，其继承体系如下：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/RootBeanDefinition.png"></li><li><p><code>BeanDefinitionReader</code></p><p>Bean 的解析过程非常复杂，功能被分的很细，因为这里需要被扩展的地方很多，必须保证有足够的灵活性，以应对可能的变化。Bean 的解析主要就是对 Spring 配置文件的解析。这个解析过程主要通过BeanDefinitionReader来完成，最后看看 Spring 中 BeanDefinitionReader的类结构图：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/BeanDefinitionReader.png"></li></ul><p><strong>延伸–寻找Web IOC入口</strong></p><p>以<code>DispatcherServlet</code>为例, <code>DispatcherServlet</code>继承&gt;<code>HttpServletBean</code>执行init()方法如下:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Initializing servlet '"</span> + getServletName() + <span class="hljs-string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Set bean properties from init parameters.</span></span><br><span class="line">PropertyValues pvs = <span class="hljs-keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="hljs-keyword">this</span>.requiredProperties);</span><br><span class="line"><span class="hljs-keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//定位资源</span></span><br><span class="line">BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-comment">//加载配置信息</span></span><br><span class="line">ResourceLoader resourceLoader = <span class="hljs-keyword">new</span> ServletContextResourceLoader(getServletContext());</span><br><span class="line">bw.registerCustomEditor(Resource.class, <span class="hljs-keyword">new</span> ResourceEditor(resourceLoader, getEnvironment()));</span><br><span class="line">initBeanWrapper(bw);</span><br><span class="line">bw.setPropertyValues(pvs, <span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">logger.error(<span class="hljs-string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="hljs-string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">initServletBean();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Servlet '"</span> + getServletName() + <span class="hljs-string">"' configured successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 init()方法中，真正完成初始化容器动作的逻辑其实在 initServletBean()方法中，这是个钩子方法, 我们继续跟进initServletBean()中的代码在 FrameworkServlet 类中：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initServletBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">getServletContext().log(<span class="hljs-string">"Initializing Spring FrameworkServlet '"</span> + getServletName() + <span class="hljs-string">"'"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">"FrameworkServlet '"</span> + getServletName() + <span class="hljs-string">"': initialization started"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">initFrameworkServlet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.error(<span class="hljs-string">"Context initialization failed"</span>, ex);</span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.error(<span class="hljs-string">"Context initialization failed"</span>, ex);</span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="hljs-keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">"FrameworkServlet '"</span> + getServletName() + <span class="hljs-string">"': initialization completed in "</span> +</span><br><span class="line">elapsedTime + <span class="hljs-string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title">initWebApplicationContext</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//先从ServletContext中获得父容器WebAppliationContext</span></span><br><span class="line">WebApplicationContext rootContext =</span><br><span class="line">WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line"><span class="hljs-comment">//声明子容器</span></span><br><span class="line">WebApplicationContext wac = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//建立父、子容器之间的关联关系</span></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.webApplicationContext != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">wac = <span class="hljs-keyword">this</span>.webApplicationContext;</span><br><span class="line"><span class="hljs-keyword">if</span> (wac <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line"><span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line"><span class="hljs-comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line"><span class="hljs-comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line"><span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line"><span class="hljs-comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">cwac.setParent(rootContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//这个方法里面调用了AbatractApplication的refresh()方法</span></span><br><span class="line"><span class="hljs-comment">//模板方法，规定IOC初始化基本流程</span></span><br><span class="line">configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//先去ServletContext中查找Web容器的引用是否存在，并创建好默认的空IOC容器</span></span><br><span class="line"><span class="hljs-keyword">if</span> (wac == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line"><span class="hljs-comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line"><span class="hljs-comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line"><span class="hljs-comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">wac = findWebApplicationContext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//给上一步创建好的IOC容器赋值</span></span><br><span class="line"><span class="hljs-keyword">if</span> (wac == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">wac = createWebApplicationContext(rootContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//触发onRefresh方法</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.refreshEventReceived) &#123;</span><br><span class="line"><span class="hljs-comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line"><span class="hljs-comment">// support or the context injected at construction time had already been</span></span><br><span class="line"><span class="hljs-comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">onRefresh(wac);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.publishContext) &#123;</span><br><span class="line"><span class="hljs-comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">String attrName = getServletContextAttributeName();</span><br><span class="line">getServletContext().setAttribute(attrName, wac);</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Published WebApplicationContext of servlet '"</span> + getServletName() +</span><br><span class="line"><span class="hljs-string">"' as ServletContext attribute with name ["</span> + attrName + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>configAndRefreshWebApplicationContext()</code>方法中，调用 <code>refresh()</code>方法，这个是真正启动 IOC 容器的入口，后面会详细介绍。IOC 容器初始化以后，最后调用了<code>DispatcherServlet</code> 的 <code>onRefresh()</code>方法，<code>onRefresh()</code>是为<code>DispatcherServlet</code>提供的钩子方法,在 <code>onRefresh()</code>方法中又是直接调用 initStrategies()方法初始化 SpringMVC 的九大组件：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//DispatcherServlet</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onRefresh</span><span class="hljs-params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initStrategies(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//初始化策略</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//多文件上传的组件</span></span><br><span class="line">initMultipartResolver(context);</span><br><span class="line"><span class="hljs-comment">//初始化本地语言环境</span></span><br><span class="line">initLocaleResolver(context);</span><br><span class="line"><span class="hljs-comment">//初始化模板处理器</span></span><br><span class="line">initThemeResolver(context);</span><br><span class="line"><span class="hljs-comment">//handlerMapping</span></span><br><span class="line">initHandlerMappings(context);</span><br><span class="line"><span class="hljs-comment">//初始化参数适配器</span></span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line"><span class="hljs-comment">//初始化异常拦截器</span></span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line"><span class="hljs-comment">//初始化视图预处理器</span></span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line"><span class="hljs-comment">//初始化视图转换器</span></span><br><span class="line">initViewResolvers(context);</span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>基于XML的IOC容器初始化原理</strong><br>IOC 容器的初始化包括 BeanDefinition 的 Resource 定位、加载和注册这三个基本的过程。我们以ApplicationContext 为例讲解，ApplicationContext 系列容器也许是我们最熟悉的，因为 Web 项目中使用的XmlWebApplicationContext就属于这个继承体系，还有ClasspathXmlApplicationContext等，其继承体系如下图所示：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/ApplicationContext.png"><p><code>ApplicationContext</code> 允许上下文嵌套，通过保持父上下文可以维持一个上下文体系。对于 Bean 的查找可以在这个上下文体系中发生，首先检查当前上下文，其次是父上下文，逐级向上，这样为不同的 Spring应用提供了一个共享的 Bean 定义环境。</p><ol><li><p>寻找入口</p><p>我们用的比较多的 ClassPathXmlApplicationContext，通过 main()方法启动:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"application.xml"</span>);</span><br></pre></td></tr></table></figure><p>先看其构造函数的调用：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathXmlApplicationContext</span><span class="hljs-params">(String configLocation)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>(<span class="hljs-keyword">new</span> String[]&#123;configLocation&#125;, <span class="hljs-keyword">true</span>, (ApplicationContext)<span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实际调用的构造函数为：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathXmlApplicationContext</span><span class="hljs-params">(String[] configLocations, <span class="hljs-keyword">boolean</span> refresh, @Nullable ApplicationContext parent)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(parent);</span><br><span class="line">    <span class="hljs-keyword">this</span>.setConfigLocations(configLocations);</span><br><span class="line">    <span class="hljs-keyword">if</span>(refresh) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有像 AnnotationConfigApplicationContext 、 FileSystemXmlApplicationContext 、<br><code>XmlWebApplicationContext</code>等都继承自父容器<code>AbstractApplicationContext</code>主要用到了装饰器模式和策略模式，最终都是调用 <code>refresh()</code>方法。</p></li><li><p>获得配置路径</p><p>通过分析<code>ClassPathXmlApplicationContext</code>的源代码可以知道, 在创建<code>ClassPathXmlApplicationContext</code>容器时, 构造方法做了两项重要工作:首先, 调用父类容器的构造方法<code>(super(parent)方法)</code>为容器设置好 Bean 资源加载器. 然后, 再调用父类<code>AbstractRefreshableConfigApplicationContext</code>的<code>setConfigLocations(configLocations)</code>方法设置 Bean 配置信息的定位路径. 通过追踪<code>ClassPathXmlApplicationContext</code>的继承体系, 发现其超类<code>AbstractApplicationContext</code>中初始化IOC容器所得的主要源码如下:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//静态初始化块，在整个容器创建过程中只执行一次</span></span><br><span class="line">    <span class="hljs-keyword">static</span> &#123;</span><br><span class="line"><span class="hljs-comment">//为了避免应用程序在 Weblogic8.1 关闭时出现类加载异常加载问题，加载 IOC 容</span></span><br><span class="line"><span class="hljs-comment">//器关闭事件(ContextClosedEvent)类</span></span><br><span class="line">        ContextClosedEvent.class.getName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstractApplicationContext</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.resourcePatternResolver = getResourcePatternResolver();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstractApplicationContext</span><span class="hljs-params">(@Nullable ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>();</span><br><span class="line">        setParent(parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//获取一个 Spring Source 的加载器用于读入 Spring Bean 配置信息</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> ResourcePatternResolver <span class="hljs-title">getResourcePatternResolver</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//AbstractApplicationContext 继承 DefaultResourceLoader，因此也是一个资源加载器</span></span><br><span class="line"><span class="hljs-comment">//Spring 资源加载器，其 getResource(String location)方法用于载入资源</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver(<span class="hljs-keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractApplicationContext</code> 的默认构造方法中有调用 <code>PathMatchingResourcePatternResolver</code> 的构造方法创建 Spring 资源加载器：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PathMatchingResourcePatternResolver</span><span class="hljs-params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(resourceLoader, <span class="hljs-string">"ResourceLoader must not be null"</span>);</span><br><span class="line">    <span class="hljs-comment">//设置 Spring 的资源加载器</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在设置容器的资源加载器之后，接下来 <code>ClassPathXmlApplicationContext</code> 执行<code>setConfigLocations()</code>方法通过调用其父类<code>AbstractRefreshableConfigApplicationContext</code>的方法进行对Bean配置信息的定位，该方法的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//处理单个资源文件路径为一个字符串的情况</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigLocation</span><span class="hljs-params">(String location)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//String CONFIG_LOCATION_DELIMITERS = ",; /t/n";</span></span><br><span class="line"><span class="hljs-comment">//即多个资源文件路径之间用” ,; \t\n”分隔，解析成数组形式</span></span><br><span class="line">setConfigLocations(StringUtils.tokenizeToStringArray(location, CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Set the config locations for this application context.</span></span><br><span class="line"><span class="hljs-comment"> * &lt;p&gt;If not set, the implementation may use a default as appropriate.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//解析Bean定义资源文件的路径，处理多个资源文件字符串数组</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigLocations</span><span class="hljs-params">(@Nullable String... locations)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (locations != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">Assert.noNullElements(locations, <span class="hljs-string">"Config locations must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.configLocations = <span class="hljs-keyword">new</span> String[locations.length];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line"><span class="hljs-comment">// resolvePath为同一个类中将字符串解析为路径的方法</span></span><br><span class="line"><span class="hljs-keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.configLocations = <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这两个方法的源码我们可以看出，我们既可以使用一个字符串来配置多个 Spring Bean 配置信息，也可以使用字符串数组，即下面两种方式都是可以的：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//法1</span></span><br><span class="line">ClassPathResource res = <span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">"a.xml,b.xml"</span>);</span><br><span class="line"><span class="hljs-comment">//法2</span></span><br><span class="line">ClassPathResource res =<span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"a.xml"</span>,<span class="hljs-string">"b.xml"</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>开始启动</p><p>SpringIOC 容器对 Bean 配置资源的载入是从<code>refresh()</code>函数开始的，refresh()是一个模板方法，规定了IOC容器的启动流程 ， 有些逻辑要交给其子类去实 现 。它对 Bean配置资源进行载入<code>ClassPathXmlApplicationContext</code> 通过调用其父类<code>AbstractApplicationContext</code> 的 <code>refresh()</code>函数启动整个 IOC 容器对 Bean 定义的载入过程，现在我们来详细看看 refresh()中的逻辑处理：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="hljs-comment">// Prepare this context for refreshing.</span></span><br><span class="line"><span class="hljs-comment">//1、调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line"><span class="hljs-comment">//2、告诉子类启动refreshBeanFactory()方法，Bean定义资源文件的载入从</span></span><br><span class="line"><span class="hljs-comment">//子类的refreshBeanFactory()方法启动</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line"><span class="hljs-comment">//3、为BeanFactory配置容器特性，例如类加载器、事件处理器等</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line"><span class="hljs-comment">//4、为容器的某些子类指定特殊的BeanPost事件处理器</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line"><span class="hljs-comment">//5、调用所有注册的BeanFactoryPostProcessor的Bean</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line"><span class="hljs-comment">//6、为BeanFactory注册BeanPost事件处理器.</span></span><br><span class="line"><span class="hljs-comment">//BeanPostProcessor是Bean后置处理器，用于监听容器触发的事件</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Initialize message source for this context.</span></span><br><span class="line"><span class="hljs-comment">//7、初始化信息源，和国际化相关.</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Initialize event multicaster for this context.</span></span><br><span class="line"><span class="hljs-comment">//8、初始化容器事件传播器.</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line"><span class="hljs-comment">//9、调用子类的某些特殊Bean初始化方法</span></span><br><span class="line">onRefresh();</span><br><span class="line"><span class="hljs-comment">// Check for listener beans and register them.</span></span><br><span class="line"><span class="hljs-comment">//10、为事件传播器注册事件监听器.</span></span><br><span class="line">registerListeners();</span><br><span class="line"><span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line"><span class="hljs-comment">//11、初始化所有剩余的单例Bean</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"><span class="hljs-comment">// Last step: publish corresponding event.</span></span><br><span class="line"><span class="hljs-comment">//12、初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="hljs-string">"Exception encountered during context initialization - "</span> +</span><br><span class="line"><span class="hljs-string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line"><span class="hljs-comment">//13、销毁已创建的Bean</span></span><br><span class="line">destroyBeans();</span><br><span class="line"><span class="hljs-comment">// Reset 'active' flag.</span></span><br><span class="line"><span class="hljs-comment">//14、取消refresh操作，重置容器的同步标识。</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"><span class="hljs-comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line"><span class="hljs-comment">//15、重设公共缓存</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>refresh()</code>方法主要为 IOC 容器 Bean 的生命周期管理提供条件，Spring IOC 容器载入 Bean 配置信息从其子类容器的<code>refreshBeanFactory()</code>方法启动, 所以整个<code>refresh()</code>中</p><p><code>ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</code>这句以后代码都是注册容器的信息源和生命周期事件，我们前面说的载入就是从这句代码开始启动。</p><p><code>refresh()</code>方法的主要作用是：在创建 IOC 容器前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在 refresh 之后使用的是新建立起来的 IOC 容器。它类似于对 IOC 容器的重启，在新建立好的容器中对容器进行初始化，对 Bean 配置资源进行载入。</p></li><li><p>创建容器</p><p><code>obtainFreshBeanFactory()</code>方法调用子类容器的 <code>refreshBeanFactory()</code>方法，启动容器载入 Bean 配置信息的过程，代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> ConfigurableListableBeanFactory <span class="hljs-title">obtainFreshBeanFactory</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//这里使用了委派设计模式，父类定义了抽象的 refreshBeanFactory()方法，具体实现调用子类容器的 refreshBeanFactory()方</span></span><br><span class="line">    法</span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="hljs-string">"Bean factory for "</span> + getDisplayName() + <span class="hljs-string">": "</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractApplicationContext</code> 类中只抽象定义了 <code>refreshBeanFactory()</code>方法，容器真正调用的是其子类 <code>AbstractRefreshableApplicationContext</code> 实现的 <code>refreshBeanFactory()</code>方法，方法的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refreshBeanFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//如果已经有容器，销毁容器中的bean，关闭容器</span></span><br><span class="line"><span class="hljs-keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">destroyBeans();</span><br><span class="line">closeBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//创建IOC容器</span></span><br><span class="line">DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">beanFactory.setSerializationId(getId());</span><br><span class="line"><span class="hljs-comment">//对IOC容器进行定制化，如设置启动参数，开启注解的自动装配等</span></span><br><span class="line">customizeBeanFactory(beanFactory);</span><br><span class="line"><span class="hljs-comment">//调用载入Bean定义的方法，主要这里又使用了一个委派模式，在当前类中只定义了抽象的loadBeanDefinitions方法，具体的实现调用子类容器</span></span><br><span class="line">loadBeanDefinitions(beanFactory);</span><br><span class="line"><span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApplicationContextException(<span class="hljs-string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中，先判断 <code>BeanFactory</code> 是否存在，如果存在则先销毁 <code>beans</code> 并关闭 <code>beanFactory</code>，接着创建 <code>DefaultListableBeanFactory</code>，并调用<code>loadBeanDefinitions(beanFactory)</code>装载 bean 定义。</p></li><li><p>载入配置路径</p><p><code>AbstractRefreshableApplicationContext</code> 中只定义了抽象的 <code>loadBeanDefinitions</code> 方法，容器真正调用的是其子类 <code>AbstractXmlApplicationContext</code> 对该方法的实现，<code>AbstractXmlApplicationContext</code>的主要源码如下：<code>loadBeanDefinitions()</code>方法同样是抽象方法, 是由其子类实现的, 也即在<code>AbstractXmlApplicationContext</code> 中。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractXmlApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractRefreshableConfigApplicationContext</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//实现父类抽象的载入 Bean 定义方法</span></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//创建 XmlBeanDefinitionReader，即创建 Bean 读取器，并通过回调设置到容器中去，容器使用该读取器读取 Bean 配置资源</span></span><br><span class="line">        XmlBeanDefinitionReader beanDefinitionReader = <span class="hljs-keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"><span class="hljs-comment">//为 Bean 读取器设置 Spring 资源加载器，AbstractXmlApplicationContext 的</span></span><br><span class="line"><span class="hljs-comment">//祖先父类 AbstractApplicationContext 继承 DefaultResourceLoader，因此，容器本身也是一个资源加载器</span></span><br><span class="line">        beanDefinitionReader.setEnvironment(<span class="hljs-keyword">this</span>.getEnvironment());</span><br><span class="line">        beanDefinitionReader.setResourceLoader(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-comment">//为 Bean 读取器设置 SAX xml 解析器</span></span><br><span class="line">        beanDefinitionReader.setEntityResolver(<span class="hljs-keyword">new</span> ResourceEntityResolver(<span class="hljs-keyword">this</span>));</span><br><span class="line"><span class="hljs-comment">//当 Bean 读取器读取 Bean 定义的 Xml 资源文件时，启用 Xml 的校验机制</span></span><br><span class="line">        initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line"><span class="hljs-comment">//Bean 读取器真正实现加载的方法</span></span><br><span class="line">        loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initBeanDefinitionReader</span><span class="hljs-params">(XmlBeanDefinitionReader reader)</span> </span>&#123;</span><br><span class="line">        reader.setValidating(<span class="hljs-keyword">this</span>.validating);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//Xml Bean 读取器加载 Bean 配置资源</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(XmlBeanDefinitionReader reader)</span> <span class="hljs-keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取 Bean 配置资源的定位</span></span><br><span class="line">        Resource[] configResources = getConfigResources();</span><br><span class="line">        <span class="hljs-keyword">if</span> (configResources != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//Xml Bean 读取器调用其父类 AbstractBeanDefinitionReader 读取定位的 Bean 配置资源</span></span><br><span class="line">            reader.loadBeanDefinitions(configResources);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-comment">// 如果子类中获取的 Bean 配置资源定位为空，则获取 ClassPathXmlApplicationContext</span></span><br><span class="line"><span class="hljs-comment">// 构造方法中 setConfigLocations 方法设置的资源</span></span><br><span class="line">        String[] configLocations = getConfigLocations();</span><br><span class="line">        <span class="hljs-keyword">if</span> (configLocations != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//Xml Bean 读取器调用其父类 AbstractBeanDefinitionReader 读取定位的 Bean 配置资源</span></span><br><span class="line">            reader.loadBeanDefinitions(configLocations);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//这里又使用了一个委托模式，调用子类的获取 Bean 配置资源定位的方法</span></span><br><span class="line"><span class="hljs-comment">//该方法在 ClassPathXmlApplicationContext 中进行实现，对于我们</span></span><br><span class="line"><span class="hljs-comment">//举例分析源码的 ClassPathXmlApplicationContext 没有使用该方法</span></span><br><span class="line">    <span class="hljs-meta">@Nullable</span></span><br><span class="line">    <span class="hljs-keyword">protected</span> Resource[] getConfigResources() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 <code>XmlBean</code> 读取器的其中一种策略 <code>XmlBeanDefinitionReader</code> 为例。<code>XmlBeanDefinitionReader</code> 调用其父类<code>AbstractBeanDefinitionReader</code>的 <code>reader.loadBeanDefinitions()</code>方法读取Bean配置资源。由于我们使用 <code>ClassPathXmlApplicationContext</code> 作为例子分析，因此 <code>getConfigResources</code> 的返回值为 null，因此程序执行 <code>reader.loadBeanDefinitions(configLocations)</code>分支。</p></li><li><p>分配路径处理策略</p><p>在 <code>XmlBeanDefinitionReader</code> 的抽象父类 <code>AbstractBeanDefinitionReader</code> 中定义了载入过程。<code>AbstractBeanDefinitionReader</code> 的 <code>loadBeanDefinitions()</code>方法源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//重载方法，调用下面的loadBeanDefinitions(String, Set&lt;Resource&gt;);方法</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(String location)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> loadBeanDefinitions(location, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(String location, @Nullable Set&lt;Resource&gt; actualResources)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取在IoC容器初始化过程中设置的资源加载器</span></span><br><span class="line">ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line"><span class="hljs-keyword">if</span> (resourceLoader == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="hljs-string">"Cannot import bean definitions from location ["</span> + location + <span class="hljs-string">"]: no ResourceLoader available"</span>);</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line"><span class="hljs-keyword">if</span> (resourceLoader <span class="hljs-keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line"><span class="hljs-comment">// Resource pattern matching available.</span></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//将指定位置的Bean定义资源文件解析为Spring IOC容器封装的资源</span></span><br><span class="line"><span class="hljs-comment">//加载多个指定位置的Bean定义资源文件</span></span><br><span class="line">Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line"><span class="hljs-comment">//委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能</span></span><br><span class="line"><span class="hljs-keyword">int</span> loadCount = loadBeanDefinitions(resources);</span><br><span class="line"><span class="hljs-keyword">if</span> (actualResources != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">actualResources.add(resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Loaded "</span> + loadCount + <span class="hljs-string">" bean definitions from location pattern ["</span> + location + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> loadCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="hljs-string">"Could not resolve bean definition resource pattern ["</span> + location + <span class="hljs-string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Can only load single resources by absolute URL.</span></span><br><span class="line"><span class="hljs-comment">//将指定位置的Bean定义资源文件解析为Spring IOC容器封装的资源</span></span><br><span class="line"><span class="hljs-comment">//加载单个指定位置的Bean定义资源文件</span></span><br><span class="line">Resource resource = resourceLoader.getResource(location);</span><br><span class="line"><span class="hljs-comment">//委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能</span></span><br><span class="line"><span class="hljs-keyword">int</span> loadCount = loadBeanDefinitions(resource);</span><br><span class="line"><span class="hljs-keyword">if</span> (actualResources != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">actualResources.add(resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Loaded "</span> + loadCount + <span class="hljs-string">" bean definitions from location ["</span> + location + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> loadCount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line"><span class="hljs-comment">//重载方法，调用loadBeanDefinitions(String);</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(String... locations)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">Assert.notNull(locations, <span class="hljs-string">"Location array must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">int</span> counter = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (String location : locations) &#123;</span><br><span class="line">counter += loadBeanDefinitions(location);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractRefreshableConfigApplicationContext</code> 的 <code>loadBeanDefinitions(Resource...resources)</code> 方法实际上是调用 <code>AbstractBeanDefinitionReader</code> 的 <code>loadBeanDefinitions()</code>方法。从对 <code>AbstractBeanDefinitionReader</code> 的 <code>loadBeanDefinitions()</code>方法源码分析可以看出该方法就做了两件事：<br>首先，调用资源加载器的获取资源方法 <code>resourceLoader.getResource(location)</code>，获取到要加载的资源。<br>其次，真正执行加载功能是其子类 <code>XmlBeanDefinitionReader</code> 的 <code>loadBeanDefinitions()</code>方法。在<code>loadBeanDefinitions()</code>方法中调用了 <code>AbstractApplicationContext</code> 的 <code>getResources()</code>方法，跟进去之后发现<code>getResources()</code>方法其实定义在 <code>ResourcePatternResolver</code> 中，此时，我们有必要来看一下<code>ResourcePatternResolver</code> 的全类图：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/ResourceLoader.png"><p>从上面可以看到 <code>ResourceLoader</code> 与 <code>ApplicationContext</code> 的继承关系，可以看出其实际调用的是<code>DefaultResourceLoader</code>中的<code>getSource()</code> 方法定位 <code>Resource</code> ，因为<code>ClassPathXmlApplicationContext</code> 本身就是 <code>DefaultResourceLoader</code> 的实现类，所以此时又回到了<code>ClassPathXmlApplicationContext</code> 中来。</p></li><li><p>解析配置文件路径</p><p><code>XmlBeanDefinitionReader</code>通过配置文件<code>ClassPathXmlApplicationContext</code>的父类<code>DefaultResourceLoader</code>的 <code>getResource()</code>方法获取要加载的资源，其源码如下</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//获取Resource的具体实现方法</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Resource <span class="hljs-title">getResource</span><span class="hljs-params">(String location)</span> </span>&#123;</span><br><span class="line">Assert.notNull(location, <span class="hljs-string">"Location must not be null"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (ProtocolResolver protocolResolver : <span class="hljs-keyword">this</span>.protocolResolvers) &#123;</span><br><span class="line">Resource resource = protocolResolver.resolve(location, <span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (resource != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> resource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果是类路径的方式，那需要使用ClassPathResource 来得到bean 文件的资源对象</span></span><br><span class="line"><span class="hljs-keyword">if</span> (location.startsWith(<span class="hljs-string">"/"</span>)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> getResourceByPath(location);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (location.startsWith(CLASSPATH_URL_PREFIX)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Try to parse the location as a URL...</span></span><br><span class="line"><span class="hljs-comment">// 如果是URL 方式，使用UrlResource 作为bean 文件的资源对象</span></span><br><span class="line">URL url = <span class="hljs-keyword">new</span> URL(location);</span><br><span class="line"><span class="hljs-keyword">return</span> (ResourceUtils.isFileURL(url) ? <span class="hljs-keyword">new</span> FileUrlResource(url) : <span class="hljs-keyword">new</span> UrlResource(url));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (MalformedURLException ex) &#123;</span><br><span class="line"><span class="hljs-comment">// No URL -&gt; resolve as resource path.</span></span><br><span class="line"><span class="hljs-comment">//如果既不是classpath标识，又不是URL标识的Resource定位，则调用</span></span><br><span class="line"><span class="hljs-comment">//容器本身的getResourceByPath方法获取Resource</span></span><br><span class="line"><span class="hljs-keyword">return</span> getResourceByPath(location);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DefaultResourceLoader</code> 提供了 <code>getResourceByPath()</code>方法的实现，就是为了处理既不是 classpath标识，又不是 URL 标识的 Resource 定位这种情况。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Resource <span class="hljs-title">getResourceByPath</span><span class="hljs-params">(String path)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ClassPathContextResource(path, getClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>ClassPathResource</code> 中完成了对整个路径的解析。这样，就可以从类路径上对 IOC 配置文件进行加载，当然我们可以按照这个逻辑从任何地方加载，在 Spring 中我们看到它提供的各种资源抽象，比如<code>ClassPathResource、URLResource、FileSystemResource</code> 等来供我们使用。上面我们看到的是定位Resource 的一个过程，而这只是加载过程的一部分。例如 <code>FileSystemXmlApplication</code> 容器就重写了<code>getResourceByPath()</code>方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Resource <span class="hljs-title">getResourceByPath</span><span class="hljs-params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (path.startsWith(<span class="hljs-string">"/"</span>)) &#123;</span><br><span class="line">    path = path.substring(<span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//这里使用文件系统资源对象来定义 bean 文件</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FileSystemResource(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过子类的覆盖，巧妙地完成了将类路径变为文件路径的转换。</p></li><li><p>开始读取配置内容</p><p>继续回到 <code>XmlBeanDefinitionReader</code> 的 l<code>oadBeanDefinitions(Resource …)</code>方法看到代表 bean 文件的资源定义以后的载入过程。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//XmlBeanDefinitionReader加载资源的入口方法</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(Resource resource)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//将读入的XML资源进行特殊编码处理</span></span><br><span class="line"><span class="hljs-keyword">return</span> loadBeanDefinitions(<span class="hljs-keyword">new</span> EncodedResource(resource));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//这里是载入XML形式Bean定义资源文件方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(EncodedResource encodedResource)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">Assert.notNull(encodedResource, <span class="hljs-string">"EncodedResource must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="hljs-string">"Loading XML bean definitions from "</span> + encodedResource.getResource());</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line">Set&lt;EncodedResource&gt; currentResources = <span class="hljs-keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line"><span class="hljs-keyword">if</span> (currentResources == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">currentResources = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(<span class="hljs-number">4</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="hljs-string">"Detected cyclic loading of "</span> + encodedResource + <span class="hljs-string">" - check your import definitions!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//将资源文件转为InputStream的IO流</span></span><br><span class="line">InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//从InputStream中得到XML的解析源</span></span><br><span class="line">InputSource inputSource = <span class="hljs-keyword">new</span> InputSource(inputStream);</span><br><span class="line"><span class="hljs-keyword">if</span> (encodedResource.getEncoding() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//这里是具体的读取过程</span></span><br><span class="line"><span class="hljs-keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-comment">//关闭从Resource中得到的IO流</span></span><br><span class="line">inputStream.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="hljs-string">"IOException parsing XML document from "</span> + encodedResource.getResource(), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">currentResources.remove(encodedResource);</span><br><span class="line"><span class="hljs-keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>载入 Bean 配置信息的最后一步是将 Bean 配置信息转换为 Document 对象，该过程由<code>documentLoader()</code>方法实现。</p></li><li><p>准备文档对象</p><p><code>DocumentLoader</code> 将 Bean 配置资源转换成 Document 对象的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultDocumentLoader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DocumentLoader</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="hljs-comment">//使用标准的JAXP将载入的Bean定义资源转换成document对象</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Document <span class="hljs-title">loadDocument</span><span class="hljs-params">(InputSource inputSource, EntityResolver entityResolver,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">ErrorHandler errorHandler, <span class="hljs-keyword">int</span> validationMode, <span class="hljs-keyword">boolean</span> namespaceAware)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//创建文件解析器工厂</span></span><br><span class="line">DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Using JAXP provider ["</span> + factory.getClass().getName() + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//创建文档解析器</span></span><br><span class="line">DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler);</span><br><span class="line"><span class="hljs-comment">//解析Spring的Bean定义资源</span></span><br><span class="line"><span class="hljs-keyword">return</span> builder.parse(inputSource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的解析过程是调用 JavaEE 标准的 JAXP 标准进行处理。至此 Spring IOC 容器根据定位的 Bean 配置信息，将其加载读入并转换成为 Document 对象过程完成。接下来我们要继续分析 Spring IOC 容器将载入的 Bean 配置信息转换为 Document 对象之后，是如何将其解析为Spring IOC 管理的 Bean 对象并将其注册到容器中的。</p></li><li><p>分配解析策略</p><p><code>XmlBeanDefinitionReader</code> 类中的 <code>doLoadBeanDefinition()</code>方法是从特定 XML 文件中实际载入Bean 配置资源的方法，该方法在载入 Bean 配置资源之后将其转换为 Document 对象，接下来调用<code>registerBeanDefinitions()</code> 启 动 Spring IOC 容 器 对 Bean定义的解析过程，<code>registerBeanDefinitions()</code>方法源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//按照 Spring 的 Bean 语义要求将 Bean 配置资源解析并转换为容器内部数据结构</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(Document doc, Resource resource)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//得到 BeanDefinitionDocumentReader 来对 xml 格式的 BeanDefinition 解析</span></span><br><span class="line">    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">    <span class="hljs-comment">//获得容器中注册的 Bean 数量</span></span><br><span class="line">    <span class="hljs-keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">    <span class="hljs-comment">//解析过程入口，这里使用了委派模式，BeanDefinitionDocumentReader 只是个接口,</span></span><br><span class="line">    <span class="hljs-comment">//具体的解析实现过程有实现类 DefaultBeanDefinitionDocumentReader 完成</span></span><br><span class="line">    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">    <span class="hljs-comment">//统计解析的 Bean 数量</span></span><br><span class="line">    <span class="hljs-keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean 配置资源的载入解析分为以下两个过程：</p><p>首先，通过调用 XML 解析器将 Bean 配置信息转换得到 Document 对象，但是这些 Document 对象并没有按照 Spring 的 Bean 规则进行解析。这一步是载入的过程.</p><p>其次，在完成通用的 XML 解析之后，按照 Spring Bean 的定义规则对 Document 对象进行解析，其解析过程是在接口<code>BeanDefinitionDocumentReader</code>的实现类<code>DefaultBeanDefinitionDocumentReader</code>中实现的</p></li><li><p>将配置载入内存</p><p><code>BeanDefinitionDocumentReader</code> 接 口 通 过 r<code>egisterBeanDefinitions()</code> 方 法 调 用 其 实现类<code>DefaultBeanDefinitionDocumentReader</code> 对 Document 对象进行解析，解析的代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//根据Spring DTD对Bean的定义规则解析Bean定义Document对象</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获得XML描述符</span></span><br><span class="line"><span class="hljs-keyword">this</span>.readerContext = readerContext;</span><br><span class="line">logger.debug(<span class="hljs-string">"Loading bean definitions"</span>);</span><br><span class="line"><span class="hljs-comment">//获得Document的根元素</span></span><br><span class="line">Element root = doc.getDocumentElement();</span><br><span class="line">doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doRegisterBeanDefinitions</span><span class="hljs-params">(Element root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//具体的解析过程由BeanDefinitionParserDelegate实现，</span></span><br><span class="line"><span class="hljs-comment">//BeanDefinitionParserDelegate中定义了Spring Bean定义XML文件的各种元素</span></span><br><span class="line">BeanDefinitionParserDelegate parent = <span class="hljs-keyword">this</span>.delegate;</span><br><span class="line"><span class="hljs-keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line"><span class="hljs-keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="hljs-string">"Skipped XML bean definition file due to specified profiles ["</span> + profileSpec +</span><br><span class="line"><span class="hljs-string">"] not matching: "</span> + getReaderContext().getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//在解析Bean定义之前，进行自定义的解析，增强解析过程的可扩展性</span></span><br><span class="line">preProcessXml(root);</span><br><span class="line"><span class="hljs-comment">//从Document的根元素开始进行Bean定义的Document对象</span></span><br><span class="line">parseBeanDefinitions(root, <span class="hljs-keyword">this</span>.delegate);</span><br><span class="line"><span class="hljs-comment">//在解析Bean定义之后，进行自定义的解析，增加解析过程的可扩展性</span></span><br><span class="line">postProcessXml(root);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//创建BeanDefinitionParserDelegate，用于完成真正的解析过程</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> BeanDefinitionParserDelegate <span class="hljs-title">createDelegate</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">XmlReaderContext readerContext, Element root, @Nullable BeanDefinitionParserDelegate parentDelegate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BeanDefinitionParserDelegate delegate = <span class="hljs-keyword">new</span> BeanDefinitionParserDelegate(readerContext);</span><br><span class="line"><span class="hljs-comment">//BeanDefinitionParserDelegate初始化Document根元素</span></span><br><span class="line">delegate.initDefaults(root, parentDelegate);</span><br><span class="line"><span class="hljs-keyword">return</span> delegate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//使用Spring的Bean规则从Document的根元素开始进行Bean定义的Document对象</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseBeanDefinitions</span><span class="hljs-params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//Bean定义的Document对象使用了Spring默认的XML命名空间</span></span><br><span class="line"><span class="hljs-keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line"><span class="hljs-comment">//获取Bean定义的Document对象根元素的所有子节点</span></span><br><span class="line">NodeList nl = root.getChildNodes();</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">Node node = nl.item(i);</span><br><span class="line"><span class="hljs-comment">//获得Document节点是XML元素节点</span></span><br><span class="line"><span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> Element) &#123;</span><br><span class="line">Element ele = (Element) node;</span><br><span class="line"><span class="hljs-comment">//Bean定义的Document的元素节点使用的是Spring默认的XML命名空间</span></span><br><span class="line"><span class="hljs-keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line"><span class="hljs-comment">//使用Spring的Bean规则解析元素节点</span></span><br><span class="line">parseDefaultElement(ele, delegate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//没有使用Spring默认的XML命名空间，则使用用户自定义的解//析规则解析元素节点</span></span><br><span class="line">delegate.parseCustomElement(ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//Document的根节点没有使用Spring默认的命名空间，则使用用户自定义的</span></span><br><span class="line"><span class="hljs-comment">//解析规则解析Document根节点</span></span><br><span class="line">delegate.parseCustomElement(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//使用Spring的Bean规则解析Document元素节点</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseDefaultElement</span><span class="hljs-params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//如果元素节点是&lt;Import&gt;导入元素，进行导入解析</span></span><br><span class="line"><span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">importBeanDefinitionResource(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果元素节点是&lt;Alias&gt;别名元素，进行别名解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">processAliasRegistration(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//元素节点既不是导入元素，也不是别名元素，即普通的&lt;Bean&gt;元素，</span></span><br><span class="line"><span class="hljs-comment">//按照Spring的Bean规则解析元素</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">processBeanDefinition(ele, delegate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">// recurse</span></span><br><span class="line">doRegisterBeanDefinitions(ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Parse an "import" element and load the bean definitions</span></span><br><span class="line"><span class="hljs-comment"> * from the given resource into the bean factory.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//解析&lt;Import&gt;导入元素，从给定的导入路径加载Bean定义资源到Spring IoC容器中</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">importBeanDefinitionResource</span><span class="hljs-params">(Element ele)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取给定的导入元素的location属性</span></span><br><span class="line">String location = ele.getAttribute(RESOURCE_ATTRIBUTE);</span><br><span class="line"><span class="hljs-comment">//如果导入元素的location属性值为空，则没有导入任何资源，直接返回</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(location)) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Resource location must not be empty"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Resolve system properties: e.g. "$&#123;user.dir&#125;"</span></span><br><span class="line"><span class="hljs-comment">//使用系统变量值解析location属性值</span></span><br><span class="line">location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);</span><br><span class="line"></span><br><span class="line">Set&lt;Resource&gt; actualResources = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(<span class="hljs-number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Discover whether the location is an absolute or relative URI</span></span><br><span class="line"><span class="hljs-comment">//标识给定的导入元素的location是否是绝对路径</span></span><br><span class="line"><span class="hljs-keyword">boolean</span> absoluteLocation = <span class="hljs-keyword">false</span>;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line"><span class="hljs-comment">// cannot convert to an URI, considering the location relative</span></span><br><span class="line"><span class="hljs-comment">// unless it is the well-known Spring prefix "classpath*:"</span></span><br><span class="line"><span class="hljs-comment">//给定的导入元素的location不是绝对路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Absolute or relative?</span></span><br><span class="line"><span class="hljs-comment">//给定的导入元素的location是绝对路径</span></span><br><span class="line"><span class="hljs-keyword">if</span> (absoluteLocation) &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//使用资源读入器加载给定路径的Bean定义资源</span></span><br><span class="line"><span class="hljs-keyword">int</span> importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Imported "</span> + importCount + <span class="hljs-string">" bean definitions from URL location ["</span> + location + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">getReaderContext().error(</span><br><span class="line"><span class="hljs-string">"Failed to import bean definitions from URL location ["</span> + location + <span class="hljs-string">"]"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// No URL -&gt; considering resource location as relative to the current file.</span></span><br><span class="line"><span class="hljs-comment">//给定的导入元素的location是相对路径</span></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> importCount;</span><br><span class="line"><span class="hljs-comment">//将给定导入元素的location封装为相对路径资源</span></span><br><span class="line">Resource relativeResource = getReaderContext().getResource().createRelative(location);</span><br><span class="line"><span class="hljs-comment">//封装的相对路径资源存在</span></span><br><span class="line"><span class="hljs-keyword">if</span> (relativeResource.exists()) &#123;</span><br><span class="line"><span class="hljs-comment">//使用资源读入器加载Bean定义资源</span></span><br><span class="line">importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);</span><br><span class="line">actualResources.add(relativeResource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//封装的相对路径资源不存在</span></span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//获取Spring IOC容器资源读入器的基本路径</span></span><br><span class="line">String baseLocation = getReaderContext().getResource().getURL().toString();</span><br><span class="line"><span class="hljs-comment">//根据Spring IOC容器资源读入器的基本路径加载给定导入路径的资源</span></span><br><span class="line">importCount = getReaderContext().getReader().loadBeanDefinitions(</span><br><span class="line">StringUtils.applyRelativePath(baseLocation, location), actualResources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Imported "</span> + importCount + <span class="hljs-string">" bean definitions from relative location ["</span> + location + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Failed to resolve current resource location"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Failed to import bean definitions from relative location ["</span> + location + <span class="hljs-string">"]"</span>,</span><br><span class="line">ele, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Resource[] actResArray = actualResources.toArray(<span class="hljs-keyword">new</span> Resource[actualResources.size()]);</span><br><span class="line"><span class="hljs-comment">//在解析完&lt;Import&gt;元素之后，发送容器导入其他资源处理完成事件</span></span><br><span class="line">getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Process the given alias element, registering the alias with the registry.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//解析&lt;Alias&gt;别名元素，为Bean向Spring IoC容器注册别名</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processAliasRegistration</span><span class="hljs-params">(Element ele)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;Alias&gt;别名元素中name的属性值</span></span><br><span class="line">String name = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"><span class="hljs-comment">//获取&lt;Alias&gt;别名元素中alias的属性值</span></span><br><span class="line">String alias = ele.getAttribute(ALIAS_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">boolean</span> valid = <span class="hljs-keyword">true</span>;</span><br><span class="line"><span class="hljs-comment">//&lt;alias&gt;别名元素的name属性值为空</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Name must not be empty"</span>, ele);</span><br><span class="line">valid = <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//&lt;alias&gt;别名元素的alias属性值为空</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(alias)) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Alias must not be empty"</span>, ele);</span><br><span class="line">valid = <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (valid) &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//向容器的资源读入器注册别名</span></span><br><span class="line">getReaderContext().getRegistry().registerAlias(name, alias);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Failed to register alias '"</span> + alias +</span><br><span class="line"><span class="hljs-string">"' for bean with name '"</span> + name + <span class="hljs-string">"'"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//在解析完&lt;Alias&gt;元素之后，发送容器别名处理完成事件</span></span><br><span class="line">getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Process the given bean element, parsing the bean definition</span></span><br><span class="line"><span class="hljs-comment"> * and registering it with the registry.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//解析Bean定义资源Document对象的普通元素</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processBeanDefinition</span><span class="hljs-params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line"><span class="hljs-comment">// BeanDefinitionHolder是对BeanDefinition的封装，即Bean定义的封装类</span></span><br><span class="line"><span class="hljs-comment">//对Document对象中&lt;Bean&gt;元素的解析由BeanDefinitionParserDelegate实现</span></span><br><span class="line"><span class="hljs-comment">// BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span></span><br><span class="line"><span class="hljs-keyword">if</span> (bdHolder != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Register the final decorated instance.</span></span><br><span class="line"><span class="hljs-comment">//向Spring IOC容器注册解析得到的Bean定义，这是Bean定义向IOC容器注册的入口</span></span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">bdHolder.getBeanName() + <span class="hljs-string">"'"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Send registration event.</span></span><br><span class="line"><span class="hljs-comment">//在完成向Spring IOC容器注册解析得到的Bean定义之后，发送注册事件</span></span><br><span class="line">getReaderContext().fireComponentRegistered(<span class="hljs-keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述 Spring IOC 容器对载入的 Bean 定义 Document 解析可以看出，我们使用 Spring 时，在Spring 配置文件中可以使用<code>&lt;import&gt;</code>元素来导入 IOC 容器所需要的其他资源，Spring IOC 容器在解析时会首先将指定导入的资源加载进容器中。使用<code>&lt;ailas&gt;</code>别名时，Spring IOC 容器首先将别名元素所定义的别名注册到容器中。对于既不是<code>&lt;import&gt;</code>元素，又不是<code>&lt;alias&gt;</code>元素的元素，即 Spring 配置文件中普通的<code>&lt;bean&gt;</code>元素的解析由<code>BeanDefinitionParserDelegate</code> 类的 <code>parseBeanDefinitionElement()</code>方法来实现。</p></li><li><p>载入<code>&lt;bean&gt;</code>元素</p><p>Bean 配置信息中的<code>&lt;import&gt;</code>和<code>&lt;alias&gt;</code>元素解析在 <code>DefaultBeanDefinitionDocumentReader</code> 中已经完成，对 Bean 配置信息中使用最多的<code>&lt;bean&gt;</code>元素交由 <code>BeanDefinitionParserDelegate</code> 来解析，其解析实现的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素的入口</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> BeanDefinitionHolder <span class="hljs-title">parseBeanDefinitionElement</span><span class="hljs-params">(Element ele)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseBeanDefinitionElement(ele, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//解析Bean定义资源文件中的&lt;Bean&gt;元素，这个方法中主要处理&lt;Bean&gt;元素的id，name和别名属性</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> BeanDefinitionHolder <span class="hljs-title">parseBeanDefinitionElement</span><span class="hljs-params">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;Bean&gt;元素中的id属性值</span></span><br><span class="line">String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line"><span class="hljs-comment">//获取&lt;Bean&gt;元素中的name属性值</span></span><br><span class="line">String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//获取&lt;Bean&gt;元素中的alias属性值</span></span><br><span class="line">List&lt;String&gt; aliases = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//将&lt;Bean&gt;元素中的所有name属性值存放到别名中</span></span><br><span class="line"><span class="hljs-keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">String beanName = id;</span><br><span class="line"><span class="hljs-comment">//如果&lt;Bean&gt;元素中没有配置id属性时，将别名中的第一个值赋值给beanName</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">beanName = aliases.remove(<span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"No XML 'id' specified - using '"</span> + beanName +</span><br><span class="line"><span class="hljs-string">"' as bean name and "</span> + aliases + <span class="hljs-string">" as aliases"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//检查&lt;Bean&gt;元素所配置的id或者name的唯一性，containingBean标识&lt;Bean&gt;</span></span><br><span class="line"><span class="hljs-comment">//元素中是否包含子&lt;Bean&gt;元素</span></span><br><span class="line"><span class="hljs-keyword">if</span> (containingBean == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//检查&lt;Bean&gt;元素所配置的id、name或者别名是否重复</span></span><br><span class="line">checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//详细对&lt;Bean&gt;元素中配置的Bean定义进行解析的地方</span></span><br><span class="line">AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line"><span class="hljs-keyword">if</span> (beanDefinition != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (containingBean != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//如果&lt;Bean&gt;元素中没有配置id、别名或者name，且没有包含子元素</span></span><br><span class="line"><span class="hljs-comment">//&lt;Bean&gt;元素，为解析的Bean生成一个唯一beanName并注册</span></span><br><span class="line">beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">beanDefinition, <span class="hljs-keyword">this</span>.readerContext.getRegistry(), <span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//如果&lt;Bean&gt;元素中没有配置id、别名或者name，且包含了子元素</span></span><br><span class="line"><span class="hljs-comment">//&lt;Bean&gt;元素，为解析的Bean使用别名向IOC容器注册</span></span><br><span class="line">beanName = <span class="hljs-keyword">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line"><span class="hljs-comment">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class="line"><span class="hljs-comment">// if the generator returned the class name plus a suffix.</span></span><br><span class="line"><span class="hljs-comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class="line"><span class="hljs-comment">//为解析的Bean使用别名注册时，为了向后兼容</span></span><br><span class="line"><span class="hljs-comment">//Spring1.2/2.0，给别名添加类名后缀</span></span><br><span class="line">String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line"><span class="hljs-keyword">if</span> (beanClassName != <span class="hljs-keyword">null</span> &amp;&amp;</span><br><span class="line">beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">!<span class="hljs-keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">aliases.add(beanClassName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Neither XML 'id' nor 'name' specified - "</span> +</span><br><span class="line"><span class="hljs-string">"using generated bean name ["</span> + beanName + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">error(ex.getMessage(), ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//当解析出错时，返回null</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//详细对&lt;Bean&gt;元素中配置的Bean定义其他属性进行解析</span></span><br><span class="line"><span class="hljs-comment">//由于上面的方法中已经对Bean的id、name和别名等属性进行了处理</span></span><br><span class="line"><span class="hljs-comment">//该方法中主要处理除这三个以外的其他属性数据</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AbstractBeanDefinition <span class="hljs-title">parseBeanDefinitionElement</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">Element ele, String beanName, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//记录解析的&lt;Bean&gt;</span></span><br><span class="line"><span class="hljs-keyword">this</span>.parseState.push(<span class="hljs-keyword">new</span> BeanEntry(beanName));</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//这里只读取&lt;Bean&gt;元素中配置的class名字，然后载入到BeanDefinition中去</span></span><br><span class="line"><span class="hljs-comment">//只是记录配置的class名字，不做实例化，对象的实例化在依赖注入时完成</span></span><br><span class="line">String className = <span class="hljs-keyword">null</span>;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//如果&lt;Bean&gt;元素中配置了parent属性，则获取parent属性的值</span></span><br><span class="line"><span class="hljs-keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">&#125;</span><br><span class="line">String parent = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//根据&lt;Bean&gt;元素配置的class名称和parent属性值创建BeanDefinition</span></span><br><span class="line"><span class="hljs-comment">//为载入Bean定义信息做准备</span></span><br><span class="line">AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//对当前的&lt;Bean&gt;元素中配置的一些属性进行解析和设置，如配置的单态(singleton)属性等</span></span><br><span class="line">parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line"><span class="hljs-comment">//为&lt;Bean&gt;元素解析的Bean设置description信息</span></span><br><span class="line">bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//对&lt;Bean&gt;元素的meta(元信息)属性解析</span></span><br><span class="line">parseMetaElements(ele, bd);</span><br><span class="line"><span class="hljs-comment">//对&lt;Bean&gt;元素的lookup-method属性解析</span></span><br><span class="line">parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line"><span class="hljs-comment">//对&lt;Bean&gt;元素的replaced-method属性解析</span></span><br><span class="line">parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素的构造方法设置</span></span><br><span class="line">parseConstructorArgElements(ele, bd);</span><br><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素的&lt;property&gt;设置</span></span><br><span class="line">parsePropertyElements(ele, bd);</span><br><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素的qualifier属性</span></span><br><span class="line">parseQualifierElements(ele, bd);</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//为当前解析的Bean设置所需的资源和依赖对象</span></span><br><span class="line">bd.setResource(<span class="hljs-keyword">this</span>.readerContext.getResource());</span><br><span class="line">bd.setSource(extractSource(ele));</span><br><span class="line">        </span><br><span class="line"><span class="hljs-keyword">return</span> bd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">error(<span class="hljs-string">"Bean class ["</span> + className + <span class="hljs-string">"] not found"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">error(<span class="hljs-string">"Class that bean class ["</span> + className + <span class="hljs-string">"] depends on not found"</span>, ele, err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">error(<span class="hljs-string">"Unexpected failure during bean definition parsing"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.parseState.pop();</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素出错时，返回null</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要使用过 Spring，对 Spring 配置文件比较熟悉的人，通过对上述源码的分析，就会明白我们在 Spring配置文件中<code>&lt;Bean&gt;</code>元素的中配置的属性就是通过该方法解析和设置到 Bean 中去的。注意：在解析<code>&lt;Bean&gt;</code>元素过程中没有创建和实例化 Bean 对象，只是创建了 Bean 对象的定义类BeanDefinition，将<code>&lt;Bean&gt;</code>元素中的配置信息设置到 BeanDefinition 中作为记录，当依赖注入时才使用这些记录信息创建和实例化具体的 Bean 对象。上面方法中一些对一些配置如元信息(meta)、qualifier 等的解析，我们在 Spring 中配置时使用的也不多，我们在使用 Spring 的<code>&lt;Bean&gt;</code>元素时，配置最多的是<code>&lt;property&gt;</code>属性，因此我们下面继续分析源码，了解 Bean 的属性在解析时是如何设置的。</p></li><li><p>载入<code>&lt;property&gt;</code>元素</p><p><code>BeanDefinitionParserDelegate</code> 在解析<code>&lt;Bean&gt;</code>调用 <code>parsePropertyElements()</code>方法解析<code>&lt;Bean&gt;</code>元素中的<code>&lt;property&gt;</code>属性子元素，解析源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素中的&lt;property&gt;子元素</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parsePropertyElements</span><span class="hljs-params">(Element beanEle, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;Bean&gt;元素中所有的子元素</span></span><br><span class="line">NodeList nl = beanEle.getChildNodes();</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">Node node = nl.item(i);</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;property&gt;子元素，则调用解析&lt;property&gt;子元素方法解析</span></span><br><span class="line"><span class="hljs-keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123;</span><br><span class="line">parsePropertyElement((Element) node, bd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//解析&lt;property&gt;元素</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parsePropertyElement</span><span class="hljs-params">(Element ele, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;property&gt;元素的名字</span></span><br><span class="line">String propertyName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class="line">error(<span class="hljs-string">"Tag 'property' must have a 'name' attribute"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">this</span>.parseState.push(<span class="hljs-keyword">new</span> PropertyEntry(propertyName));</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//如果一个Bean中已经有同名的property存在，则不进行解析，直接返回。</span></span><br><span class="line"><span class="hljs-comment">//即如果在同一个Bean中配置同名的property，则只有第一个起作用</span></span><br><span class="line"><span class="hljs-keyword">if</span> (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class="line">error(<span class="hljs-string">"Multiple 'property' definitions for property '"</span> + propertyName + <span class="hljs-string">"'"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//解析获取property的值</span></span><br><span class="line">Object val = parsePropertyValue(ele, bd, propertyName);</span><br><span class="line"><span class="hljs-comment">//根据property的名字和值创建property实例</span></span><br><span class="line">PropertyValue pv = <span class="hljs-keyword">new</span> PropertyValue(propertyName, val);</span><br><span class="line"><span class="hljs-comment">//解析&lt;property&gt;元素中的属性</span></span><br><span class="line">parseMetaElements(ele, pv);</span><br><span class="line">pv.setSource(extractSource(ele));</span><br><span class="line">bd.getPropertyValues().addPropertyValue(pv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.parseState.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//解析获取property值</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">parsePropertyValue</span><span class="hljs-params">(Element ele, BeanDefinition bd, @Nullable String propertyName)</span> </span>&#123;</span><br><span class="line">String elementName = (propertyName != <span class="hljs-keyword">null</span>) ?</span><br><span class="line"><span class="hljs-string">"&lt;property&gt; element for property '"</span> + propertyName + <span class="hljs-string">"'"</span> :</span><br><span class="line"><span class="hljs-string">"&lt;constructor-arg&gt; element"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Should only have one child element: ref, value, list, etc.</span></span><br><span class="line"><span class="hljs-comment">//获取&lt;property&gt;的所有子元素，只能是其中一种类型:ref,value,list,etc等</span></span><br><span class="line">NodeList nl = ele.getChildNodes();</span><br><span class="line">Element subElement = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">Node node = nl.item(i);</span><br><span class="line"><span class="hljs-comment">//子元素不是description和meta属性</span></span><br><span class="line"><span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;</span><br><span class="line">!nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">// Child element is what we're looking for.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (subElement != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">error(elementName + <span class="hljs-string">" must not contain more than one sub-element"</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//当前&lt;property&gt;元素包含有子元素</span></span><br><span class="line">subElement = (Element) node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//判断property的属性值是ref还是value，不允许既是ref又是value</span></span><br><span class="line"><span class="hljs-keyword">boolean</span> hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">boolean</span> hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">if</span> ((hasRefAttribute &amp;&amp; hasValueAttribute) ||</span><br><span class="line">((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != <span class="hljs-keyword">null</span>)) &#123;</span><br><span class="line">error(elementName +</span><br><span class="line"><span class="hljs-string">" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element"</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//如果属性是ref，创建一个ref的数据对象RuntimeBeanReference</span></span><br><span class="line"><span class="hljs-comment">//这个对象封装了ref信息</span></span><br><span class="line"><span class="hljs-keyword">if</span> (hasRefAttribute) &#123;</span><br><span class="line">String refName = ele.getAttribute(REF_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">error(elementName + <span class="hljs-string">" contains empty 'ref' attribute"</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//一个指向运行时所依赖对象的引用</span></span><br><span class="line">RuntimeBeanReference ref = <span class="hljs-keyword">new</span> RuntimeBeanReference(refName);</span><br><span class="line"><span class="hljs-comment">//设置这个ref的数据对象是被当前的property对象所引用</span></span><br><span class="line">ref.setSource(extractSource(ele));</span><br><span class="line"><span class="hljs-keyword">return</span> ref;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果属性是value，创建一个value的数据对象TypedStringValue</span></span><br><span class="line"><span class="hljs-comment">//这个对象封装了value信息</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hasValueAttribute) &#123;</span><br><span class="line"><span class="hljs-comment">//一个持有String类型值的对象</span></span><br><span class="line">TypedStringValue valueHolder = <span class="hljs-keyword">new</span> TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));</span><br><span class="line"><span class="hljs-comment">//设置这个value数据对象是被当前的property对象所引用</span></span><br><span class="line">valueHolder.setSource(extractSource(ele));</span><br><span class="line"><span class="hljs-keyword">return</span> valueHolder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果当前&lt;property&gt;元素还有子元素</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (subElement != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//解析&lt;property&gt;的子元素</span></span><br><span class="line"><span class="hljs-keyword">return</span> parsePropertySubElement(subElement, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Neither child element nor "ref" or "value" attribute found.</span></span><br><span class="line"><span class="hljs-comment">//propery属性中既不是ref，也不是value属性，解析出错返回null</span></span><br><span class="line">error(elementName + <span class="hljs-string">" must specify a ref or value"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">parsePropertySubElement</span><span class="hljs-params">(Element ele, @Nullable BeanDefinition bd)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parsePropertySubElement(ele, bd, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对上述源码的分析，我们可以了解在 Spring 配置文件中，<code>&lt;Bean&gt;</code>元素中<code>&lt;property&gt;</code>元素的相关配置是如何处理的：</p><ol><li><code>ref</code> 被封装为指向依赖对象一个引用。</li><li><code>value</code> 配置都会封装成一个字符串类型的对象。</li><li><code>ref</code> 和 <code>value</code> 都通过“<code>解析的数据类型属性值.setSource(extractSource(ele));</code>”方法将属性值/引用与所引用的属性关联起来。在方法的最后对于<code>&lt;property&gt;</code>元素的子元素通过 <code>parsePropertySubElement ()</code>方法解析，我们继续分析该方法的源码，了解其解析过程。</li></ol></li><li><p>载入<code>&lt;property&gt;</code>子元素</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析&lt;property&gt;元素中ref,value或者集合等子元素</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">parsePropertySubElement</span><span class="hljs-params">(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//如果&lt;property&gt;没有使用Spring默认的命名空间，则使用用户自定义的规则解析内嵌元素</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!isDefaultNamespace(ele)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseNestedCustomElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是bean，则使用解析&lt;Bean&gt;元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd);</span><br><span class="line"><span class="hljs-keyword">if</span> (nestedBd != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> nestedBd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是ref，ref中只能有以下3个属性：bean、local、parent</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, REF_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">// A generic reference to any name of any bean.</span></span><br><span class="line"><span class="hljs-comment">//可以不再同一个Spring配置文件中，具体请参考Spring对ref的配置规则</span></span><br><span class="line">String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">boolean</span> toParent = <span class="hljs-keyword">false</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line"><span class="hljs-comment">// A reference to the id of another bean in a parent context.</span></span><br><span class="line"><span class="hljs-comment">//获取&lt;property&gt;元素中parent属性值，引用父级容器中的Bean</span></span><br><span class="line">refName = ele.getAttribute(PARENT_REF_ATTRIBUTE);</span><br><span class="line">toParent = <span class="hljs-keyword">true</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line">error(<span class="hljs-string">"'bean' or 'parent' is required for &lt;ref&gt; element"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">error(<span class="hljs-string">"&lt;ref&gt; element contains empty target attribute"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//创建ref类型数据，指向被引用的对象</span></span><br><span class="line">RuntimeBeanReference ref = <span class="hljs-keyword">new</span> RuntimeBeanReference(refName, toParent);</span><br><span class="line"><span class="hljs-comment">//设置引用类型值是被当前子元素所引用</span></span><br><span class="line">ref.setSource(extractSource(ele));</span><br><span class="line"><span class="hljs-keyword">return</span> ref;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;idref&gt;，使用解析ref元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, IDREF_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseIdRefElement(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;value&gt;，使用解析value元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, VALUE_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseValueElement(ele, defaultValueType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是null，为&lt;property&gt;设置一个封装null值的字符串数据</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, NULL_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">// It's a distinguished null value. Let's wrap it in a TypedStringValue</span></span><br><span class="line"><span class="hljs-comment">// object in order to preserve the source location.</span></span><br><span class="line">TypedStringValue nullHolder = <span class="hljs-keyword">new</span> TypedStringValue(<span class="hljs-keyword">null</span>);</span><br><span class="line">nullHolder.setSource(extractSource(ele));</span><br><span class="line"><span class="hljs-keyword">return</span> nullHolder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;array&gt;，使用解析array集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, ARRAY_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseArrayElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;list&gt;，使用解析list集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, LIST_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseListElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;set&gt;，使用解析set集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, SET_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseSetElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;map&gt;，使用解析map集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, MAP_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseMapElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;props&gt;，使用解析props集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, PROPS_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parsePropsElement(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//既不是ref，又不是value，也不是集合，则子元素配置错误，返回null</span></span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">error(<span class="hljs-string">"Unknown property sub-element: ["</span> + ele.getNodeName() + <span class="hljs-string">"]"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述源码分析，我们明白了在 Spring 配置文件中，对<code>&lt;property&gt;</code>元素中配置的 <code>array、list、set、map、prop</code> 等各种集合子元素的都通过上述方法解析，生成对应的数据对象，比如 <code>ManagedList、ManagedArray、ManagedSet</code> 等，这些 <code>Managed</code> 类是 Spring 对象 <code>BeanDefiniton</code> 的数据封装，对集合数据类型的具体解析有各自的解析方法实现，解析方法的命名非常规范，一目了然，我们对<code>&lt;list&gt;</code>集合元素的解析方法进行源码分析，了解其实现过程。</p></li><li><p>载入<code>&lt;list&gt;</code>子元素</p><p>在 <code>BeanDefinitionParserDelegate</code> 类中的 <code>parseListElement()</code>方法就是具体实现解析<code>&lt;property&gt;</code>元素中的<code>&lt;list&gt;</code>集合子元素，源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析&lt;list&gt;集合子元素</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">parseListElement</span><span class="hljs-params">(Element collectionEle, @Nullable BeanDefinition bd)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;list&gt;元素中的value-type属性，即获取集合元素的数据类型</span></span><br><span class="line">String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE);</span><br><span class="line"><span class="hljs-comment">//获取&lt;list&gt;集合元素中的所有子节点</span></span><br><span class="line">NodeList nl = collectionEle.getChildNodes();</span><br><span class="line"><span class="hljs-comment">//Spring中将List封装为ManagedList</span></span><br><span class="line">ManagedList&lt;Object&gt; target = <span class="hljs-keyword">new</span> ManagedList&lt;&gt;(nl.getLength());</span><br><span class="line">target.setSource(extractSource(collectionEle));</span><br><span class="line"><span class="hljs-comment">//设置集合目标数据类型</span></span><br><span class="line">target.setElementTypeName(defaultElementType);</span><br><span class="line">target.setMergeEnabled(parseMergeAttribute(collectionEle));</span><br><span class="line"><span class="hljs-comment">//具体的&lt;list&gt;元素解析</span></span><br><span class="line">parseCollectionElements(nl, target, bd, defaultElementType);</span><br><span class="line"><span class="hljs-keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//具体解析&lt;list&gt;集合元素，&lt;array&gt;、&lt;list&gt;和&lt;set&gt;都使用该方法解析</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseCollectionElements</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">NodeList elementNodes, Collection&lt;Object&gt; target, @Nullable BeanDefinition bd, String defaultElementType)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//遍历集合所有节点</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; elementNodes.getLength(); i++) &#123;</span><br><span class="line">Node node = elementNodes.item(i);</span><br><span class="line"><span class="hljs-comment">//节点不是description节点</span></span><br><span class="line"><span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">//将解析的元素加入集合中，递归调用下一个子元素</span></span><br><span class="line">target.add(parsePropertySubElement((Element) node, bd, defaultElementType));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过对 Spring Bean 配置信息转换的 Document 对象中的元素层层解析，Spring IOC 现在已经将 XML形式定义的 Bean 配置信息转换为 Spring IOC 所识别的数据结构——<code>BeanDefinition</code>，它是 Bean 配置信息中配置的 POJO 对象在 Spring IOC 容器中的映射，我们可以通过 <code>AbstractBeanDefinition</code> 为入口，看到了 IOC 容器进行索引、查询和操作。通过 Spring IOC 容器对 Bean 配置资源的解析后，IOC 容器大致完成了管理 Bean 对象的准备工作，即初始化过程，但是最为重要的依赖注入还没有发生，现在在 IOC 容器中<code>BeanDefinition</code> 存储的只是一些静态信息，接下来需要向容器注册 Bean 定义信息才能全部完成 IOC 容器的初始化过程</p></li><li><p>分配注册策略</p><p>让我们继续跟踪程序的执行顺序，接下来我们来分析<code>efaultBeanDefinitionDocumentReader</code> 对Bean 定义转换的 Document 对象解析的流程中，在其 <code>parseDefaultElement()</code>方法中完成对Document对象的解析后得到封装<code>BeanDefinition</code>的<code>BeanDefinitionHold</code>对象 ，然后调用<code>BeanDefinitionReaderUtils</code> 的 <code>registerBeanDefinition()</code> 方法向IOC容器注册解析的Bean ，<code>BeanDefinitionReaderUtils</code> 的注册的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//将解析的 BeanDefinitionHold 注册到容器中</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinition</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//获取解析的 BeanDefinition 的名称</span></span><br><span class="line">    String beanName = definitionHolder.getBeanName();</span><br><span class="line">    <span class="hljs-comment">//向 IOC 容器注册 BeanDefinition</span></span><br><span class="line">  registry.registerBeanDefinition(beanName,definitionHolder.getBeanDefinition());</span><br><span class="line">    <span class="hljs-comment">//如果解析的 BeanDefinition 有别名，向容器为其注册别名</span></span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    <span class="hljs-keyword">if</span> (aliases != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">        registry.registerAlias(beanName, alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用 <code>BeanDefinitionReaderUtils</code> 向 IOC 容器注册解析的 <code>BeanDefinition</code> 时，真正完成注册功能的是 <code>DefaultListableBeanFactory</code>。</p></li><li><p>向容器注册</p><p><code>DefaultListableBeanFactory</code> 中使用一个 HashMap 的集合对象存放 IOC 容器中注册解析的BeanDefinition，向 IOC 容器注册的主要源码如下：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/DefaultListableBeanFactory.png"><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//存储注册信息的BeanDefinition</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-number">256</span>);</span><br><span class="line"><span class="hljs-comment">//向IOC容器注册解析的BeanDefiniton</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinition</span><span class="hljs-params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.hasText(beanName, <span class="hljs-string">"Bean name must not be empty"</span>);</span><br><span class="line">    Assert.notNull(beanDefinition, <span class="hljs-string">"BeanDefinition must not be null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//校验解析的BeanDefiniton</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (beanDefinition <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                                                   <span class="hljs-string">"Validation of bean definition failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BeanDefinition oldBeanDefinition;</span><br><span class="line"></span><br><span class="line">    oldBeanDefinition = <span class="hljs-keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (oldBeanDefinition != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                                                   <span class="hljs-string">"Cannot register bean definition ["</span> + beanDefinition + <span class="hljs-string">"] for bean '"</span> + beanName +</span><br><span class="line">                                                   <span class="hljs-string">"': There is already ["</span> + oldBeanDefinition + <span class="hljs-string">"] bound."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">            <span class="hljs-comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.logger.warn(<span class="hljs-string">"Overriding user-defined bean definition for bean '"</span> + beanName +</span><br><span class="line">                                 <span class="hljs-string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">                                 oldBeanDefinition + <span class="hljs-string">"] with ["</span> + beanDefinition + <span class="hljs-string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!beanDefinition.equals(oldBeanDefinition)) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">                                 <span class="hljs-string">"' with a different definition: replacing ["</span> + oldBeanDefinition +</span><br><span class="line">                                 <span class="hljs-string">"] with ["</span> + beanDefinition + <span class="hljs-string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">                                  <span class="hljs-string">"' with an equivalent definition: replacing ["</span> + oldBeanDefinition +</span><br><span class="line">                                  <span class="hljs-string">"] with ["</span> + beanDefinition + <span class="hljs-string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">            <span class="hljs-comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">            <span class="hljs-comment">//注册的过程中需要线程同步，以保证数据的一致性</span></span><br><span class="line">            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.beanDefinitionMap) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">                List&lt;String&gt; updatedDefinitions = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-keyword">this</span>.beanDefinitionNames.size() + <span class="hljs-number">1</span>);</span><br><span class="line">                updatedDefinitions.addAll(<span class="hljs-keyword">this</span>.beanDefinitionNames);</span><br><span class="line">                updatedDefinitions.add(beanName);</span><br><span class="line">                <span class="hljs-keyword">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">                    Set&lt;String&gt; updatedSingletons = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(<span class="hljs-keyword">this</span>.manualSingletonNames);</span><br><span class="line">                    updatedSingletons.remove(beanName);</span><br><span class="line">                    <span class="hljs-keyword">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Still in startup registration phase</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">            <span class="hljs-keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">            <span class="hljs-keyword">this</span>.manualSingletonNames.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">this</span>.frozenBeanDefinitionNames = <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//检查是否有同名的BeanDefinition已经在IOC容器中注册</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (oldBeanDefinition != <span class="hljs-keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">        <span class="hljs-comment">//重置所有已经注册过的BeanDefinition的缓存</span></span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，Bean 配置信息中配置的 Bean 被解析过后，已经注册到 IOC 容器中，被容器管理起来，真正完成了 IOC 容器初始化所做的全部工作。现在 IOC 容器中已经建立了整个 Bean 的配置信息，这些<code>BeanDefinition</code> 信息已经可以使用，并且可以被检索，IOC 容器的作用就是对这些注册的 Bean 定义信息进行处理和维护。这些的注册的 Bean 定义信息是 IOC 容器控制反转的基础，正是有了这些注册的数据，容器才可以进行依赖注入。</p></li></ol></li></ol><ol start="3"><li><p><strong>基于Annotation的IOC初始化原理</strong></p><p>Spring IOC 容器对于类级别的注解和类内部的注解分以下两种处理策略：<br>1)、<strong>类级别的注解</strong>：如@Component、@Repository、@Controller、@Service 以及 JavaEE6 的<br>@ManagedBean 和@Named 注解，都是添加在类上面的类级别注解，Spring 容器根据注解的过滤规则扫描读取注解 Bean 定义类，并将其注册到 Spring IOC 容器中。<br>2)、<strong>类内部的注解</strong>：如@Autowire、@Value、@Resource 以及 EJB 和 WebService 相关的注解等，都是添加在类内部的字段或者方法上的类内部注解，SpringIOC 容器通过 Bean 后置注解处理器解析Bean 内部的注解。下面将根据这两种处理策略，分别分析 Spring 处理注解相关的源码。</p><ol><li><p><strong>定位 Bean 扫描路径</strong></p><p>在Spring中管理注解Bean定义的容器有两个：<code>AnnotationConfigApplicationContext</code>和<code>AnnotationConfigWebApplicationContex</code>。这两个类是专门处理 Spring 注解方式配置的容器，直接依赖于注解作为容器配置信息来源的 IOC 容器。<code>AnnotationConfigWebApplicationContext</code>是<code>AnnotationConfigApplicationContext</code> 的 Web 版本，两者的用法以及对注解的处理方式几乎没有差别。现在我们以 <code>AnnotationConfigApplicationContext</code> 为例看看它的源码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationConfigApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AnnotationConfigRegistry</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//保存一个读取注解的Bean定义读取器，并将其设置到容器中</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AnnotatedBeanDefinitionReader reader;</span><br><span class="line"><span class="hljs-comment">//保存一个扫描指定类路径中注解Bean定义的扫描器，并将其设置到容器中</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ClassPathBeanDefinitionScanner scanner;</span><br><span class="line"><span class="hljs-comment">//默认构造函数，初始化一个空容器，容器不包含任何 Bean 信息，需要在稍后通过调用其register()</span></span><br><span class="line"><span class="hljs-comment">//方法注册配置类，并调用refresh()方法刷新容器，触发容器对注解Bean的载入、解析和注册过程</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationConfigApplicationContext</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.reader = <span class="hljs-keyword">new</span> AnnotatedBeanDefinitionReader(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner = <span class="hljs-keyword">new</span> ClassPathBeanDefinitionScanner(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationConfigApplicationContext</span><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>(beanFactory);</span><br><span class="line"><span class="hljs-keyword">this</span>.reader = <span class="hljs-keyword">new</span> AnnotatedBeanDefinitionReader(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner = <span class="hljs-keyword">new</span> ClassPathBeanDefinitionScanner(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//最常用的构造函数，通过将涉及到的配置类传递给该构造函数，以实现将相应配置类中的Bean自动注册到容器中</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationConfigApplicationContext</span><span class="hljs-params">(Class&lt;?&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>();</span><br><span class="line">register(annotatedClasses);</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//该构造函数会自动扫描以给定的包及其子包下的所有类，并自动识别所有的Spring Bean，将其注册到容器中</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationConfigApplicationContext</span><span class="hljs-params">(String... basePackages)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>();</span><br><span class="line">scan(basePackages);</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEnvironment</span><span class="hljs-params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.setEnvironment(environment);</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.setEnvironment(environment);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner.setEnvironment(environment);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//为容器的注解Bean读取器和注解Bean扫描器设置Bean名称产生器</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBeanNameGenerator</span><span class="hljs-params">(BeanNameGenerator beanNameGenerator)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">getBeanFactory().registerSingleton(</span><br><span class="line">AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//为容器的注解Bean读取器和注解Bean扫描器设置作用范围元信息解析器</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setScopeMetadataResolver</span><span class="hljs-params">(ScopeMetadataResolver scopeMetadataResolver)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//为容器注册一个要被处理的注解Bean，新注册的Bean，必须手动调用容器的</span></span><br><span class="line"><span class="hljs-comment">//refresh()方法刷新容器，触发容器对新注册的Bean的处理</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(Class&lt;?&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line">Assert.notEmpty(annotatedClasses, <span class="hljs-string">"At least one annotated class must be specified"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.register(annotatedClasses);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//扫描指定包路径及其子包下的注解类，为了使新添加的类被处理，必须手动调用</span></span><br><span class="line"><span class="hljs-comment">//refresh()方法刷新容器</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">scan</span><span class="hljs-params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">Assert.notEmpty(basePackages, <span class="hljs-string">"At least one base package must be specified"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner.scan(basePackages);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;T&gt; annotatedClass, Object... constructorArguments)</span> </span>&#123;</span><br><span class="line">registerBean(<span class="hljs-keyword">null</span>, annotatedClass, constructorArguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(@Nullable String beanName, Class&lt;T&gt; annotatedClass, Object... constructorArguments)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.doRegisterBean(annotatedClass, <span class="hljs-keyword">null</span>, beanName, <span class="hljs-keyword">null</span>,</span><br><span class="line">bd -&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (Object arg : constructorArguments) &#123;</span><br><span class="line">bd.getConstructorArgumentValues().addGenericArgumentValue(arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(@Nullable String beanName, Class&lt;T&gt; beanClass, @Nullable Supplier&lt;T&gt; supplier,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">BeanDefinitionCustomizer... customizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.reader.doRegisterBean(beanClass, supplier, beanName, <span class="hljs-keyword">null</span>, customizers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的源码分析，我们可以看啊到 Spring 对注解的处理分为两种方式：</p><ul><li>直接将注解 Bean 注册到容器中: 可以在初始化容器时注册；也可以在容器创建之后手动调用注册方法向容器注册，然后通过手动刷新容器，使得容器对注册的注解 Bean 进行处理。</li><li>通过扫描指定的包及其子包下的所有类: 在初始化注解容器时指定要自动扫描的路径，如果容器创建以后向给定路径动态添加了注解 Bean，则需要手动调用容器扫描的方法，然后手动刷新容器，使得容器对所注册的 Bean 进行处理。接下来，将会对两种处理方式详细分析其实现过程。</li></ul></li><li><p><strong>读取Annotation元数据</strong></p><p>当创建注解处理容器时，如果传入的初始参数是具体的注解 Bean 定义类时，注解容器读取并注册。</p><p><strong><code>1) 、AnnotationConfigApplicationContext</code> 通过调用注解 Bean 定义读取器</strong> <code>AnnotatedBeanDefinitionReader</code> 的 <code>register()</code>方法向容器注册指定的注解 Bean，注解 Bean 定义读取器向容器注册注解 Bean 的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotatedBeanDefinitionReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//注册多个注解Bean定义类</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(Class&lt;?&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (Class&lt;?&gt; annotatedClass : annotatedClasses) &#123;</span><br><span class="line">registerBean(annotatedClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//注册一个注解Bean定义类</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;?&gt; annotatedClass)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;T&gt; annotatedClass, @Nullable Supplier&lt;T&gt; instanceSupplier)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, instanceSupplier, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;T&gt; annotatedClass, String name, @Nullable Supplier&lt;T&gt; instanceSupplier)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, instanceSupplier, name, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Bean定义读取器注册注解Bean定义的入口方法</span></span><br><span class="line"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;?&gt; annotatedClass, Class&lt;? extends Annotation&gt;... qualifiers)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, qualifiers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//Bean定义读取器向容器注册注解Bean定义类</span></span><br><span class="line"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;?&gt; annotatedClass, String name, Class&lt;? extends Annotation&gt;... qualifiers)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, <span class="hljs-keyword">null</span>, name, qualifiers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Bean定义读取器向容器注册注解Bean定义类</span></span><br><span class="line">&lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doRegisterBean</span><span class="hljs-params">(Class&lt;T&gt; annotatedClass, @Nullable Supplier&lt;T&gt; instanceSupplier, @Nullable String name,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">@Nullable Class&lt;? extends Annotation&gt;[] qualifiers, BeanDefinitionCustomizer... definitionCustomizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//根据指定的注解Bean定义类，创建Spring容器中对注解Bean的封装的数据结构</span></span><br><span class="line">AnnotatedGenericBeanDefinition abd = <span class="hljs-keyword">new</span> AnnotatedGenericBeanDefinition(annotatedClass);</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abd.setInstanceSupplier(instanceSupplier);</span><br><span class="line"><span class="hljs-comment">//解析注解Bean定义的作用域，若@Scope("prototype")，则Bean为原型类型；</span></span><br><span class="line"><span class="hljs-comment">//若@Scope("singleton")，则Bean为单态类型</span></span><br><span class="line">ScopeMetadata scopeMetadata = <span class="hljs-keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line"><span class="hljs-comment">//为注解Bean定义设置作用域</span></span><br><span class="line">abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line"><span class="hljs-comment">//为注解Bean定义生成Bean名称</span></span><br><span class="line">String beanName = (name != <span class="hljs-keyword">null</span> ? name : <span class="hljs-keyword">this</span>.beanNameGenerator.generateBeanName(abd, <span class="hljs-keyword">this</span>.registry));</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//处理注解Bean定义中的通用注解</span></span><br><span class="line">AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line"><span class="hljs-comment">//如果在向容器注册注解Bean定义时，使用了额外的限定符注解，则解析限定符注解。</span></span><br><span class="line"><span class="hljs-comment">//主要是配置的关于autowiring自动依赖注入装配的限定条件，即@Qualifier注解</span></span><br><span class="line"><span class="hljs-comment">//Spring自动依赖注入装配默认是按类型装配，如果使用@Qualifier则按名称</span></span><br><span class="line"><span class="hljs-keyword">if</span> (qualifiers != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (Class&lt;? extends Annotation&gt; qualifier : qualifiers) &#123;</span><br><span class="line"><span class="hljs-comment">//如果配置了@Primary注解，设置该Bean为autowiring自动依赖注入装//配时的首选</span></span><br><span class="line"><span class="hljs-keyword">if</span> (Primary.class == qualifier) &#123;</span><br><span class="line">abd.setPrimary(<span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果配置了@Lazy注解，则设置该Bean为非延迟初始化，如果没有配置，</span></span><br><span class="line"><span class="hljs-comment">//则该Bean为预实例化</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Lazy.class == qualifier) &#123;</span><br><span class="line">abd.setLazyInit(<span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果使用了除@Primary和@Lazy以外的其他注解，则为该Bean添加一</span></span><br><span class="line"><span class="hljs-comment">//个autowiring自动依赖注入装配限定符，该Bean在进autowiring</span></span><br><span class="line"><span class="hljs-comment">//自动依赖注入装配时，根据名称装配限定符指定的Bean</span></span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">abd.addQualifier(<span class="hljs-keyword">new</span> AutowireCandidateQualifier(qualifier));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (BeanDefinitionCustomizer customizer : definitionCustomizers) &#123;</span><br><span class="line">customizer.customize(abd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//创建一个指定Bean名称的Bean定义对象，封装注解Bean定义类数据</span></span><br><span class="line">BeanDefinitionHolder definitionHolder = <span class="hljs-keyword">new</span> BeanDefinitionHolder(abd, beanName);</span><br><span class="line"><span class="hljs-comment">//根据注解Bean定义类中配置的作用域，创建相应的代理对象</span></span><br><span class="line">definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line"><span class="hljs-comment">//向IOC容器注册注解Bean类定义对象</span></span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Environment <span class="hljs-title">getOrCreateEnvironment</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">Assert.notNull(registry, <span class="hljs-string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (registry <span class="hljs-keyword">instanceof</span> EnvironmentCapable) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ((EnvironmentCapable) registry).getEnvironment();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StandardEnvironment();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源码我们可以看出，注册注解 Bean 定义类的基本步骤：<br>a、需要使用注解元数据解析器解析注解 Bean 中关于作用域的配置。</p><p>b、使用 <code>AnnotationConfigUtils</code> 的 <code>processCommonDefinitionAnnotations()</code>方法处理注解 Bean 定义类中通用的注解。<br>c、使用 <code>AnnotationConfigUtils</code> 的 <code>applyScopedProxyMode()</code>方法创建对于作用域的代理对象。<br>d、通过 <code>BeanDefinitionReaderUtils</code> 向容器注册 Bean。</p><p><strong>2)、AnnotationScopeMetadataResolver 解析作用域元数据</strong></p><p><code>AnnotationScopeMetadataResolver</code> 通过 <code>resolveScopeMetadata()</code>方法解析注解 Bean 定义类的作用域元信息，即判断注册的 Bean 是原生类型(prototype)还是单态(singleton)类型，其源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析注解Bean定义类中的作用域元信息</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ScopeMetadata <span class="hljs-title">resolveScopeMetadata</span><span class="hljs-params">(BeanDefinition definition)</span> </span>&#123;</span><br><span class="line">    ScopeMetadata metadata = <span class="hljs-keyword">new</span> ScopeMetadata();</span><br><span class="line">    <span class="hljs-keyword">if</span> (definition <span class="hljs-keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">        AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition;</span><br><span class="line">        <span class="hljs-comment">//从注解Bean定义类的属性中查找属性为”Scope”的值，即@Scope注解的值</span></span><br><span class="line">        <span class="hljs-comment">//annDef.getMetadata().getAnnotationAttributes()方法将Bean</span></span><br><span class="line">        <span class="hljs-comment">//中所有的注解和注解的值存放在一个map集合中</span></span><br><span class="line">        AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(</span><br><span class="line">            annDef.getMetadata(), <span class="hljs-keyword">this</span>.scopeAnnotationType);</span><br><span class="line">        <span class="hljs-comment">//将获取到的@Scope注解的值设置到要返回的对象中</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (attributes != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            metadata.setScopeName(attributes.getString(<span class="hljs-string">"value"</span>));</span><br><span class="line">            <span class="hljs-comment">//获取@Scope注解中的proxyMode属性值，在创建代理对象时会用到</span></span><br><span class="line">            ScopedProxyMode proxyMode = attributes.getEnum(<span class="hljs-string">"proxyMode"</span>);</span><br><span class="line">            <span class="hljs-comment">//如果@Scope的proxyMode属性为DEFAULT或者NO</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (proxyMode == ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">                <span class="hljs-comment">//设置proxyMode为NO</span></span><br><span class="line">                proxyMode = <span class="hljs-keyword">this</span>.defaultProxyMode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//为返回的元数据设置proxyMode</span></span><br><span class="line">            metadata.setScopedProxyMode(proxyMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//返回解析的作用域元信息对象</span></span><br><span class="line">    <span class="hljs-keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中的 <code>annDef.getMetadata().getAnnotationAttributes()</code>方法就是获取对象中指定类型的注解的值。</p><p><strong>3)、AnnotationConfigUtils 处理注解 Bean 定义类中的通用注解</strong></p><p><code>AnnotationConfigUtils</code> 类的 <code>processCommonDefinitionAnnotations()</code>在向容器注册 Bean 之前，首先对注解 Bean 定义类中的通用 Spring 注解进行处理，源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//处理Bean定义中通用注解</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processCommonDefinitionAnnotations</span><span class="hljs-params">(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">AnnotationAttributes lazy = attributesFor(metadata, Lazy.class);</span><br><span class="line"><span class="hljs-comment">//如果Bean定义中有@Lazy注解，则将该Bean预实例化属性设置为@lazy注解的值</span></span><br><span class="line"><span class="hljs-keyword">if</span> (lazy != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">abd.setLazyInit(lazy.getBoolean(<span class="hljs-string">"value"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (abd.getMetadata() != metadata) &#123;</span><br><span class="line">lazy = attributesFor(abd.getMetadata(), Lazy.class);</span><br><span class="line"><span class="hljs-keyword">if</span> (lazy != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">abd.setLazyInit(lazy.getBoolean(<span class="hljs-string">"value"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果Bean定义中有@Primary注解，则为该Bean设置为autowiring自动依赖注入装配的首选对象</span></span><br><span class="line"><span class="hljs-keyword">if</span> (metadata.isAnnotated(Primary.class.getName())) &#123;</span><br><span class="line">abd.setPrimary(<span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果Bean定义中有@ DependsOn注解，则为该Bean设置所依赖的Bean名称，</span></span><br><span class="line"><span class="hljs-comment">//容器将确保在实例化该Bean之前首先实例化所依赖的Bean</span></span><br><span class="line">AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class);</span><br><span class="line"><span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">abd.setDependsOn(dependsOn.getStringArray(<span class="hljs-string">"value"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (abd <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">AbstractBeanDefinition absBd = (AbstractBeanDefinition) abd;</span><br><span class="line">AnnotationAttributes role = attributesFor(metadata, Role.class);</span><br><span class="line"><span class="hljs-keyword">if</span> (role != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">absBd.setRole(role.getNumber(<span class="hljs-string">"value"</span>).intValue());</span><br><span class="line">&#125;</span><br><span class="line">AnnotationAttributes description = attributesFor(metadata, Description.class);</span><br><span class="line"><span class="hljs-keyword">if</span> (description != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">absBd.setDescription(description.getString(<span class="hljs-string">"value"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4)、AnnotationConfigUtils 根据注解 Bean 定义类中配置的作用域为其应用相应的代理策略</strong></p><p><code>AnnotationConfigUtils</code> 类的 <code>applyScopedProxyMode()</code>方法根据注解 Bean 定义类中配置的作用域<code>@Scope</code> 注解的值，为 Bean 定义应用相应的代理模式，主要是在 Spring 面向切面编程(AOP)中使用。源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//根据作用域为Bean应用引用的代码模式</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> BeanDefinitionHolder <span class="hljs-title">applyScopedProxyMode</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取注解Bean定义类中@Scope注解的proxyMode属性值</span></span><br><span class="line">ScopedProxyMode scopedProxyMode = metadata.getScopedProxyMode();</span><br><span class="line"><span class="hljs-comment">//如果配置的@Scope注解的proxyMode属性值为NO，则不应用代理模式</span></span><br><span class="line"><span class="hljs-keyword">if</span> (scopedProxyMode.equals(ScopedProxyMode.NO)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> definition;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//获取配置的@Scope注解的proxyMode属性值，如果为TARGET_CLASS</span></span><br><span class="line"><span class="hljs-comment">//则返回true，如果为INTERFACES，则返回false</span></span><br><span class="line"><span class="hljs-keyword">boolean</span> proxyTargetClass = scopedProxyMode.equals(ScopedProxyMode.TARGET_CLASS);</span><br><span class="line"><span class="hljs-comment">//为注册的Bean创建相应模式的代理对象</span></span><br><span class="line"><span class="hljs-keyword">return</span> ScopedProxyCreator.createScopedProxy(definition, registry, proxyTargetClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段为 Bean 引用创建相应模式的代理，这里不做深入的分析。</p><p><strong>5)、BeanDefinitionReaderUtils 向容器注册 Bean</strong></p><p><code>BeanDefinitionReaderUtils</code> 主要是校验 <code>BeanDefinition</code> 信息，然后将 Bean 添加到容器中一个管理<code>BeanDefinition</code> 的 <code>HashMap</code> 中。</p></li><li><p><strong>扫描指定包并解析为 BeanDefinition</strong></p><p>当创建注解处理容器时，如果传入的初始参数是注解 Bean 定义类所在的包时，注解容器将扫描给定的包及其子包，将扫描到的注解 Bean 定义载入并注册。</p><p><strong>1)、ClassPathBeanDefinitionScanner 扫描给定的包及其子包</strong></p><p><code>AnnotationConfigApplicationContext</code> 通过调用类路径Bean定义扫描器<code>ClassPathBeanDefinitionScanner</code> 扫描给定包及其子包下的所有类，主要源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//创建一个类路径Bean定义扫描器</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathBeanDefinitionScanner</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>(registry, <span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//为容器创建一个类路径Bean定义扫描器，并指定是否使用默认的扫描过滤规则。</span></span><br><span class="line"><span class="hljs-comment">//即Spring默认扫描配置：@Component、@Repository、@Service、@Controller</span></span><br><span class="line"><span class="hljs-comment">//注解的Bean，同时也支持JavaEE6的@ManagedBean和JSR-330的@Named注解</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathBeanDefinitionScanner</span><span class="hljs-params">(BeanDefinitionRegistry registry, <span class="hljs-keyword">boolean</span> useDefaultFilters)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>(registry, useDefaultFilters, getOrCreateEnvironment(registry));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathBeanDefinitionScanner</span><span class="hljs-params">(BeanDefinitionRegistry registry, <span class="hljs-keyword">boolean</span> useDefaultFilters,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                                      Environment environment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>(registry, useDefaultFilters, environment,</span><br><span class="line">         (registry <span class="hljs-keyword">instanceof</span> ResourceLoader ? (ResourceLoader) registry : <span class="hljs-keyword">null</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathBeanDefinitionScanner</span><span class="hljs-params">(BeanDefinitionRegistry registry, <span class="hljs-keyword">boolean</span> useDefaultFilters,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                                      Environment environment, @Nullable ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(registry, <span class="hljs-string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">    <span class="hljs-comment">//为容器设置加载Bean定义的注册器</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.registry = registry;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">        registerDefaultFilters();</span><br><span class="line">    &#125;</span><br><span class="line">    setEnvironment(environment);</span><br><span class="line">    <span class="hljs-comment">//为容器设置资源加载器</span></span><br><span class="line">    setResourceLoader(resourceLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//调用类路径Bean定义扫描器入口方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">scan</span><span class="hljs-params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//获取容器中已经注册的Bean个数</span></span><br><span class="line">    <span class="hljs-keyword">int</span> beanCountAtScanStart = <span class="hljs-keyword">this</span>.registry.getBeanDefinitionCount();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//启动扫描器扫描给定包</span></span><br><span class="line">    doScan(basePackages);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Register annotation config processors, if necessary.</span></span><br><span class="line">    <span class="hljs-comment">//注册注解配置(Annotation config)处理器</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.includeAnnotationConfig) &#123;</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="hljs-keyword">this</span>.registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//返回注册的Bean个数</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.registry.getBeanDefinitionCount() - beanCountAtScanStart);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//类路径Bean定义扫描器扫描给定包及其子包</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="hljs-title">doScan</span><span class="hljs-params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">    Assert.notEmpty(basePackages, <span class="hljs-string">"At least one base package must be specified"</span>);</span><br><span class="line">    <span class="hljs-comment">//创建一个集合，存放扫描到Bean定义的封装类</span></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="hljs-comment">//遍历扫描所有给定的包</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">        <span class="hljs-comment">//调用父类ClassPathScanningCandidateComponentProvider的方法</span></span><br><span class="line">        <span class="hljs-comment">//扫描给定类路径，获取符合条件的Bean定义</span></span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">        <span class="hljs-comment">//遍历扫描到的Bean</span></span><br><span class="line">        <span class="hljs-keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">            <span class="hljs-comment">//获取Bean定义类中@Scope注解的值，即获取Bean的作用域</span></span><br><span class="line">            ScopeMetadata scopeMetadata = <span class="hljs-keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            <span class="hljs-comment">//为Bean设置注解配置的作用域</span></span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            <span class="hljs-comment">//为Bean生成名称</span></span><br><span class="line">            String beanName = <span class="hljs-keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line">            <span class="hljs-comment">//如果扫描到的Bean不是Spring的注解Bean，则为Bean设置默认值，</span></span><br><span class="line">            <span class="hljs-comment">//设置Bean的自动依赖注入装配属性等</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (candidate <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">                postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//如果扫描到的Bean是Spring的注解Bean，则处理其通用的Spring注解</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (candidate <span class="hljs-keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                <span class="hljs-comment">//处理注解Bean中通用的注解，在分析注解Bean定义类读取器时已经分析过</span></span><br><span class="line">                AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//根据Bean名称检查指定的Bean是否需要在容器中注册，或者在容器中冲突</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                BeanDefinitionHolder definitionHolder = <span class="hljs-keyword">new</span> BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">                <span class="hljs-comment">//根据注解中配置的作用域，为Bean应用相应的代理模式</span></span><br><span class="line">                definitionHolder =</span><br><span class="line">                    AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line">                beanDefinitions.add(definitionHolder);</span><br><span class="line">                <span class="hljs-comment">//向容器注册扫描到的Bean</span></span><br><span class="line">                registerBeanDefinition(definitionHolder, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类路径 Bean 定义扫描器 <code>ClassPathBeanDefinitionScanner</code> 主要通过<code>findCandidateComponents()</code>方法调用其父类 <code>ClassPathScanningCandidateComponentProvider</code> 类来扫描获取给定包及其子包下<br>的类。</p><p><strong>2)、ClassPathScanningCandidateComponentProvider 扫描给定包及其子包的类</strong></p><p><code>ClassPathScanningCandidateComponentProvider</code> 类的 <code>findCandidateComponents()</code>方法具体实现扫描给定类路径包的功能，主要源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//扫描给定类路径的包</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;BeanDefinition&gt; <span class="hljs-title">findCandidateComponents</span><span class="hljs-params">(String basePackage)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.componentsIndex != <span class="hljs-keyword">null</span> &amp;&amp; indexSupportsIncludeFilters()) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> addCandidateComponentsFromIndex(<span class="hljs-keyword">this</span>.componentsIndex, basePackage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> scanCandidateComponents(basePackage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Set&lt;BeanDefinition&gt; <span class="hljs-title">addCandidateComponentsFromIndex</span><span class="hljs-params">(CandidateComponentsIndex index, String basePackage)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//创建存储扫描到的类的集合</span></span><br><span class="line">    Set&lt;BeanDefinition&gt; candidates = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        Set&lt;String&gt; types = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="hljs-keyword">for</span> (TypeFilter filter : <span class="hljs-keyword">this</span>.includeFilters) &#123;</span><br><span class="line">            String stereotype = extractStereotype(filter);</span><br><span class="line">            <span class="hljs-keyword">if</span> (stereotype == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Failed to extract stereotype from "</span>+ filter);</span><br><span class="line">            &#125;</span><br><span class="line">            types.addAll(index.getCandidateTypes(basePackage, stereotype));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">boolean</span> traceEnabled = logger.isTraceEnabled();</span><br><span class="line">        <span class="hljs-keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class="line">        <span class="hljs-keyword">for</span> (String type : types) &#123;</span><br><span class="line">            <span class="hljs-comment">//为指定资源获取元数据读取器，元信息读取器通过汇编(ASM)读//取资源元信息</span></span><br><span class="line">            MetadataReader metadataReader = getMetadataReaderFactory().getMetadataReader(type);</span><br><span class="line">            <span class="hljs-comment">//如果扫描到的类符合容器配置的过滤规则</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                <span class="hljs-comment">//通过汇编(ASM)读取资源字节码中的Bean定义元信息</span></span><br><span class="line">                AnnotatedGenericBeanDefinition sbd = <span class="hljs-keyword">new</span> AnnotatedGenericBeanDefinition(</span><br><span class="line">                    metadataReader.getAnnotationMetadata());</span><br><span class="line">                <span class="hljs-keyword">if</span> (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                        logger.debug(<span class="hljs-string">"Using candidate component class from index: "</span> + type);</span><br><span class="line">                    &#125;</span><br><span class="line">                    candidates.add(sbd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                        logger.debug(<span class="hljs-string">"Ignored because not a concrete top-level class: "</span> + type);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                    logger.trace(<span class="hljs-string">"Ignored because matching an exclude filter: "</span> + type);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(<span class="hljs-string">"I/O failure during classpath scanning"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Set&lt;BeanDefinition&gt; <span class="hljs-title">scanCandidateComponents</span><span class="hljs-params">(String basePackage)</span> </span>&#123;</span><br><span class="line">    Set&lt;BeanDefinition&gt; candidates = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">            resolveBasePackage(basePackage) + <span class="hljs-string">'/'</span> + <span class="hljs-keyword">this</span>.resourcePattern;</span><br><span class="line">        Resource[] resources = getResourcePatternResolver().getResources(packageSearchPath);</span><br><span class="line">        <span class="hljs-keyword">boolean</span> traceEnabled = logger.isTraceEnabled();</span><br><span class="line">        <span class="hljs-keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class="line">        <span class="hljs-keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                logger.trace(<span class="hljs-string">"Scanning "</span> + resource);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (resource.isReadable()) &#123;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    MetadataReader metadataReader = getMetadataReaderFactory().getMetadataReader(resource);</span><br><span class="line">                    <span class="hljs-keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                        ScannedGenericBeanDefinition sbd = <span class="hljs-keyword">new</span> ScannedGenericBeanDefinition(metadataReader);</span><br><span class="line">                        sbd.setResource(resource);</span><br><span class="line">                        sbd.setSource(resource);</span><br><span class="line">                        <span class="hljs-keyword">if</span> (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                            <span class="hljs-keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                                logger.debug(<span class="hljs-string">"Identified candidate component class: "</span> + resource);</span><br><span class="line">                            &#125;</span><br><span class="line">                            candidates.add(sbd);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                            <span class="hljs-keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                                logger.debug(<span class="hljs-string">"Ignored because not a concrete top-level class: "</span> + resource);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                            logger.trace(<span class="hljs-string">"Ignored because not matching any filter: "</span> + resource);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">                        <span class="hljs-string">"Failed to read candidate component class: "</span> + resource, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                    logger.trace(<span class="hljs-string">"Ignored because not readable: "</span> + resource);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(<span class="hljs-string">"I/O failure during classpath scanning"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注册注解 BeanDefinition</strong></p><p><code>AnnotationConfigWebApplicationContext</code> 是 <code>AnnotationConfigApplicationContext</code> 的 Web 版，它们对于注解 Bean 的注册和扫描是基本相同的，但是 <code>AnnotationConfigWebApplicationContext</code>对注解 Bean 定义的载入稍有不同，<code>AnnotationConfigWebApplicationContext</code> 注入注解 Bean 定义<br>源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//载入注解Bean定义资源</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//为容器设置注解Bean定义读取器</span></span><br><span class="line">    AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory);</span><br><span class="line">    <span class="hljs-comment">//为容器设置类路径Bean定义扫描器</span></span><br><span class="line">    ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//获取容器的Bean名称生成器</span></span><br><span class="line">    BeanNameGenerator beanNameGenerator = getBeanNameGenerator();</span><br><span class="line">    <span class="hljs-comment">//为注解Bean定义读取器和类路径扫描器设置Bean名称生成器</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (beanNameGenerator != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">        scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">        beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//获取容器的作用域元信息解析器</span></span><br><span class="line">    ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver();</span><br><span class="line">    <span class="hljs-comment">//为注解Bean定义读取器和类路径扫描器设置作用域元信息解析器</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (scopeMetadataResolver != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">        scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.annotatedClasses.isEmpty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="hljs-string">"Registering annotated classes: ["</span> +</span><br><span class="line">                        StringUtils.collectionToCommaDelimitedString(<span class="hljs-keyword">this</span>.annotatedClasses) + <span class="hljs-string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.register(<span class="hljs-keyword">this</span>.annotatedClasses.toArray(<span class="hljs-keyword">new</span> Class&lt;?&gt;[<span class="hljs-keyword">this</span>.annotatedClasses.size()]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.basePackages.isEmpty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="hljs-string">"Scanning base packages: ["</span> +</span><br><span class="line">                        StringUtils.collectionToCommaDelimitedString(<span class="hljs-keyword">this</span>.basePackages) + <span class="hljs-string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.scan(<span class="hljs-keyword">this</span>.basePackages.toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-keyword">this</span>.basePackages.size()]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//获取容器定义的Bean定义资源路径</span></span><br><span class="line">    String[] configLocations = getConfigLocations();</span><br><span class="line">    <span class="hljs-comment">//如果定位的Bean定义资源路径不为空</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (configLocations != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (String configLocation : configLocations) &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                <span class="hljs-comment">//使用当前容器的类加载器加载定位路径的字节码类文件</span></span><br><span class="line">                Class&lt;?&gt; clazz = ClassUtils.forName(configLocation, getClassLoader());</span><br><span class="line">                <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(<span class="hljs-string">"Successfully resolved class for ["</span> + configLocation + <span class="hljs-string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                reader.register(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="hljs-string">"Could not load class for config location ["</span> + configLocation +</span><br><span class="line">                                 <span class="hljs-string">"] - trying package scan. "</span> + ex);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-comment">//如果容器类加载器加载定义路径的Bean定义资源失败</span></span><br><span class="line">                <span class="hljs-comment">//则启用容器类路径扫描器扫描给定路径包及其子包中的类</span></span><br><span class="line">                <span class="hljs-keyword">int</span> count = scanner.scan(configLocation);</span><br><span class="line">                <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                        logger.info(<span class="hljs-string">"No annotated classes found for specified class/package ["</span> + configLocation + <span class="hljs-string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        logger.info(<span class="hljs-string">"Found "</span> + count + <span class="hljs-string">" annotated classes in package ["</span> + configLocation + <span class="hljs-string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="4"><li><strong>容器初始化小结</strong></li></ol><p>现在通过上面的代码，总结一下 IOC 容器初始化的基本步骤：<br>1、初始化的入口在容器实现中的 <code>refresh()</code>调用来完成。<br>2、对 Bean 定义载入 IOC 容器使用的方法是 <code>loadBeanDefinition()</code>,其中的大致过程如下：通过 <code>ResourceLoader</code> 来完成资源文件位置的定位，<code>DefaultResourceLoader</code>是默认的实现，同时上下文本身就给出了 <code>ResourceLoader</code> 的实现，可以从类路径，文件系统,URL 等方式来定为资源位置。如果是 <code>XmlBeanFactory</code> 作为 IOC 容器，那么需要为它指定 Bean 定义的资源，也就是说Bean定义文件时通过抽象成Resource来被IOC容器处理的，容器通过<code>BeanDefinitionReader</code>来完成定义信息的解析和Bean信息的注册,往往使用的是<code>XmlBeanDefinitionReader</code> 来解析Bean的XML定义文件 - 实际的处理过程是委托给<code>BeanDefinitionParserDelegate</code>来完成的，从而得到 bean 的定义信息，这些信息在 Spring 中使用<code>BeanDefinition</code>对象来表示-这个名字可以让我们想到<code>loadBeanDefinition()</code>,<code>registerBeanDefinition()</code>这些相关方法。它们都是为处理 <code>BeanDefinitin</code> 服务的，容器解析得到 <code>BeanDefinition</code> 以后，需要把它在 IOC 容器中注册，这由 IOC 实现 <code>BeanDefinitionRegistry</code> 接口来实现。注册过程就是在 IOC 容器内部维护的一个 <code>HashMap</code> 来保存得到的 <code>BeanDefinition</code> 的过程。这个 HashMap 是 IOC 容器持有Bean 信息的场所，以后对 Bean 的操作都是围绕这个 <code>HashMap</code> 来实现的。然后我们就可以通过 <code>BeanFactory</code> 和 <code>ApplicationContext</code> 来享受到 Spring IOC 的服务了,在使用 IOC容器的时候，我们注意到除了少量粘合代码，绝大多数以正确 IOC 风格编写的应用程序代码完全不用关心如何到达工厂，因为容器将把这些对象与容器管理的其他对象钩在一起。基本的策略是把工厂放到已知的地方，最好是放在对预期使用的上下文有意义的地方，以及代码将实际需要访问工厂的地方。Spring本身提供了对声明式载入web应用程序用法的应用程序上下文,并将其存储在<code>ServletContext</code>中的框架实现。<br>以下是容器初始化全过程的时序图：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/spring_ioc_Timing.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渐入Spring-IOC&quot;&gt;&lt;a href=&quot;#渐入Spring-IOC&quot; class=&quot;headerlink&quot; title=&quot;渐入Spring-IOC&quot;&gt;&lt;/a&gt;渐入Spring-IOC&lt;/h2&gt;&lt;h3 id=&quot;一、IOC&quot;&gt;&lt;a href=&quot;#一、IOC&quot; c
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="IOC" scheme="http://yoursite.com/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>初识Spring-IOC、DI、AOP</title>
    <link href="http://yoursite.com/2019/08/21/Spring-2019-08-%E5%88%9D%E8%AF%86Spring-IOC%E3%80%81DI%E3%80%81AOP/"/>
    <id>http://yoursite.com/2019/08/21/Spring-2019-08-初识Spring-IOC、DI、AOP/</id>
    <published>2019-08-20T17:20:57.000Z</published>
    <updated>2019-08-27T10:48:05.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IOC-Inversion-of-Control-控制反转"><a href="#IOC-Inversion-of-Control-控制反转" class="headerlink" title="IOC(Inversion of Control)控制反转"></a>IOC(Inversion of Control)控制反转</h3><p>所谓控制反转，就是把原先我们代码里面需要实现的对象创建、依赖的代码，反转给容器来帮忙实现。那么必然的我们需要创建一个容器，同时需要一种描述来让容器知道需要创建的对象与对象的关系。这个描述最具体表现就是我们所看到的配置文件。</p><h5 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h5><ul><li>@Component ：组件通用注解，常用于Model类</li><li>@Controller ：常用于对Controller实现类进行标注</li><li>@Service：常用于对Service实现类进行标注</li><li>@Repository：常用于对DAO实现类进行标注</li></ul><h3 id="DI-Dependency-Injection-依赖注入"><a href="#DI-Dependency-Injection-依赖注入" class="headerlink" title="DI(Dependency Injection)依赖注入"></a>DI(Dependency Injection)依赖注入</h3><p>指对象是被动接受依赖类而不是自己主动去找，换句话说就是指对象不是从容器中查找它依赖的类，而是在容器实例化对象的时候主动将它依赖的类注入给它。</p><h5 id="常用注解-1"><a href="#常用注解-1" class="headerlink" title="常用注解"></a>常用注解</h5><ul><li>@Value ：注入普通类型属性</li><li>@Resource ：注入对象类型</li><li>@Autowired ：注入对象类型，默认按照类型注入。结合@Qualifier注解完成按名称的注入。</li></ul><h3 id="Aop-aspect-object-programming-面向切面编程"><a href="#Aop-aspect-object-programming-面向切面编程" class="headerlink" title="Aop(aspect object programming)面向切面编程"></a>Aop(aspect object programming)面向切面编程</h3><p>AOP 是 OOP 的延续，是 Aspect Oriented Programming 的缩写，意思是面向切面编程。可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。AOP设计模式孜孜不倦追求的是调用者和被调用者之间的解耦，AOP 可以说也是这种目标的一种实现。我们现在做的一些非业务，如：日志、事务、安全等都会写在业务代码中(也即是说，这些非业务类横切于业务类)，但这些代码往往是重复，复制——粘贴式的代码会给程序的维护带来不便, AOP 就实现了把这些业务需求与系统需求分开来做。这种解决的方式也称代理机制。 </p><h4 id="AOP-中必须明白的几个概念"><a href="#AOP-中必须明白的几个概念" class="headerlink" title="AOP 中必须明白的几个概念"></a>AOP 中必须明白的几个概念</h4><ol><li><p>切面（Aspect）</p><p>官方的抽象定义为“一个关注点的模块化，这个关注点可能会横切多个对象”。“切面”在ApplicationContext 中<a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a>来配置。 </p></li><li><p>连接点（Joinpoint）</p><p>程序执行过程中的某一行为，例如，MemberService .get 的调用或者 </p><p>MemberService .delete 抛出异常等行为。</p></li><li><p>通知（Advice）</p><p>“切面”对于某个“连接点”所产生的动作。其中，一个“切面”可以包含多个“Advice”。</p></li><li><p>切入点（Pointcut）</p><p>匹配连接点的断言，在 AOP 中通知和一个切入点表达式关联。切面中的所有通知所关注的连接点，都由切入点表达式来决定。</p></li><li><p>目标对象（Target Object）</p><p>被一个或者多个切面所通知的对象。例如，AServcieImpl 和 BServiceImpl，当然在实际运行时，Spring AOP 采用代理实现，实际 AOP 操作的是 TargetObject 的代理对象。</p></li><li><p>AOP 代理（AOP Proxy）</p><p>在 Spring AOP 中有两种代理方式，JDK 动态代理和 CGLib 代理。默认情况下，TargetObjec实现了接口时，则采用 JDK 动态代理，例如，AServiceImpl；反之，采用 CGLib 代理，例如，BServiceImpl。 强制使用 CGLib 代理需要将 <a href="aop:config" target="_blank" rel="noopener">aop:config</a>的 proxy-target-class 属性设为 true。</p></li><li><p>通知类型</p><ul><li><p>前置通知（Before Advice）</p><p>在某连接点（JoinPoint）之前执行的通知，但这个通知不能阻止连接点前的执行。ApplicationContext 中在<a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a>里面使用<a href="aop:before" target="_blank" rel="noopener">aop:before</a>元素进行声明。例如，TestAspect 中的 doBefore 方法。</p></li><li><p>后置通知（After Advice）</p><p>当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。ApplicationContext 中在 </p><p><a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a>里面使用<a href="aop:after" target="_blank" rel="noopener">aop:after</a>元素进行声明。例如，ServiceAspect 中的 returnAfter 方法，所 </p><p>以 Teser 中调用 UserService.delete 抛出异常时，returnAfter 方法仍然执行。 </p></li><li><p>返回后通知（After Return Advice）</p><p>在某连接点正常完成后执行的通知，不包括抛出异常的情况。ApplicationContext 中在<a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a> </p><p>里面使用<after-returning>元素进行声明。 </after-returning></p></li><li><p>环绕通知（Around Advice）</p><p>包围一个连接点的通知，类似 Web 中 Servlet 规范中的 Filter 的 doFilter 方法。可以在方法的调用前 </p><p>后完成自定义的行为，也可以选择不执行。ApplicationContext 中在<a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a>里面使用 </p><p><a href="aop:around" target="_blank" rel="noopener">aop:around</a>元素进行声明。例如，ServiceAspect 中的 around 方法。 </p></li><li><p>异常通知（After Throwing Advice）</p><p>在 方 法 抛 出 异 常 退 出 时 执 行 的 通 知 。 ApplicationContext 中 在 <a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a> 里 面 使 用 </p><p><a href="aop:after-throwing" target="_blank" rel="noopener">aop:after-throwing</a>元素进行声明。例如，ServiceAspect 中的 returnThrow 方法。 </p><p>注：可以将多个通知应用到一个目标对象上，即可以将多个切面织入到同一目标对象。</p></li></ul></li></ol><h5 id="基于XML的注入方式"><a href="#基于XML的注入方式" class="headerlink" title="基于XML的注入方式"></a>基于XML的注入方式</h5><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span></span></span><br><span class="line"><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 注解驱动加上这句话 --&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--&lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xxx.xxx.aop.aspect.XmlAspect"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"xmlAspect"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--AOP配置 --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!--声明一个切面,并注入切面Bean,相当于@Aspect --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"xmlAspect"</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!--配置一个切入点,相当于@Pointcut --&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"simplePointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* com.xxx.xxx.aop.service..*(..))"</span>/&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!--配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"before"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"after"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"afterReturn"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"afterThrow"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">"ex"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"around"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h5><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//声明这是一个组件</span></span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-comment">//声明这是一个切面Bean</span></span><br><span class="line"><span class="hljs-meta">@Aspect</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArgsAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Logger log = Logger.getLogger(ArgsAspect.class);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></span><br><span class="line"><span class="hljs-meta">@Pointcut</span>(<span class="hljs-string">"execution(* com.xxx.xxx.aop.service..*(..))"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aspect</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置前置通知,拦截返回值为com.xxx.xxx.model.Member的方法</span></span><br><span class="line"><span class="hljs-meta">@Before</span>(<span class="hljs-string">"execution(com.xxx.xxx.model.Member com.gupaoedu.vip.aop.service..*(..))"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeReturnUser</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">log.info(<span class="hljs-string">"beforeReturnUser "</span> + joinPoint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置前置通知,拦截参数为com.xxx.xxx.model.Member的方法</span></span><br><span class="line"><span class="hljs-meta">@Before</span>(<span class="hljs-string">"execution(* com.xxx.xxx.aop.service..*(com.xxx.xxx.model.Member))"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeArgUser</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">log.info(<span class="hljs-string">"beforeArgUser "</span> + joinPoint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中</span></span><br><span class="line"><span class="hljs-meta">@Before</span>(<span class="hljs-string">"aspect()&amp;&amp;args(id)"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeArgId</span><span class="hljs-params">(JoinPoint joinPoint, <span class="hljs-keyword">long</span> id)</span></span>&#123;</span><br><span class="line">log.info(<span class="hljs-string">"beforeArgId "</span> + joinPoint + <span class="hljs-string">"\tID:"</span> + id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="附-基于注解开发的细节"><a href="#附-基于注解开发的细节" class="headerlink" title="附: 基于注解开发的细节"></a>附: 基于注解开发的细节</h3><ol><li>引入约束</li></ol><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"</span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>开启注解扫描</li></ol><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.xxx.xxx"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>其他附加属性</li></ol><p>@Scope ：在类上添加的，控制类生成的时候采用单例还是多例。取值：</p><blockquote><p>singleton ：单例<br>prototype ：多例<br>request ：request域，需要在web环境<br>session ：session域，需要在web环境<br>application： context域，需要在web环境<br>globalsession 集群环境的session域，需要在web环境</p></blockquote><p>@PostConstruct ：Bean生命周期中的初始化阶段执行,相当于init-method</p><p>@PreDestroy ：Bean生命周期中的销毁阶段执行,相当于destroy-method</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;IOC-Inversion-of-Control-控制反转&quot;&gt;&lt;a href=&quot;#IOC-Inversion-of-Control-控制反转&quot; class=&quot;headerlink&quot; title=&quot;IOC(Inversion of Control)控制反转&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="IOC" scheme="http://yoursite.com/tags/IOC/"/>
    
      <category term="DI" scheme="http://yoursite.com/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码分析</title>
    <link href="http://yoursite.com/2019/08/12/Spring-2019-08-Spring%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2019/08/12/Spring-2019-08-Spring源码初探/</id>
    <published>2019-08-12T09:42:08.000Z</published>
    <updated>2019-08-20T17:17:52.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring初探"><a href="#Spring初探" class="headerlink" title="Spring初探"></a>Spring初探</h2><p>全文参考Spring官方文档：</p><p><a href="https://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/html/index.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/html/index.html</a></p><h3 id="一、Spring5-框架介绍"><a href="#一、Spring5-框架介绍" class="headerlink" title="一、Spring5 框架介绍"></a>一、Spring5 框架介绍</h3><p><img src="https://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/html/images/spring-overview.png" alt></p><h4 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h4><p>由spring-beans、spring-core、spring-context和spring-expression（Spring Expression Language, SpEL） 4 个模块组成。<br>spring-core 和 spring-beans 模块是 Spring 框架的核心模块，包含了控制反转（Inversion ofControl, IOC）和依赖注入（Dependency Injection, DI）。<br>BeanFactory 接口是 Spring 框架中的核心接口，它是工厂模式的具体实现。BeanFactory 使用控制反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离。但 BeanFactory 容器实例化后并不会自动实例化 Bean，只有当 Bean 被使用时 BeanFactory 容器才会对该 Bean 进行实例化与依赖关系的装配。</p><ol><li>spring-context 模块构架于核心模块之上，他扩展了 BeanFactory，为她添加了 Bean 生命周期控制、框架事件体系以及资源加载透明化等功能。此外该模块还提供了许多企业级支持，如邮件访问、远程访问、任务调度等，ApplicationContext 是该模块的核心接口，她的超类是 BeanFactory。与BeanFactory 不同，ApplicationContext 容器实例化后会自动对所有的单实例 Bean 进行实例化与依赖关系的装配，使之处于待用状态。</li><li>spring-context-support 模块是对 Spring IOC 容器的扩展支持，以及 IOC 子容器。</li><li>spring-context-indexer 模块是 Spring 的类管理组件和 Classpath 扫描。</li><li>spring-expression 模块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等。它的语法类似于传统 EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。这种语言的特性是基于 Spring 产品的需求而设计，他可以非常方便地同 Spring IOC 进行交互。</li></ol><h4 id="AOP-和设备支持"><a href="#AOP-和设备支持" class="headerlink" title="AOP 和设备支持"></a>AOP 和设备支持</h4><p>由 spring-aop、spring-aspects 和 spring-instrument 3 个模块组成。</p><ol><li>spring-aop 是 Spring 的另一个核心模块，是 AOP 主要的实现模块。作为继 OOP 后，对程序员影 响最大的编程思想之一，AOP 极大地开拓了人们对于编程的思路。在 Spring 中，他是以 JVM 的动态代理技术为基础，然后设计出了一系列的 AOP 横切实现，比如前置通知、返回通知、异常通知等，同时，Pointcut 接口来匹配切入点，可以使用现有的切入点来设计横切面，也可以扩展相关方法根据需求 进行切入。 </li><li>spring-aspects 模块集成自 AspectJ 框架，主要是为 Spring AOP 提供多种 AOP 实现方法。 </li><li>spring-instrument 模块是基于 JAVA SE 中的”java.lang.instrument”进行设计的，应该算是 AOP 的一个支援模块，主要作用是在 JVM 启用时，生成一个代理类，程序员通过代理类在运行时修改类的 字节，从而改变一个类的功能，实现 AOP 的功能。在分类里，我把他分在了 AOP 模块下，在 Spring 官 方文档里对这个地方也有点含糊不清，这里是纯个人观点。</li></ol><h4 id="数据访问与集成"><a href="#数据访问与集成" class="headerlink" title="数据访问与集成"></a>数据访问与集成</h4><p>由 spring-jdbc、spring-tx、spring-orm、spring-jms 和 spring-oxm 5 个模块组成。 </p><ol><li>spring-jdbc 模块是 Spring 提供的 JDBC 抽象框架的主要实现模块，用于简化 Spring JDBC 操作 。 主要是提供 JDBC 模板方式、关系数据库对象化方式、SimpleJdbc 方式、事务管理来简化 JDBC 编程， 主要实现类是 JdbcTemplate、SimpleJdbcTemplate 以及 NamedParameterJdbcTemplate。 spring-tx 模块是 Spring JDBC 事务控制实现模块。使用 Spring 框架，它对事务做了很好的封装， 通过它的 AOP 配置，可以灵活的配置在任何一层；但是在很多的需求和应用，直接使用 JDBC 事务控 制还是有其优势的。其实，事务是以业务逻辑为基础的；一个完整的业务应该对应业务层里的一个方法； 如果业务操作失败，则整个事务回滚；所以，事务控制是绝对应该放在业务层的；但是，持久层的设计 则应该遵循一个很重要的原则：保证操作的原子性，即持久层里的每个方法都应该是不可以分割的。所 以，在使用 Spring JDBC 事务控制时，应该注意其特殊性。</li><li>spring-orm 模块是 ORM 框架支持模块，主要集成 Hibernate, Java Persistence API (JPA) 和 Java Data Objects (JDO) 用于资源管理、数据访问对象(DAO)的实现和事务策略。</li><li>spring-oxm 模块主要提供一个抽象层以支撑 OXM（OXM 是 Object-to-XML-Mapping 的缩写， 它是一个 O/M-mapper，将 java 对象映射成 XML 数据，或者将 XML 数据映射成 java 对象），例如： JAXB, Castor, XMLBeans, JiBX 和 XStream 等。</li><li>spring-jms 模块（Java Messaging Service）能够发送和接收信息，自 Spring Framework 4.1 以 后，他还提供了对 spring-messaging 模块的支撑。</li></ol><h4 id="Web-组件"><a href="#Web-组件" class="headerlink" title="Web 组件"></a>Web 组件</h4><p>由 spring-web、spring-webmvc、spring-websocket 和 spring-webflux 4 个模块组成。 </p><ol><li>spring-web 模块为 Spring 提供了最基础 Web 支持，主要建立于核心容器之上，通过 Servlet 或 者 Listeners 来初始化 IOC 容器，也包含一些与 Web 相关的支持。 </li><li>spring-webmvc 模块众所周知是一个的 Web-Servlet 模块，实现了 Spring MVC （model-view-Controller）的 Web 应用。 </li><li>spring-websocket 模块主要是与 Web 前端的全双工通讯的协议。 </li><li>spring-webflux 是一个新的非堵塞函数式 Reactive Web 框架，可以用来建立异步的，非阻塞，事件驱动的服务，并且扩展性非常好。</li></ol><h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p>即 spring-test 模块，主要为测试提供支持的，毕竟在不需要发布（程序）到你的应用服务器或者连接到其他企业设施的情况下能够执行一些集成测试或者其他测试对于任何企业都是非常重要的。</p><h4 id="集成兼容"><a href="#集成兼容" class="headerlink" title="集成兼容"></a>集成兼容</h4><p>即 spring-framework-bom 模块，Bill of Materials.解决 Spring 的不同模块依赖版本不同问题。</p><h4 id="各模块之间的依赖关系"><a href="#各模块之间的依赖关系" class="headerlink" title="各模块之间的依赖关系"></a>各模块之间的依赖关系</h4><img src="/2019/08/12/Spring-2019-08-Spring源码初探/spring-model.jpg" title="模块依赖关系图"><h3 id="Spring-版本命名规则"><a href="#Spring-版本命名规则" class="headerlink" title="Spring 版本命名规则"></a>Spring 版本命名规则</h3><table><thead><tr><th>描述方式</th><th>说明</th><th>含义</th></tr></thead><tbody><tr><td>Snapshot</td><td>快照版</td><td>尚不不稳定、尚处于开发中的版本</td></tr><tr><td>Release</td><td>稳定版</td><td>功能相对稳定，可以对外发行，但有时间限制</td></tr><tr><td>GA</td><td>正式版</td><td>代表广泛可用的稳定版(General Availability)</td></tr><tr><td>M</td><td>里程碑版</td><td>(M 是 Milestone 的意思）具有一些全新的功能或是具有里程碑意义 的版本。</td></tr><tr><td>RC</td><td>终测版</td><td>Release Candidate（最终测试），即将作为正式版发布。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring初探&quot;&gt;&lt;a href=&quot;#Spring初探&quot; class=&quot;headerlink&quot; title=&quot;Spring初探&quot;&gt;&lt;/a&gt;Spring初探&lt;/h2&gt;&lt;p&gt;全文参考Spring官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.s
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（九）：观察者模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（九）：观察者模式/</id>
    <published>2019-08-08T09:35:42.000Z</published>
    <updated>2019-08-08T13:20:04.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>观察者模式（Observer Pattern）定义了对象之间的一对多依赖，让多个观察者对象同 时监听一个主体对象，当主体对象发生变化时，它的所有依赖者（观察者）都会收到通 知并更新，属于行为型模式。观察者模式有时也叫做发布订阅模式。观察者模式主要用 于在关联行为之间建立一套触发机制的场景。</p><h3 id="JDK-原生支持实现样例"><a href="#JDK-原生支持实现样例" class="headerlink" title="JDK 原生支持实现样例"></a>JDK 原生支持实现样例</h3><p>被观察者，也称发布者</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 被观察者对象</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-8.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteObservable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 发布一个事件</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">publishEvent</span><span class="hljs-params">(ObserveContext context)</span></span>&#123;</span><br><span class="line">        setChanged();</span><br><span class="line">        System.out.println(<span class="hljs-string">"发布一个事件"</span>+context.getName());</span><br><span class="line">        notifyObservers(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者，也称订阅者</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 观察者</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-8.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String name ;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteObserver</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        ConcreteObservable observable = (ConcreteObservable) o;</span><br><span class="line">        ObserveContext context = (ObserveContext) arg;</span><br><span class="line">        System.out.println(name+<span class="hljs-string">"已接收到"</span>+context.getName()+<span class="hljs-string">"的事件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义参数、上下文</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 发布订阅上下文</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-8.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObserveContext</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ObserveContext</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始测试</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 测试观察者</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-8.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObserver</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObserveContext context = <span class="hljs-keyword">new</span> ObserveContext(<span class="hljs-string">"Event 1"</span>);</span><br><span class="line">        ConcreteObservable observable =<span class="hljs-keyword">new</span> ConcreteObservable();</span><br><span class="line">        ConcreteObserver observer = <span class="hljs-keyword">new</span> ConcreteObserver(<span class="hljs-string">"观察者一号"</span>);</span><br><span class="line">        ConcreteObserver observer2 = <span class="hljs-keyword">new</span> ConcreteObserver(<span class="hljs-string">"观察者二号"</span>);</span><br><span class="line">        observable.addObserver(observer);</span><br><span class="line">        observable.addObserver(observer2);</span><br><span class="line">        observable.publishEvent(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console打印结果：</p><blockquote><p>发布一个事件Event 1<br>观察者二号已接收到Event 1的事件<br>观察者一号已接收到Event 1的事件</p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/2019/08/08/design-2019-08-设计模式（九）：观察者模式/observer.png" title="JDK观察者模式实现类图"><p>原生的观察者模式是线程安全的。但在数据量大、多线程模式下，需要考虑性能问题。可以选择<code>Object.notify()</code>机制代替之。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者" scheme="http://yoursite.com/tags/%E8%A7%82%E5%AF%9F%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（八）：策略模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（八）：策略模式/</id>
    <published>2019-08-08T09:03:44.000Z</published>
    <updated>2019-08-08T09:11:57.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式（Strategy Pattern）是指定义了算法家族、分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的用户。</p><h3 id="策略模式的应用场景"><a href="#策略模式的应用场景" class="headerlink" title="策略模式的应用场景"></a>策略模式的应用场景</h3><p>1、假如系统中有很多类，而他们的区别仅仅在于他们的行为不同。 </p><p>2、一个系统需要动态地在几种算法中选择一种。 </p><h3 id="策略模式在-JDK-源码中的体现"><a href="#策略模式在-JDK-源码中的体现" class="headerlink" title="策略模式在 JDK 源码中的体现"></a>策略模式在 JDK 源码中的体现</h3><p>首先来看一个比较常用的比较器 Comparator 接口，我们看到的一个大家常用的compare()方法，就是一个策略抽象实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123; </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>; </span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Comparator 抽象下面有非常多的实现类，我们经常会把 Comparator 作为参数传入作为排序策略，例如 Arrays 类的 parallelSort 方法等：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Arrays</span> </span>&#123; </span><br><span class="line">    ... </span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parallelSort</span><span class="hljs-params">(T[] a, <span class="hljs-keyword">int</span> fromIndex, <span class="hljs-keyword">int</span> toIndex, Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; cmp)</span> </span>&#123;</span><br><span class="line">    ... </span><br><span class="line">    &#125;</span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略模式在-Spring-源码中的应用"><a href="#策略模式在-Spring-源码中的应用" class="headerlink" title="策略模式在 Spring 源码中的应用"></a>策略模式在 Spring 源码中的应用</h3><p>Spring 的初始化也采用了策略模式，不同的类型的类采用不同的初始化策略。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InstantiationStrategy</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function">Object <span class="hljs-title">instantiate</span><span class="hljs-params">(RootBeanDefinition var1, @Nullable String var2, BeanFactory var3)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="hljs-function">Object <span class="hljs-title">instantiate</span><span class="hljs-params">(RootBeanDefinition var1, @Nullable String var2, BeanFactory var3, Constructor&lt;?&gt; var4, @Nullable Object... var5)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="hljs-function">Object <span class="hljs-title">instantiate</span><span class="hljs-params">(RootBeanDefinition var1, @Nullable String var2, BeanFactory var3, @Nullable Object var4, Method var5, @Nullable Object... var6)</span> <span class="hljs-keyword">throws</span> BeansException</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顶层的策略抽象非常简单，但是它下面有两种策略 SimpleInstantiationStrategy 和CglibSubclassingInstantiationStrategy</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleInstantiationStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InstantiationStrategy</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CglibSubclassingInstantiationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleInstantiationStrategy</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明在实际应用中多种策略之间还可以继承使用</p><h3 id="策略模式的优缺点"><a href="#策略模式的优缺点" class="headerlink" title="策略模式的优缺点"></a>策略模式的优缺点</h3><p>优点： </p><p>1、策略模式符合开闭原则。 </p><p>2、避免使用多重条件转移语句，如 if…else…语句、switch 语句 </p><p>3、使用策略模式可以提高算法的保密性和安全性。 </p><p>缺点： </p><p>1、客户端必须知道所有的策略，并且自行决定使用哪一个策略类。 </p><p>2、代码中会产生非常多策略类，增加维护难度。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;p&gt;策略模式（Strategy Pattern）是指定义了算法家族、分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略" scheme="http://yoursite.com/tags/%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（七）：委派模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（七）：委派模式/</id>
    <published>2019-08-08T09:01:24.000Z</published>
    <updated>2019-08-08T09:02:56.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="委派模式"><a href="#委派模式" class="headerlink" title="委派模式"></a>委派模式</h2><p>委派模式（Delegate Pattern）的基本作用就是负责任务的调用和分配任务，跟代理模式很像，可以看做是一种特殊情况下的静态代理的全权代理，但是代理模式注重过程，而委派模式注重结果。委派模式在 Spring 中应用非常多，大家常用的 DispatcherServlet 其实就是用到了委派模式。现实生活中也常有委 派的场景发生，例如：老板（Boss）给项目经理（Leader）下达任务，项目经理会根据实际情况给每个员工派发工作任务，待员工把工作任务完成之后，再由项目经理汇报工作进度和结果给老板。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;委派模式&quot;&gt;&lt;a href=&quot;#委派模式&quot; class=&quot;headerlink&quot; title=&quot;委派模式&quot;&gt;&lt;/a&gt;委派模式&lt;/h2&gt;&lt;p&gt;委派模式（Delegate Pattern）的基本作用就是负责任务的调用和分配任务，跟代理模式很像，可以看做是一种特殊情况下
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="委派" scheme="http://yoursite.com/tags/%E5%A7%94%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（六）：原型模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（六）：原型模式/</id>
    <published>2019-08-08T08:57:16.000Z</published>
    <updated>2019-08-08T09:00:20.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>原型模式（Prototype Pattern）是指原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</li><li>调用者不需要知道任何创建细节</li><li>属于创建型模式</li></ol><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>类初始化小号资源较多</li><li>new产生的一个对象需要非常繁琐的过程（数据准备、访问权限等）</li><li>构造函数比较复杂</li><li>循环体中产生大量对象时</li></ol><h3 id="常见原型模式工具类"><a href="#常见原型模式工具类" class="headerlink" title="常见原型模式工具类"></a>常见原型模式工具类</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtil.copy();</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.paseObject();</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Guava</span><br></pre></td></tr></table></figure><h3 id="利用Java提供的Cloneable接口实现"><a href="#利用Java提供的Cloneable接口实现" class="headerlink" title="利用Java提供的Cloneable接口实现"></a>利用Java提供的Cloneable接口实现</h3><h4 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">shallowClone</span><span class="hljs-params">(Test target)</span></span>&#123;</span><br><span class="line">    Test test = <span class="hljs-keyword">new</span> Test();</span><br><span class="line">    test.a = target.a;<span class="hljs-comment">//普通字段</span></span><br><span class="line">    test.object = target.object;<span class="hljs-comment">//对象字段，拷贝的是引用地址</span></span><br><span class="line">    <span class="hljs-keyword">return</span>  test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">deepClone</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(<span class="hljs-keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);</span><br><span class="line"></span><br><span class="line">        QiTianDaSheng copy = (QiTianDaSheng)ois.readObject();</span><br><span class="line">        copy.birthday = <span class="hljs-keyword">new</span> Date();</span><br><span class="line">        <span class="hljs-keyword">return</span> copy;</span><br><span class="line">    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;<span class="hljs-keyword">finally</span>&#123;</span><br><span class="line">        ...close;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深克隆例子"><a href="#深克隆例子" class="headerlink" title="深克隆例子"></a>深克隆例子</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList.clone();<span class="hljs-comment">//ArrayList重写了clone方法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="原型模式" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（五）：模板方法模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（五）：模板方法模式/</id>
    <published>2019-08-08T08:55:17.000Z</published>
    <updated>2019-08-08T09:11:57.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>模板模式通常又叫模板方法模式（Template Method Pattern）是指定义一个算法的骨架，并允许子类为一个或者多个步骤提供实现。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤，属于行为性设计模式。模板方法适用于以下应用场景： </p><p>1、一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。 </p><p>2、各子类中公共的行为被提取出来并集中到一个公共的父类中，从而避免代码重复。 </p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ol><li>定义模板</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstTemplateMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">templateMethod1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//抽象业务逻辑与模板逻辑灵活应用</span></span><br><span class="line">        p = p+<span class="hljs-number">10</span>;</span><br><span class="line">        p = method1(p);</span><br><span class="line">        print(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">int</span> <span class="hljs-title">method1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>&#123;</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义模板第一个业务类</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplateMethod1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstTemplateMethod</span></span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">method1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="hljs-string">"templateMethod1 p="</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> p+<span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义模板第二个业务类</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplateMethod2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstTemplateMethod</span></span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">method1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="hljs-string">"templateMethod2 p="</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> p+<span class="hljs-number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>定义模板第n个业务类….</li><li>测试</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstTemplateMethod test = <span class="hljs-keyword">new</span> TemplateMethod1();</span><br><span class="line">        test.templateMethod1(<span class="hljs-number">10</span>);</span><br><span class="line">        test = <span class="hljs-keyword">new</span> TemplateMethod2();</span><br><span class="line">        test.templateMethod1(<span class="hljs-number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板方法模式&quot;&gt;&lt;a href=&quot;#模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式&quot;&gt;&lt;/a&gt;模板方法模式&lt;/h2&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="模板方法" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（四）：适配器模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（四）：适配器模式/</id>
    <published>2019-08-08T08:53:20.000Z</published>
    <updated>2019-08-08T09:11:57.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式（Adapter Pattern）是指将一个类的接口转换成客户期望的另一个接口，使原本的接口不兼容的类可以一起工作，属于结构型设计模式。 适配器适用于以下几种业务场景： </p><ol><li>已经存在的类，它的方法和需求不匹配（方法结果相同或相似）的情况。</li><li>适配器模式不是软件设计阶段考虑的设计模式，是随着软件维护，由于不同产品、不同厂家造成功能类似而接口不相同情况下的解决方案。有点亡羊补牢的感觉。</li></ol><p>生活中也非常的应用场景，例如电源插转换头、手机充电转换头、显示器转接头。在中国民用电都是220V 交流电，但我们手机使用的锂电池使用的 5V 直流电。因此，我们给手机充电时就需要使用电源适配器来进行转换。下面我们有代码来还原这个生活场 景，创建 AC220 类，表示 220V 交流电：</p><p>老版本逻辑</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AC220</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">outputAC220V</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> output = <span class="hljs-number">220</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"输出交流电"</span> + output + <span class="hljs-string">"V"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建适配器接口</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DC5</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">outputDC5V</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建适配器</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PowerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DC5</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> AC220 ac220;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PowerAdapter</span><span class="hljs-params">(AC220 ac220)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.ac220 = ac220;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">outputDC5V</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> adapterInput = ac220.outputAC220V(); <span class="hljs-comment">//变压器</span></span><br><span class="line">        <span class="hljs-keyword">int</span> adapterOutput = adapterInput / <span class="hljs-number">44</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"使用 PowerAdapter 输入 AC:"</span> + adapterInput + <span class="hljs-string">"V"</span> + <span class="hljs-string">"输出 DC:"</span> + adapterOutput + <span class="hljs-string">"V"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> adapterOutput;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试适配器</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAdapter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DC5 dc5 = <span class="hljs-keyword">new</span> PowerAdapter(<span class="hljs-keyword">new</span> AC220());</span><br><span class="line">        dc5.outputDC5V();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适配器模式的优缺点"><a href="#适配器模式的优缺点" class="headerlink" title="适配器模式的优缺点"></a>适配器模式的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h5><ol><li>能提高类的透明性和复用，现有的类复用但不需要改变。 </li><li>目标类和适配器类解耦，提高程序的扩展性。 </li><li>在很多业务场景中符合开闭原则。 </li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h5><ol><li>适配器编写过程需要全面考虑，可能会增加系统的复杂性。 </li><li>增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;&lt;p&gt;适配器模式（Adapter Pattern）是指将一个类的接口转换成客户期望的另一个接口，使原本的接口不兼容的类可以
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器" scheme="http://yoursite.com/tags/%E9%80%82%E9%85%8D%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（三）：装饰者模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（三）：装饰者模式/</id>
    <published>2019-08-08T08:28:17.000Z</published>
    <updated>2019-08-08T08:52:52.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>装饰者模式（Decorator Pattern）是指在不改变原有对象的基础之上，将功能附加到对 象上，提供了比继承更有弹性的替代方案（扩展原有对象的功能），属于结构型模式。</p><p>装饰模式主要包含以下角色。</p><ol><li>抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。</li><li>具体构件（Concrete    Component）角色：实现抽象构件，通过装饰角色为其添加一些职责。</li><li>抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li></ol><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>定义抽象构件</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IComponent</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 实现具体构件</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IComponent</span></span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"执行基本操作~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象装饰（抽象可选）</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IComponent</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> IComponent component;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstDecorator</span><span class="hljs-params">(IComponent component)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"执行抽象装饰"</span>);</span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现具体装饰</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstDecorator</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteDecorator</span><span class="hljs-params">(IComponent component)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">        <span class="hljs-keyword">super</span>.operation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"执行附加的装饰方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DecoratorTest</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IComponent component = <span class="hljs-keyword">new</span> ConcreteComponent();</span><br><span class="line">        IComponent d1 = <span class="hljs-keyword">new</span> ConcreteDecorator(component);</span><br><span class="line">        d1.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console打印如下：</p><blockquote><p>执行附加的装饰方法<br>执行抽象装饰<br>执行基本操作~</p></blockquote><h3 id="jdk典型装饰者场景：InputStream"><a href="#jdk典型装饰者场景：InputStream" class="headerlink" title="jdk典型装饰者场景：InputStream"></a>jdk典型装饰者场景：InputStream</h3><img src="/2019/08/08/design-2019-08-设计模式（三）：装饰者模式/inputstream.jpg" title="inputStream类图"><h3 id="与适配器模式的区别"><a href="#与适配器模式的区别" class="headerlink" title="与适配器模式的区别"></a>与适配器模式的区别</h3><table><thead><tr><th></th><th>装饰者模式</th><th>适配器模式</th></tr></thead><tbody><tr><td>形式</td><td>是一种特殊的适配器模式</td><td>没有层级关系，装饰者有层级关系</td></tr><tr><td>定义</td><td>装饰者和被装饰者都实现同一个接口，主要目的是为了扩展之后依旧保留OOP关系</td><td>适配器和被适配者没有必然的联系，通常是采用继承或代理的形式进行包装</td></tr><tr><td>关系</td><td>满足is-a的关系</td><td>满足has-a的关系</td></tr><tr><td>功能</td><td>注重覆盖、扩展</td><td>注重兼容、转换</td></tr><tr><td>设计</td><td>前置考虑</td><td>后置考虑（重构）</td></tr></tbody></table><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p><ul><li>装饰者是继承的有力补充，比继承灵活，不改变原有对象的情况下动态地给一个对象扩展功能，即插即用。</li><li>通过使用不同装饰类以及这些装饰类的排列组合，可以实现不同效果。</li><li>装饰者完全遵守开闭原则。</li></ul><p>缺点</p><ul><li>会出现更多的代码，更多的类，增加程序复杂性。</li><li>动态装饰时，多层装饰时会更复杂。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式&quot;&gt;&lt;/a&gt;装饰者模式&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="装饰者" scheme="http://yoursite.com/tags/%E8%A3%85%E9%A5%B0%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（二）：代理模式</title>
    <link href="http://yoursite.com/2019/08/04/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/04/design-2019-08-设计模式（二）：代理模式/</id>
    <published>2019-08-04T15:12:58.000Z</published>
    <updated>2019-08-08T09:11:57.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a>代理模式（Proxy Pattern）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>是指为其他对象提供一种代理，以控制对这个对象的访问。代理对象在客服端和目标对象之间起到中介作用，代理模式属于结构型设计模式。使用代理模式主要有两个目的：一、保护目标对象，二、增强目标对象。</p><h3 id="常见实现"><a href="#常见实现" class="headerlink" title="常见实现"></a>常见实现</h3><p>SpringAop</p><h3 id="静态代理（static-proxy）"><a href="#静态代理（static-proxy）" class="headerlink" title="静态代理（static proxy）"></a>静态代理（static proxy）</h3><p>抽象的说，就是代理对象持有被代理对象的引用进行方法增强。<br>举个例子：在深圳租房子，我们自己去找房很难直接联系上房东。一般会联系中介或者管理处（<code>proxy</code>），间接的租房。有的全权代理的房东坐等收钱，而中介可以在收租前后做各种不需要告诉老板的事，比如装修一番再涨个价赚取中间商差价。</p><h3 id="动态代理（dynamic-proxy）"><a href="#动态代理（dynamic-proxy）" class="headerlink" title="动态代理（dynamic proxy）"></a>动态代理（dynamic proxy）</h3><p>动态，指的是不直接引用被代理对象，并且可以代理不同的对象。Spring AOP面向切面编程的原理正是如此。<br>举个例子，快递公司要帮人寄送快递，但他不需要知道那个人是谁。只要按流程填写快递单就行了。“快递单”在这里就是被代理对象。沿用这个例子展开分析。</p><h4 id="1-JDK-Proxy"><a href="#1-JDK-Proxy" class="headerlink" title="1.JDK Proxy"></a>1.JDK Proxy</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-2.</span></span><br><span class="line"><span class="hljs-comment"> * 快递公司-动态代理发送快递</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExpressCompanyJDKProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getInstance</span><span class="hljs-params">(Object object)</span><span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.target = object;</span><br><span class="line">        Class&lt;?&gt; clazz = target.getClass();</span><br><span class="line">        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(clazz.getClassLoader(),clazz.getInterfaces(),<span class="hljs-keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object object = method.invoke(<span class="hljs-keyword">this</span>.target,args);</span><br><span class="line">        send();</span><br><span class="line">        <span class="hljs-keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"jdk动态代理-快递公司发出快递！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ICustomer jdkCustomer = (ICustomer) <span class="hljs-keyword">new</span> ExpressCompanyJDKProxy().getInstance(<span class="hljs-keyword">new</span> Customer(<span class="hljs-string">"李四"</span>));</span><br><span class="line">jdkCustomer.send();</span><br></pre></td></tr></table></figure></p><p> JDK Proxy 采用字节重组，重新生的对象来替代原始的对象以达到动态代理 的目的。JDK Proxy 生成对象的步骤如下：</p><ol><li>拿到被代理对象的引用，反射获取它所有的接口。</li><li>JDK Proxy 类重新生成一个新的类、同时新的类要实现被代理类所有实现的所有的接口。</li><li>动态生成 Java 代码，把新加的业务逻辑方法由一定的逻辑代码去调用（在代码中体现）。</li><li>编译新生成的 Java 代码: $Proxy***.class。</li><li>再重新加载到 JVM 中运行。 </li></ol><p>以上这个过程就叫字节码重组。JDK 中有一个规范，在 ClassPath 下只要是$开头的 class文件一般都是自动生成的。查看代替后对象方式如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ICustomer jdkCustomer = (ICustomer) <span class="hljs-keyword">new</span> ExpressCompanyJDKProxy().getInstance(<span class="hljs-keyword">new</span> Customer(<span class="hljs-string">"李四"</span>));</span><br><span class="line"><span class="hljs-keyword">byte</span> [] bytes = ProxyGenerator.generateProxyClass(<span class="hljs-string">"$Proxy0"</span>,<span class="hljs-keyword">new</span> Class[]&#123;Person.class&#125;); FileOutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"E://$Proxy0.class"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-CGLib-Proxy"><a href="#2-CGLib-Proxy" class="headerlink" title="2. CGLib Proxy"></a>2. CGLib Proxy</h4><p>与JDK代理不同，CGLib 代理的目标对象不需要实现任何接口，它是通过动态继承目标对象实现的动态代理。这样的做法弊端就是<code>无法代理final关键字修饰的方法。</code>.好处则更加明显，在频繁调用代理的情况下，省去了反射带来的开销。</p><p>代理实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExpressCompanyCGLibProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getInstance</span><span class="hljs-params">(Class&lt;?&gt; clazz,Class[] argumentTypes, Object[] arguments)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        enhancer.setCallback(<span class="hljs-keyword">this</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span>(argumentTypes==<span class="hljs-keyword">null</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> enhancer.create();</span><br><span class="line">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> enhancer.create(argumentTypes, arguments);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object object = methodProxy.invokeSuper(o,objects);</span><br><span class="line">        send();</span><br><span class="line">        <span class="hljs-keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"cglib动态代理-快递公司发出快递！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//构造方法所需参数</span></span><br><span class="line">Class[] argumentTypes = <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;;</span><br><span class="line">Object[] personArguments = <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"王五"</span>&#125;;</span><br><span class="line">Object[] robotArguments = <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"二哈"</span>&#125;;</span><br><span class="line">Customer cglibCustomer = (Customer) <span class="hljs-keyword">new</span> ExpressCompanyCGLibProxy().</span><br><span class="line">    getInstance(Customer.class,argumentTypes,personArguments);</span><br><span class="line">Robot cglibRobot = (Robot) <span class="hljs-keyword">new</span> ExpressCompanyCGLibProxy().</span><br><span class="line">    getInstance(Robot.class,argumentTypes,robotArguments);</span><br><span class="line">Robot cglibRobotCreate = (Robot) <span class="hljs-keyword">new</span> ExpressCompanyCGLibProxy().</span><br><span class="line">    getInstance(Robot.class,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);</span><br><span class="line">cglibCustomer.send();</span><br><span class="line">cglibRobot.send();</span><br><span class="line">cglibRobotCreate.send();</span><br></pre></td></tr></table></figure><p>将 CGLib 代理后的 class 写入到磁盘：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//利用 cglib 的代理类可以将内存中的 class 文件写入本地磁盘 </span></span><br><span class="line"></span><br><span class="line">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY,<span class="hljs-string">"E://cglib_proxy_class/"</span>);</span><br><span class="line">ICustomer jdkCustomer = (ICustomer) <span class="hljs-keyword">new</span> ExpressCompanyJDKProxy().getInstance(<span class="hljs-keyword">new</span> Customer(<span class="hljs-string">"李四"</span>));</span><br></pre></td></tr></table></figure><p>我们会发现在 E://cglib_proxy_class 目录下多了三个 class 文件</p><ul><li><code>ObjectName$$EnhancerByCGLIB$$3feeb52a.class</code></li></ul><blockquote><p>CGLib生成的代理类，继承了被代理对象。重写了 被代理对象类的所有方法，并且生成代理的方法的增强逻辑以及增强逻辑所需要的方法。这直接导致了我们如果在拦截器里直接调用<code>method.invoke()</code>会死循环。所以我们切记在代理拦截器中应该使用<code>methodProxy.invokeSuper(o,objects)</code>。</p></blockquote><ul><li><code>ObjectName$$EnhancerByCGLIB$$3feeb52a$$FastClassByCGLIB$$6aad62f1.class</code></li></ul><blockquote><p>代理类的 FastClass。</p></blockquote><ul><li><code>Customer$$FastClassByCGLIB$$2669574a.class</code></li></ul><blockquote><p>被代理类的FastClass。</p><p>CGLib 动态代理执行代理方法效率之所以比 JDK的高是因为 Cglib 采用了 FastClass 机制，它的原理简单来说就是：为代理类和被代理类各生成一个 Class，这个 Class 会为代理类或被代理类的方法分配一个 index(int 类型)。这个 index 当做一个入参，FastClass就可以直接定位要调用的方法直接进行调用，这样省去了反射调用，所以调用效率比 JDK动态代理通过反射调用高。FastClass 并不是跟代理类一块生成的，而是在第一次执行 MethodProxy.invoke()/invokeSuper() 时生成的并放在了缓存中。</p></blockquote><h4 id="CGLib-和-JDK-动态代理对比"><a href="#CGLib-和-JDK-动态代理对比" class="headerlink" title="CGLib 和 JDK 动态代理对比"></a>CGLib 和 JDK 动态代理对比</h4><ol><li>JDK 动态代理是实现了被代理对象的接口，CGLib 是继承了被代理对象。</li><li>JDK 和 CGLib 都是在运行期生成字节码，JDK 是直接写 Class 字节码，CGLib 使用 ASM 框架写 Class 字节码，Cglib 代理实现更复杂，生成代理类比 JDK 效率低。</li><li>JDK 调用代理方法，是通过反射机制调用，CGLib 是通过 FastClass 机制直接调用方法， CGLib 执行效率更高。</li></ol><h3 id="Spring中的代理模式"><a href="#Spring中的代理模式" class="headerlink" title="Spring中的代理模式"></a>Spring中的代理模式</h3><h4 id="代理模式选择"><a href="#代理模式选择" class="headerlink" title="代理模式选择"></a>代理模式选择</h4><ol><li>当 Bean 有实现接口时，Spring 就会用 JDK 的动态代理 </li><li>当 Bean 没有实现接口时，Spring 选择 CGLib。</li><li>Spring 可以通过配置强制使用 CGLib，只需在 Spring 的配置文件中加入如下代码：</li></ol><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="静态代理和动态的本质区别"><a href="#静态代理和动态的本质区别" class="headerlink" title="静态代理和动态的本质区别"></a>静态代理和动态的本质区别</h3><ol><li><p>静态代理只能通过手动完成代理操作，如果被代理类增加新的方法，代理类需要同步新增，违背开闭原则。</p></li><li><p>动态代理采用在运行时动态生成代码的方式，取消了对被代理类的扩展限制，遵循开闭原则。 </p></li><li><p>若动态代理要对目标类的增强逻辑扩展，结合策略模式，只需要新增策略类便可完成，无需修改代理类的代码。</p></li></ol><h3 id="代理模式的优缺点"><a href="#代理模式的优缺点" class="headerlink" title="代理模式的优缺点"></a>代理模式的优缺点</h3><p>使用代理模式具有以下几个优点： </p><ol><li><p>代理模式能将代理对象与真实被调用的目标对象分离。 </p></li><li><p>一定程度上降低了系统的耦合度，扩展性好。 </p></li><li><p>可以起到保护目标对象的作用。 </p></li><li><p>可以对目标对象的功能增强。 </p></li></ol><p>当然，代理模式也是有缺点的：</p><ol><li><p>代理模式会造成系统设计中类的数量增加。 </p></li><li><p>在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢。 </p></li><li><p>增加了系统的复杂度。 </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代理模式（Proxy-Pattern）&quot;&gt;&lt;a href=&quot;#代理模式（Proxy-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;代理模式（Proxy Pattern）&quot;&gt;&lt;/a&gt;代理模式（Proxy Pattern）&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="代理" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（一）：单例模式</title>
    <link href="http://yoursite.com/2019/08/04/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/04/design-2019-08-设计模式（一）：单例模式/</id>
    <published>2019-08-04T14:49:26.000Z</published>
    <updated>2019-08-08T08:42:03.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式的应用场景"><a href="#单例模式的应用场景" class="headerlink" title="单例模式的应用场景"></a>单例模式的应用场景</h3><p>单例模式（Singleton Pattern）是指确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。单例模式是创建型模式。单例模式在现实生活中应用也非常广泛。 例如，国家主席、公司 CEO、部门经理等。在 J2EE标准中，ServletContext、 ServletContextConfig 等；在 Spring 框架应用中 ApplicationContext；数据库的连接池也都是单例形式。</p><h3 id="常见实现"><a href="#常见实现" class="headerlink" title="常见实现"></a>常见实现</h3><p>饿汉式单例：Spring中IOC容器ApplicationContext。</p><h3 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h3><p>饿汉式单例是在类加载的时候就立即初始化，并且创建单例对象。绝对线程安全，在线 程还没出现以前就是实例化了，不可能存在访问安全问题。</p><ul><li>优点：没有加任何的锁、执行效率比较高，在用户体验上来说，比懒汉式更好。</li><li>缺点：类加载的时候就初始化，不管用与不用都占着空间，浪费了内存，有可能占着茅坑不拉屎。</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HungrySingleton</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//法1</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> HungrySingleton instance = <span class="hljs-keyword">new</span> HungrySingleton();</span><br><span class="line">    <span class="hljs-comment">//法2</span></span><br><span class="line">    <span class="hljs-comment">//    static &#123;</span></span><br><span class="line">    <span class="hljs-comment">//        instance = new HungrySingleton();</span></span><br><span class="line">    <span class="hljs-comment">//    &#125;</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">HungrySingleton</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HungrySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h3><p>懒汉式单例的特点是：被外部类调用的时候内部类才会加载.</p><h4 id="1-同步锁懒汉式单例"><a href="#1-同步锁懒汉式单例" class="headerlink" title="1.同步锁懒汉式单例"></a>1.同步锁懒汉式单例</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> LazyDoubleCheckSingleton lazyDoubleCheckSingleton = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyDoubleCheckSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(lazyDoubleCheckSingleton ==<span class="hljs-keyword">null</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">synchronized</span>(LazyDoubleCheckSingleton.class)&#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(lazyDoubleCheckSingleton ==<span class="hljs-keyword">null</span>)&#123;</span><br><span class="line">                    lazyDoubleCheckSingleton = <span class="hljs-keyword">new</span> LazyDoubleCheckSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> lazyDoubleCheckSingleton;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-内部类懒汉式单例"><a href="#2-内部类懒汉式单例" class="headerlink" title="2.内部类懒汉式单例"></a>2.内部类懒汉式单例</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyInnerClassSingleton</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyInnerClassSingleton</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"构造方法"</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (LazyHolder.LAZY!=<span class="hljs-keyword">null</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"禁止通过反射创建此单例对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> LazyInnerClassSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"getInstance"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> LazyHolder.LAZY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 内部类一定是要在方法调用之前初始化，巧妙地避免了线程安全问题。</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyHolder</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> LazyInnerClassSingleton LAZY= <span class="hljs-keyword">new</span> LazyInnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String []s )</span></span>&#123;</span><br><span class="line">        LazyInnerClassSingleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册式单例"><a href="#注册式单例" class="headerlink" title="注册式单例"></a>注册式单例</h3><h4 id="1-容器缓存注册式单例"><a href="#1-容器缓存注册式单例" class="headerlink" title="1.容器缓存注册式单例"></a>1.容器缓存注册式单例</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContainerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ContainerSingleton</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String,Object&gt; instanceMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title">getBean</span><span class="hljs-params">(String className)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(className==<span class="hljs-keyword">null</span>||<span class="hljs-string">""</span>.equals(className.trim())) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">        <span class="hljs-keyword">synchronized</span>(instanceMap)&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (instanceMap.containsKey(className))&#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> instanceMap.get(className);</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                Object obj = <span class="hljs-keyword">null</span>;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    Class clazz = Class.forName(className);</span><br><span class="line">                    obj = clazz.newInstance();</span><br><span class="line">                    instanceMap.put(className,obj);</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-枚举注册式单例"><a href="#2-枚举注册式单例" class="headerlink" title="2.枚举注册式单例"></a>2.枚举注册式单例</h4><p>此方法即使通过反序列化也能获得单例</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> EnumSingleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="hljs-keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EnumSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单例模式的应用场景&quot;&gt;&lt;a href=&quot;#单例模式的应用场景&quot; class=&quot;headerlink&quot; title=&quot;单例模式的应用场景&quot;&gt;&lt;/a&gt;单例模式的应用场景&lt;/h3&gt;&lt;p&gt;单例模式（Singleton Pattern）是指确保一个类在任何情况下都绝对只有一
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式：七大原则</title>
    <link href="http://yoursite.com/2019/08/04/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/04/design-2019-08-设计模式：七大原则/</id>
    <published>2019-08-04T11:32:47.000Z</published>
    <updated>2019-08-04T16:36:49.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件架构设计的七大原则"><a href="#软件架构设计的七大原则" class="headerlink" title="软件架构设计的七大原则"></a>软件架构设计的七大原则</h2><h3 id="一、开闭原则"><a href="#一、开闭原则" class="headerlink" title="一、开闭原则"></a>一、开闭原则</h3><p>开闭原则（Open-Closed Principle, OCP）是指一个软件实体如类、模块和函数应该对 </p><p>扩展开放，对修改关闭。所谓的开闭，也正是对扩展和修改两个行为的一个原则。强调 </p><p>的是用抽象构建框架，用实现扩展细节。可以提高软件系统的可复用性及可维护性。开 </p><p>闭原则，是面向对象设计中最基础的设计原则。它指导我们如何建立稳定灵活的系统， </p><p>例如：我们版本更新，我尽可能不修改源代码，但是可以增加新功能。 </p><p>在现实生活中对于开闭原则也有体现。比如，很多互联网公司都实行弹性制作息时间， </p><p>规定每天工作 8 小时。意思就是说，对于每天工作 8 小时这个规定是关闭的，但是你什 </p><p>么时候来，什么时候走是开放的。早来早走，晚来晚走。</p><h3 id="二、依赖倒置原则"><a href="#二、依赖倒置原则" class="headerlink" title="二、依赖倒置原则"></a>二、依赖倒置原则</h3><p>依赖倒置原则（Dependence Inversion Principle,DIP）是指设计代码结构时，高层模 </p><p>块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节；细节应该依赖 </p><p>抽象。通过依赖倒置，可以减少类与类之间的耦合性，提高系统的稳定性，提高代码的 </p><p>可读性和可维护性，并能够降低修改程序所造成的风险。</p><h2 id="三、单一职责原则"><a href="#三、单一职责原则" class="headerlink" title="三、单一职责原则"></a>三、单一职责原则</h2><p>单一职责（Simple Responsibility Pinciple，SRP）是指不要存在多于一个导致类变更 </p><p>的原因。假设我们有一个 Class 负责两个职责，一旦发生需求变更，修改其中一个职责的</p><p>逻辑代码，有可能会导致另一个职责的功能发生故障。这样一来，这个 Class 存在两个导 </p><p>致类变更的原因。如何解决这个问题呢？我们就要给两个职责分别用两个 Class 来实现， </p><p>进行解耦。后期需求变更维护互不影响。这样的设计，可以降低类的复杂度，提高类的 </p><p>可 读 性 ， 提 高 系 统 的 可 维 护 性 ， 降 低 变 更 引 起 的 风 险 。 总 体 来 说 就 是 一 个 </p><p>Class/Interface/Method 只负责一项职责。 </p><h3 id="四、接口隔离原则"><a href="#四、接口隔离原则" class="headerlink" title="四、接口隔离原则"></a>四、接口隔离原则</h3><p>接口隔离原则（Interface Segregation Principle, ISP）是指用多个专门的接口，而不使 </p><p>用单一的总接口，客户端不应该依赖它不需要的接口。这个原则指导我们在设计接口时 </p><p>应当注意一下几点： </p><p>1、一个类对一类的依赖应该建立在最小的接口之上。 </p><p>2、建立单一接口，不要建立庞大臃肿的接口。 </p><p>3、尽量细化接口，接口中的方法尽量少（不是越少越好，一定要适度）。 </p><p>接口隔离原则符合我们常说的高内聚低耦合的设计思想，从而使得类具有很好的可读性、 </p><p>可扩展性和可维护性。我们在设计接口的时候，要多花时间去思考，要考虑业务模型， </p><p>包括以后有可能发生变更的地方还要做一些预判。所以，对于抽象，对业务模型的理解 </p><p>是非常重要的。</p><h3 id="五、迪米特法则"><a href="#五、迪米特法则" class="headerlink" title="五、迪米特法则"></a>五、迪米特法则</h3><p>迪米特原则（Law of Demeter LoD）是指一个对象应该对其他对象保持最少的了解，又 叫最少知道原则（Least Knowledge Principle,LKP），尽量降低类与类之间的耦合。迪 米特原则主要强调只和朋友交流，不和陌生人说话。出现在成员变量、方法的输入、输 出参数中的类都可以称之为成员朋友类，而出现在方法体内部的类不属于朋友类。</p><h3 id="六、里氏替换原则"><a href="#六、里氏替换原则" class="headerlink" title="六、里氏替换原则"></a>六、里氏替换原则</h3><p>里氏替换原则（Liskov Substitution Principle,LSP）是指如果对每一个类型为 T1 的对 象 o1,都有类型为 T2 的对象 o2,使得以 T1 定义的所有程序 P 在所有的对象 o1 都替换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。 定义看上去还是比较抽象，我们重新理解一下，可以理解为一个软件实体如果适用一个 父类的话，那一定是适用于其子类，所有引用父类的地方必须能透明地使用其子类的对 象，子类对象能够替换父类对象，而程序逻辑不变。根据这个理解，我们总结一下： 引申含义：子类可以扩展父类的功能，但不能改变父类原有的功能。</p><ol><li><p>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。 </p></li><li><p>子类中可以增加自己特有的方法。 </p></li><li><p>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入/入参）要比父类 </p><p>方法的输入参数更宽松。 </p></li><li><p>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即 </p><p>方法的输出/返回值）要比父类更严格或相等。</p></li></ol><p>使用里氏替换原则有以下优点： </p><ol><li><p>约束继承泛滥，开闭原则的一种体现。 </p></li><li><p>加强程序的健壮性，同时变更时也可以做到非常好的兼容性，提高程序的维护性、扩 </p><p>展性。降低需求变更时引入的风险。 </p></li></ol><p>里氏替换原则只存在父类与子类之间，约束继承泛滥。</p><h3 id="七、合成复用原则"><a href="#七、合成复用原则" class="headerlink" title="七、合成复用原则"></a>七、合成复用原则</h3><p>合成复用原则（Composite/Aggregate Reuse Principle,CARP）是指尽量使用对象组 </p><p>合(has-a)/聚合(contanis-a)，而不是继承关系达到软件复用的目的。可以使系统更加灵 </p><p>活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少。 </p><p>继承我们叫做白箱复用，相当于把所有的实现细节暴露给子类。组合/聚合也称之为黑箱 </p><p>复用，对类以外的对象是无法获取到实现细节的。要根据具体的业务场景来做代码设计， </p><p>其实也都需要遵循 OOP 模型。</p><h3 id="设计原则总结"><a href="#设计原则总结" class="headerlink" title="设计原则总结"></a>设计原则总结</h3><p>学习设计原则，学习设计模式的基础。在实际开发过程中，并不是一定要求所有代码都 遵循设计原则，我们要考虑人力、时间、成本、质量，不是刻意追求完美，要在适当的 场景遵循设计原则，体现的是一种平衡取舍，帮助我们设计出更加优雅的代码结构。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件架构设计的七大原则&quot;&gt;&lt;a href=&quot;#软件架构设计的七大原则&quot; class=&quot;headerlink&quot; title=&quot;软件架构设计的七大原则&quot;&gt;&lt;/a&gt;软件架构设计的七大原则&lt;/h2&gt;&lt;h3 id=&quot;一、开闭原则&quot;&gt;&lt;a href=&quot;#一、开闭原则&quot; cla
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
