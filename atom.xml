<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhiCheng&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-20T17:36:50.328Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZhiCheng Miao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>渐入Spring-IOC</title>
    <link href="http://yoursite.com/2019/08/21/Spring-2019-08-%E6%B8%90%E5%85%A5Spring-IOC/"/>
    <id>http://yoursite.com/2019/08/21/Spring-2019-08-渐入Spring-IOC/</id>
    <published>2019-08-20T17:23:32.000Z</published>
    <updated>2019-08-20T17:36:50.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渐入Spring-IOC"><a href="#渐入Spring-IOC" class="headerlink" title="渐入Spring-IOC"></a>渐入Spring-IOC</h2><h3 id="一、IOC"><a href="#一、IOC" class="headerlink" title="一、IOC"></a>一、IOC</h3><ol><li><p><strong>Spring核心容器类图</strong></p><ul><li><p><code>BeanFactory</code></p><p>Spring Bean 的创建是典型的工厂模式，这一系列的 Bean 工厂，也即 IOC 容器为开发者管理对象间的依赖关系提供了很多便利和基础服务，在 Spring 中有许多的 IOC 容器的实现供用户选择和使用，其相互关系如下：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/BeanFactory.png"><p>其中 BeanFactory 作为最顶层的一个接口类，它定义了 IOC 容器的基本功能规范，BeanFactory 有三个重要的子类：ListableBeanFactory、HierarchicalBeanFactory 和 AutowireCapableBeanFactory。但是从类图中我们可以发现最终的默认实现类是 DefaultListableBeanFactory，它实现了所有的接口。那为何要定义这么多层次的接口呢？查阅这些接口的源码和说明发现，每个接口都有它使用的场合，它主要是为了区分在 Spring 内部在操作过程中对象的传递和转化过程时，对对象的数据访问所做的限制。例如 ListableBeanFactory 接口表示这些 Bean 是可列表化的，而 HierarchicalBeanFactory 表示的是这些 Bean 是有继承关系的，也就是每个 Bean 有可能有父 Bean。AutowireCapableBeanFactory 接口定义 Bean 的自动装配规则。这三个接口共同定义了 Bean 的集合、Bean 之间的关系、以及 Bean 行为。最基本的 IOC 容器接口 BeanFactory，来看一下它的源码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.core.ResolvableType;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BeanFactory</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//对FactoryBean的转义定义，因为如果使用bean的名字检索FactoryBean得到的对象是工厂生成的对象，如果需要得到工厂本身，需要转义</span></span><br><span class="line">String FACTORY_BEAN_PREFIX = <span class="hljs-string">"&amp;"</span>;</span><br><span class="line"><span class="hljs-comment">//根据bean的名字，获取在IOC容器中得到bean实例</span></span><br><span class="line"><span class="hljs-function">Object <span class="hljs-title">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"><span class="hljs-comment">//根据bean的名字和Class类型来得到bean实例，增加了类型安全验证机制。</span></span><br><span class="line">&lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(String name, @Nullable Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">Object <span class="hljs-title">getBean</span><span class="hljs-params">(String name, Object... args)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//提供对bean的检索，看看是否在IOC容器有这个名字的bean</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">containsBean</span><span class="hljs-params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//根据bean名字得到bean实例，并同时判断这个bean是不是单例</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isPrototype</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isTypeMatch</span><span class="hljs-params">(String name, ResolvableType typeToMatch)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isTypeMatch</span><span class="hljs-params">(String name, @Nullable Class&lt;?&gt; typeToMatch)</span> <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//得到bean实例的Class类型</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line">Class&lt;?&gt; getType(String name) <span class="hljs-keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//得到bean的别名，如果根据别名检索，那么其原名也会被检索出来</span></span><br><span class="line">String[] getAliases(String name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 BeanFactory 里只对 IOC 容器的基本行为作了定义，根本不关心你的 Bean 是如何定义怎样加载的。正如我们只关心工厂里得到什么的产品对象，至于工厂是怎么生产这些对象的，这个基本的接口不关心。而要知道工厂是如何产生对象的，我们需要看具体的 IOC 容器实现，Spring 提供了许多 IOC 容器的实现 。 比如 GenericApplicationContext ， ClasspathXmlApplicationContext 等 。ApplicationContext 是 Spring 提供的一个高级的 IOC 容器，它除了能够提供 IOC 容器的基本功能外，还为用户提供了以下的附加服务。</p><p>从 ApplicationContext 接口的实现，我们看出其特点：</p><blockquote><p>1、支持信息源，可以实现国际化。（实现 MessageSource 接口）<br>2、访问资源。(实现 ResourcePatternResolver 接口，后面章节会讲到)<br>3、支持应用事件。(实现 ApplicationEventPublisher 接口)</p></blockquote></li></ul></li></ol><pre><code>- `BeanDefinition`  SpringIOC 容器管理了我们定义的各种 Bean 对象及其相互的关系，Bean 对象在 Spring 实现中是以 BeanDefinition 来描述的，其继承体系如下：  {% asset_img RootBeanDefinition.png %}- `BeanDefinitionReader`  Bean 的解析过程非常复杂，功能被分的很细，因为这里需要被扩展的地方很多，必须保证有足够的灵活性，以应对可能的变化。Bean 的解析主要就是对 Spring 配置文件的解析。这个解析过程主要通过BeanDefinitionReader来完成，最后看看 Spring 中 BeanDefinitionReader的类结构图：  {% asset_img BeanDefinitionReader.png %}**延伸--寻找Web IOC入口**以`DispatcherServlet`为例, `DispatcherServlet`继承&gt;`HttpServletBean`执行init()方法如下:<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Initializing servlet '"</span> + getServletName() + <span class="hljs-string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Set bean properties from init parameters.</span></span><br><span class="line">PropertyValues pvs = <span class="hljs-keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="hljs-keyword">this</span>.requiredProperties);</span><br><span class="line"><span class="hljs-keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//定位资源</span></span><br><span class="line">BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-comment">//加载配置信息</span></span><br><span class="line">ResourceLoader resourceLoader = <span class="hljs-keyword">new</span> ServletContextResourceLoader(getServletContext());</span><br><span class="line">bw.registerCustomEditor(Resource.class, <span class="hljs-keyword">new</span> ResourceEditor(resourceLoader, getEnvironment()));</span><br><span class="line">initBeanWrapper(bw);</span><br><span class="line">bw.setPropertyValues(pvs, <span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">logger.error(<span class="hljs-string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="hljs-string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">initServletBean();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Servlet '"</span> + getServletName() + <span class="hljs-string">"' configured successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在 init()方法中，真正完成初始化容器动作的逻辑其实在 initServletBean()方法中，这是个钩子方法, 我们继续跟进initServletBean()中的代码在 FrameworkServlet 类中：<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initServletBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">getServletContext().log(<span class="hljs-string">"Initializing Spring FrameworkServlet '"</span> + getServletName() + <span class="hljs-string">"'"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">"FrameworkServlet '"</span> + getServletName() + <span class="hljs-string">"': initialization started"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">initFrameworkServlet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.error(<span class="hljs-string">"Context initialization failed"</span>, ex);</span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.error(<span class="hljs-string">"Context initialization failed"</span>, ex);</span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="hljs-keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">"FrameworkServlet '"</span> + getServletName() + <span class="hljs-string">"': initialization completed in "</span> +</span><br><span class="line">elapsedTime + <span class="hljs-string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>继续跟进<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title">initWebApplicationContext</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//先从ServletContext中获得父容器WebAppliationContext</span></span><br><span class="line">WebApplicationContext rootContext =</span><br><span class="line">WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line"><span class="hljs-comment">//声明子容器</span></span><br><span class="line">WebApplicationContext wac = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//建立父、子容器之间的关联关系</span></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.webApplicationContext != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">wac = <span class="hljs-keyword">this</span>.webApplicationContext;</span><br><span class="line"><span class="hljs-keyword">if</span> (wac <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line"><span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line"><span class="hljs-comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line"><span class="hljs-comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line"><span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line"><span class="hljs-comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">cwac.setParent(rootContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//这个方法里面调用了AbatractApplication的refresh()方法</span></span><br><span class="line"><span class="hljs-comment">//模板方法，规定IOC初始化基本流程</span></span><br><span class="line">configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//先去ServletContext中查找Web容器的引用是否存在，并创建好默认的空IOC容器</span></span><br><span class="line"><span class="hljs-keyword">if</span> (wac == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line"><span class="hljs-comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line"><span class="hljs-comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line"><span class="hljs-comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">wac = findWebApplicationContext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//给上一步创建好的IOC容器赋值</span></span><br><span class="line"><span class="hljs-keyword">if</span> (wac == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">wac = createWebApplicationContext(rootContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//触发onRefresh方法</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.refreshEventReceived) &#123;</span><br><span class="line"><span class="hljs-comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line"><span class="hljs-comment">// support or the context injected at construction time had already been</span></span><br><span class="line"><span class="hljs-comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">onRefresh(wac);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.publishContext) &#123;</span><br><span class="line"><span class="hljs-comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">String attrName = getServletContextAttributeName();</span><br><span class="line">getServletContext().setAttribute(attrName, wac);</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Published WebApplicationContext of servlet '"</span> + getServletName() +</span><br><span class="line"><span class="hljs-string">"' as ServletContext attribute with name ["</span> + attrName + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在 `configAndRefreshWebApplicationContext()`方法中，调用 `refresh()`方法，这个是真正启动 IOC 容器的入口，后面会详细介绍。IOC 容器初始化以后，最后调用了`DispatcherServlet` 的 `onRefresh()`方法，`onRefresh()`是为`DispatcherServlet`提供的钩子方法,在 `onRefresh()`方法中又是直接调用 initStrategies()方法初始化 SpringMVC 的九大组件：<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//DispatcherServlet</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onRefresh</span><span class="hljs-params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initStrategies(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//初始化策略</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//多文件上传的组件</span></span><br><span class="line">initMultipartResolver(context);</span><br><span class="line"><span class="hljs-comment">//初始化本地语言环境</span></span><br><span class="line">initLocaleResolver(context);</span><br><span class="line"><span class="hljs-comment">//初始化模板处理器</span></span><br><span class="line">initThemeResolver(context);</span><br><span class="line"><span class="hljs-comment">//handlerMapping</span></span><br><span class="line">initHandlerMappings(context);</span><br><span class="line"><span class="hljs-comment">//初始化参数适配器</span></span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line"><span class="hljs-comment">//初始化异常拦截器</span></span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line"><span class="hljs-comment">//初始化视图预处理器</span></span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line"><span class="hljs-comment">//初始化视图转换器</span></span><br><span class="line">initViewResolvers(context);</span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol start="2"><li><p><strong>基于XML的IOC容器初始化原理</strong><br>IOC 容器的初始化包括 BeanDefinition 的 Resource 定位、加载和注册这三个基本的过程。我们以ApplicationContext 为例讲解，ApplicationContext 系列容器也许是我们最熟悉的，因为 Web 项目中使用的XmlWebApplicationContext就属于这个继承体系，还有ClasspathXmlApplicationContext等，其继承体系如下图所示：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/ApplicationContext.png"><p><code>ApplicationContext</code> 允许上下文嵌套，通过保持父上下文可以维持一个上下文体系。对于 Bean 的查找可以在这个上下文体系中发生，首先检查当前上下文，其次是父上下文，逐级向上，这样为不同的 Spring应用提供了一个共享的 Bean 定义环境。</p><ol><li><p>寻找入口</p><p>我们用的比较多的 ClassPathXmlApplicationContext，通过 main()方法启动:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"application.xml"</span>);</span><br></pre></td></tr></table></figure><p>先看其构造函数的调用：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathXmlApplicationContext</span><span class="hljs-params">(String configLocation)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>(<span class="hljs-keyword">new</span> String[]&#123;configLocation&#125;, <span class="hljs-keyword">true</span>, (ApplicationContext)<span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实际调用的构造函数为：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathXmlApplicationContext</span><span class="hljs-params">(String[] configLocations, <span class="hljs-keyword">boolean</span> refresh, @Nullable ApplicationContext parent)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(parent);</span><br><span class="line">    <span class="hljs-keyword">this</span>.setConfigLocations(configLocations);</span><br><span class="line">    <span class="hljs-keyword">if</span>(refresh) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有像 AnnotationConfigApplicationContext 、 FileSystemXmlApplicationContext 、<br><code>XmlWebApplicationContext</code>等都继承自父容器<code>AbstractApplicationContext</code>主要用到了装饰器模式和策略模式，最终都是调用 <code>refresh()</code>方法。</p></li><li><p>获得配置路径</p><p>通过分析<code>ClassPathXmlApplicationContext</code>的源代码可以知道, 在创建<code>ClassPathXmlApplicationContext</code>容器时, 构造方法做了两项重要工作:首先, 调用父类容器的构造方法<code>(super(parent)方法)</code>为容器设置好 Bean 资源加载器. 然后, 再调用父类<code>AbstractRefreshableConfigApplicationContext</code>的<code>setConfigLocations(configLocations)</code>方法设置 Bean 配置信息的定位路径. 通过追踪<code>ClassPathXmlApplicationContext</code>的继承体系, 发现其超类<code>AbstractApplicationContext</code>中初始化IOC容器所得的主要源码如下:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//静态初始化块，在整个容器创建过程中只执行一次</span></span><br><span class="line">    <span class="hljs-keyword">static</span> &#123;</span><br><span class="line"><span class="hljs-comment">//为了避免应用程序在 Weblogic8.1 关闭时出现类加载异常加载问题，加载 IOC 容</span></span><br><span class="line"><span class="hljs-comment">//器关闭事件(ContextClosedEvent)类</span></span><br><span class="line">        ContextClosedEvent.class.getName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstractApplicationContext</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.resourcePatternResolver = getResourcePatternResolver();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstractApplicationContext</span><span class="hljs-params">(@Nullable ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>();</span><br><span class="line">        setParent(parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//获取一个 Spring Source 的加载器用于读入 Spring Bean 配置信息</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> ResourcePatternResolver <span class="hljs-title">getResourcePatternResolver</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//AbstractApplicationContext 继承 DefaultResourceLoader，因此也是一个资源加载器</span></span><br><span class="line"><span class="hljs-comment">//Spring 资源加载器，其 getResource(String location)方法用于载入资源</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver(<span class="hljs-keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractApplicationContext</code> 的默认构造方法中有调用 <code>PathMatchingResourcePatternResolver</code> 的构造方法创建 Spring 资源加载器：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PathMatchingResourcePatternResolver</span><span class="hljs-params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(resourceLoader, <span class="hljs-string">"ResourceLoader must not be null"</span>);</span><br><span class="line">    <span class="hljs-comment">//设置 Spring 的资源加载器</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在设置容器的资源加载器之后，接下来 <code>ClassPathXmlApplicationContext</code> 执行<code>setConfigLocations()</code>方法通过调用其父类<code>AbstractRefreshableConfigApplicationContext</code>的方法进行对Bean配置信息的定位，该方法的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//处理单个资源文件路径为一个字符串的情况</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigLocation</span><span class="hljs-params">(String location)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//String CONFIG_LOCATION_DELIMITERS = ",; /t/n";</span></span><br><span class="line"><span class="hljs-comment">//即多个资源文件路径之间用” ,; \t\n”分隔，解析成数组形式</span></span><br><span class="line">setConfigLocations(StringUtils.tokenizeToStringArray(location, CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Set the config locations for this application context.</span></span><br><span class="line"><span class="hljs-comment"> * &lt;p&gt;If not set, the implementation may use a default as appropriate.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//解析Bean定义资源文件的路径，处理多个资源文件字符串数组</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigLocations</span><span class="hljs-params">(@Nullable String... locations)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (locations != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">Assert.noNullElements(locations, <span class="hljs-string">"Config locations must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.configLocations = <span class="hljs-keyword">new</span> String[locations.length];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line"><span class="hljs-comment">// resolvePath为同一个类中将字符串解析为路径的方法</span></span><br><span class="line"><span class="hljs-keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.configLocations = <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这两个方法的源码我们可以看出，我们既可以使用一个字符串来配置多个 Spring Bean 配置信息，也可以使用字符串数组，即下面两种方式都是可以的：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//法1</span></span><br><span class="line">ClassPathResource res = <span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">"a.xml,b.xml"</span>);</span><br><span class="line"><span class="hljs-comment">//法2</span></span><br><span class="line">ClassPathResource res =<span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"a.xml"</span>,<span class="hljs-string">"b.xml"</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>开始启动</p><p>SpringIOC 容器对 Bean 配置资源的载入是从<code>refresh()</code>函数开始的，refresh()是一个模板方法，规定了IOC容器的启动流程 ， 有些逻辑要交给其子类去实 现 。它对 Bean配置资源进行载入<code>ClassPathXmlApplicationContext</code> 通过调用其父类<code>AbstractApplicationContext</code> 的 <code>refresh()</code>函数启动整个 IOC 容器对 Bean 定义的载入过程，现在我们来详细看看 refresh()中的逻辑处理：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="hljs-comment">// Prepare this context for refreshing.</span></span><br><span class="line"><span class="hljs-comment">//1、调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line"><span class="hljs-comment">//2、告诉子类启动refreshBeanFactory()方法，Bean定义资源文件的载入从</span></span><br><span class="line"><span class="hljs-comment">//子类的refreshBeanFactory()方法启动</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line"><span class="hljs-comment">//3、为BeanFactory配置容器特性，例如类加载器、事件处理器等</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line"><span class="hljs-comment">//4、为容器的某些子类指定特殊的BeanPost事件处理器</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line"><span class="hljs-comment">//5、调用所有注册的BeanFactoryPostProcessor的Bean</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line"><span class="hljs-comment">//6、为BeanFactory注册BeanPost事件处理器.</span></span><br><span class="line"><span class="hljs-comment">//BeanPostProcessor是Bean后置处理器，用于监听容器触发的事件</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Initialize message source for this context.</span></span><br><span class="line"><span class="hljs-comment">//7、初始化信息源，和国际化相关.</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Initialize event multicaster for this context.</span></span><br><span class="line"><span class="hljs-comment">//8、初始化容器事件传播器.</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line"><span class="hljs-comment">//9、调用子类的某些特殊Bean初始化方法</span></span><br><span class="line">onRefresh();</span><br><span class="line"><span class="hljs-comment">// Check for listener beans and register them.</span></span><br><span class="line"><span class="hljs-comment">//10、为事件传播器注册事件监听器.</span></span><br><span class="line">registerListeners();</span><br><span class="line"><span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line"><span class="hljs-comment">//11、初始化所有剩余的单例Bean</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"><span class="hljs-comment">// Last step: publish corresponding event.</span></span><br><span class="line"><span class="hljs-comment">//12、初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="hljs-string">"Exception encountered during context initialization - "</span> +</span><br><span class="line"><span class="hljs-string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line"><span class="hljs-comment">//13、销毁已创建的Bean</span></span><br><span class="line">destroyBeans();</span><br><span class="line"><span class="hljs-comment">// Reset 'active' flag.</span></span><br><span class="line"><span class="hljs-comment">//14、取消refresh操作，重置容器的同步标识。</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"><span class="hljs-comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line"><span class="hljs-comment">//15、重设公共缓存</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>refresh()</code>方法主要为 IOC 容器 Bean 的生命周期管理提供条件，Spring IOC 容器载入 Bean 配置信息从其子类容器的<code>refreshBeanFactory()</code>方法启动, 所以整个<code>refresh()</code>中</p><p><code>ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</code>这句以后代码都是注册容器的信息源和生命周期事件，我们前面说的载入就是从这句代码开始启动。</p><p><code>refresh()</code>方法的主要作用是：在创建 IOC 容器前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在 refresh 之后使用的是新建立起来的 IOC 容器。它类似于对 IOC 容器的重启，在新建立好的容器中对容器进行初始化，对 Bean 配置资源进行载入。</p></li><li><p>创建容器</p><p><code>obtainFreshBeanFactory()</code>方法调用子类容器的 <code>refreshBeanFactory()</code>方法，启动容器载入 Bean 配置信息的过程，代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> ConfigurableListableBeanFactory <span class="hljs-title">obtainFreshBeanFactory</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//这里使用了委派设计模式，父类定义了抽象的 refreshBeanFactory()方法，具体实现调用子类容器的 refreshBeanFactory()方</span></span><br><span class="line">    法</span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="hljs-string">"Bean factory for "</span> + getDisplayName() + <span class="hljs-string">": "</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractApplicationContext</code> 类中只抽象定义了 <code>refreshBeanFactory()</code>方法，容器真正调用的是其子类 <code>AbstractRefreshableApplicationContext</code> 实现的 <code>refreshBeanFactory()</code>方法，方法的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refreshBeanFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//如果已经有容器，销毁容器中的bean，关闭容器</span></span><br><span class="line"><span class="hljs-keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">destroyBeans();</span><br><span class="line">closeBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//创建IOC容器</span></span><br><span class="line">DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">beanFactory.setSerializationId(getId());</span><br><span class="line"><span class="hljs-comment">//对IOC容器进行定制化，如设置启动参数，开启注解的自动装配等</span></span><br><span class="line">customizeBeanFactory(beanFactory);</span><br><span class="line"><span class="hljs-comment">//调用载入Bean定义的方法，主要这里又使用了一个委派模式，在当前类中只定义了抽象的loadBeanDefinitions方法，具体的实现调用子类容器</span></span><br><span class="line">loadBeanDefinitions(beanFactory);</span><br><span class="line"><span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApplicationContextException(<span class="hljs-string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中，先判断 <code>BeanFactory</code> 是否存在，如果存在则先销毁 <code>beans</code> 并关闭 <code>beanFactory</code>，接着创建 <code>DefaultListableBeanFactory</code>，并调用<code>loadBeanDefinitions(beanFactory)</code>装载 bean 定义。</p></li><li><p>载入配置路径</p><p><code>AbstractRefreshableApplicationContext</code> 中只定义了抽象的 <code>loadBeanDefinitions</code> 方法，容器真正调用的是其子类 <code>AbstractXmlApplicationContext</code> 对该方法的实现，<code>AbstractXmlApplicationContext</code>的主要源码如下：<code>loadBeanDefinitions()</code>方法同样是抽象方法, 是由其子类实现的, 也即在<code>AbstractXmlApplicationContext</code> 中。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractXmlApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractRefreshableConfigApplicationContext</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//实现父类抽象的载入 Bean 定义方法</span></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//创建 XmlBeanDefinitionReader，即创建 Bean 读取器，并通过回调设置到容器中去，容器使用该读取器读取 Bean 配置资源</span></span><br><span class="line">        XmlBeanDefinitionReader beanDefinitionReader = <span class="hljs-keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"><span class="hljs-comment">//为 Bean 读取器设置 Spring 资源加载器，AbstractXmlApplicationContext 的</span></span><br><span class="line"><span class="hljs-comment">//祖先父类 AbstractApplicationContext 继承 DefaultResourceLoader，因此，容器本身也是一个资源加载器</span></span><br><span class="line">        beanDefinitionReader.setEnvironment(<span class="hljs-keyword">this</span>.getEnvironment());</span><br><span class="line">        beanDefinitionReader.setResourceLoader(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-comment">//为 Bean 读取器设置 SAX xml 解析器</span></span><br><span class="line">        beanDefinitionReader.setEntityResolver(<span class="hljs-keyword">new</span> ResourceEntityResolver(<span class="hljs-keyword">this</span>));</span><br><span class="line"><span class="hljs-comment">//当 Bean 读取器读取 Bean 定义的 Xml 资源文件时，启用 Xml 的校验机制</span></span><br><span class="line">        initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line"><span class="hljs-comment">//Bean 读取器真正实现加载的方法</span></span><br><span class="line">        loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initBeanDefinitionReader</span><span class="hljs-params">(XmlBeanDefinitionReader reader)</span> </span>&#123;</span><br><span class="line">        reader.setValidating(<span class="hljs-keyword">this</span>.validating);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//Xml Bean 读取器加载 Bean 配置资源</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(XmlBeanDefinitionReader reader)</span> <span class="hljs-keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取 Bean 配置资源的定位</span></span><br><span class="line">        Resource[] configResources = getConfigResources();</span><br><span class="line">        <span class="hljs-keyword">if</span> (configResources != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//Xml Bean 读取器调用其父类 AbstractBeanDefinitionReader 读取定位的 Bean 配置资源</span></span><br><span class="line">            reader.loadBeanDefinitions(configResources);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="hljs-comment">// 如果子类中获取的 Bean 配置资源定位为空，则获取 ClassPathXmlApplicationContext</span></span><br><span class="line"><span class="hljs-comment">// 构造方法中 setConfigLocations 方法设置的资源</span></span><br><span class="line">        String[] configLocations = getConfigLocations();</span><br><span class="line">        <span class="hljs-keyword">if</span> (configLocations != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//Xml Bean 读取器调用其父类 AbstractBeanDefinitionReader 读取定位的 Bean 配置资源</span></span><br><span class="line">            reader.loadBeanDefinitions(configLocations);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//这里又使用了一个委托模式，调用子类的获取 Bean 配置资源定位的方法</span></span><br><span class="line"><span class="hljs-comment">//该方法在 ClassPathXmlApplicationContext 中进行实现，对于我们</span></span><br><span class="line"><span class="hljs-comment">//举例分析源码的 ClassPathXmlApplicationContext 没有使用该方法</span></span><br><span class="line">    <span class="hljs-meta">@Nullable</span></span><br><span class="line">    <span class="hljs-keyword">protected</span> Resource[] getConfigResources() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 <code>XmlBean</code> 读取器的其中一种策略 <code>XmlBeanDefinitionReader</code> 为例。<code>XmlBeanDefinitionReader</code> 调用其父类<code>AbstractBeanDefinitionReader</code>的 <code>reader.loadBeanDefinitions()</code>方法读取Bean配置资源。由于我们使用 <code>ClassPathXmlApplicationContext</code> 作为例子分析，因此 <code>getConfigResources</code> 的返回值为 null，因此程序执行 <code>reader.loadBeanDefinitions(configLocations)</code>分支。</p></li><li><p>分配路径处理策略</p><p>在 <code>XmlBeanDefinitionReader</code> 的抽象父类 <code>AbstractBeanDefinitionReader</code> 中定义了载入过程。<code>AbstractBeanDefinitionReader</code> 的 <code>loadBeanDefinitions()</code>方法源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//重载方法，调用下面的loadBeanDefinitions(String, Set&lt;Resource&gt;);方法</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(String location)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> loadBeanDefinitions(location, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(String location, @Nullable Set&lt;Resource&gt; actualResources)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取在IoC容器初始化过程中设置的资源加载器</span></span><br><span class="line">ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line"><span class="hljs-keyword">if</span> (resourceLoader == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="hljs-string">"Cannot import bean definitions from location ["</span> + location + <span class="hljs-string">"]: no ResourceLoader available"</span>);</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line"><span class="hljs-keyword">if</span> (resourceLoader <span class="hljs-keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line"><span class="hljs-comment">// Resource pattern matching available.</span></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//将指定位置的Bean定义资源文件解析为Spring IOC容器封装的资源</span></span><br><span class="line"><span class="hljs-comment">//加载多个指定位置的Bean定义资源文件</span></span><br><span class="line">Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line"><span class="hljs-comment">//委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能</span></span><br><span class="line"><span class="hljs-keyword">int</span> loadCount = loadBeanDefinitions(resources);</span><br><span class="line"><span class="hljs-keyword">if</span> (actualResources != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">actualResources.add(resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Loaded "</span> + loadCount + <span class="hljs-string">" bean definitions from location pattern ["</span> + location + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> loadCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="hljs-string">"Could not resolve bean definition resource pattern ["</span> + location + <span class="hljs-string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Can only load single resources by absolute URL.</span></span><br><span class="line"><span class="hljs-comment">//将指定位置的Bean定义资源文件解析为Spring IOC容器封装的资源</span></span><br><span class="line"><span class="hljs-comment">//加载单个指定位置的Bean定义资源文件</span></span><br><span class="line">Resource resource = resourceLoader.getResource(location);</span><br><span class="line"><span class="hljs-comment">//委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能</span></span><br><span class="line"><span class="hljs-keyword">int</span> loadCount = loadBeanDefinitions(resource);</span><br><span class="line"><span class="hljs-keyword">if</span> (actualResources != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">actualResources.add(resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Loaded "</span> + loadCount + <span class="hljs-string">" bean definitions from location ["</span> + location + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> loadCount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line"><span class="hljs-comment">//重载方法，调用loadBeanDefinitions(String);</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(String... locations)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">Assert.notNull(locations, <span class="hljs-string">"Location array must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">int</span> counter = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (String location : locations) &#123;</span><br><span class="line">counter += loadBeanDefinitions(location);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractRefreshableConfigApplicationContext</code> 的 <code>loadBeanDefinitions(Resource...resources)</code> 方法实际上是调用 <code>AbstractBeanDefinitionReader</code> 的 <code>loadBeanDefinitions()</code>方法。从对 <code>AbstractBeanDefinitionReader</code> 的 <code>loadBeanDefinitions()</code>方法源码分析可以看出该方法就做了两件事：<br>首先，调用资源加载器的获取资源方法 <code>resourceLoader.getResource(location)</code>，获取到要加载的资源。<br>其次，真正执行加载功能是其子类 <code>XmlBeanDefinitionReader</code> 的 <code>loadBeanDefinitions()</code>方法。在<code>loadBeanDefinitions()</code>方法中调用了 <code>AbstractApplicationContext</code> 的 <code>getResources()</code>方法，跟进去之后发现<code>getResources()</code>方法其实定义在 <code>ResourcePatternResolver</code> 中，此时，我们有必要来看一下<code>ResourcePatternResolver</code> 的全类图：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/ResourceLoader.png"><p>从上面可以看到 <code>ResourceLoader</code> 与 <code>ApplicationContext</code> 的继承关系，可以看出其实际调用的是<code>DefaultResourceLoader</code>中的<code>getSource()</code> 方法定位 <code>Resource</code> ，因为<code>ClassPathXmlApplicationContext</code> 本身就是 <code>DefaultResourceLoader</code> 的实现类，所以此时又回到了<code>ClassPathXmlApplicationContext</code> 中来。</p></li><li><p>解析配置文件路径</p><p><code>XmlBeanDefinitionReader</code>通过配置文件<code>ClassPathXmlApplicationContext</code>的父类<code>DefaultResourceLoader</code>的 <code>getResource()</code>方法获取要加载的资源，其源码如下</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//获取Resource的具体实现方法</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Resource <span class="hljs-title">getResource</span><span class="hljs-params">(String location)</span> </span>&#123;</span><br><span class="line">Assert.notNull(location, <span class="hljs-string">"Location must not be null"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (ProtocolResolver protocolResolver : <span class="hljs-keyword">this</span>.protocolResolvers) &#123;</span><br><span class="line">Resource resource = protocolResolver.resolve(location, <span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (resource != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> resource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果是类路径的方式，那需要使用ClassPathResource 来得到bean 文件的资源对象</span></span><br><span class="line"><span class="hljs-keyword">if</span> (location.startsWith(<span class="hljs-string">"/"</span>)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> getResourceByPath(location);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (location.startsWith(CLASSPATH_URL_PREFIX)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Try to parse the location as a URL...</span></span><br><span class="line"><span class="hljs-comment">// 如果是URL 方式，使用UrlResource 作为bean 文件的资源对象</span></span><br><span class="line">URL url = <span class="hljs-keyword">new</span> URL(location);</span><br><span class="line"><span class="hljs-keyword">return</span> (ResourceUtils.isFileURL(url) ? <span class="hljs-keyword">new</span> FileUrlResource(url) : <span class="hljs-keyword">new</span> UrlResource(url));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (MalformedURLException ex) &#123;</span><br><span class="line"><span class="hljs-comment">// No URL -&gt; resolve as resource path.</span></span><br><span class="line"><span class="hljs-comment">//如果既不是classpath标识，又不是URL标识的Resource定位，则调用</span></span><br><span class="line"><span class="hljs-comment">//容器本身的getResourceByPath方法获取Resource</span></span><br><span class="line"><span class="hljs-keyword">return</span> getResourceByPath(location);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DefaultResourceLoader</code> 提供了 <code>getResourceByPath()</code>方法的实现，就是为了处理既不是 classpath标识，又不是 URL 标识的 Resource 定位这种情况。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Resource <span class="hljs-title">getResourceByPath</span><span class="hljs-params">(String path)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ClassPathContextResource(path, getClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>ClassPathResource</code> 中完成了对整个路径的解析。这样，就可以从类路径上对 IOC 配置文件进行加载，当然我们可以按照这个逻辑从任何地方加载，在 Spring 中我们看到它提供的各种资源抽象，比如<code>ClassPathResource、URLResource、FileSystemResource</code> 等来供我们使用。上面我们看到的是定位Resource 的一个过程，而这只是加载过程的一部分。例如 <code>FileSystemXmlApplication</code> 容器就重写了<code>getResourceByPath()</code>方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Resource <span class="hljs-title">getResourceByPath</span><span class="hljs-params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (path.startsWith(<span class="hljs-string">"/"</span>)) &#123;</span><br><span class="line">    path = path.substring(<span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//这里使用文件系统资源对象来定义 bean 文件</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FileSystemResource(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过子类的覆盖，巧妙地完成了将类路径变为文件路径的转换。</p></li><li><p>开始读取配置内容</p><p>继续回到 <code>XmlBeanDefinitionReader</code> 的 l<code>oadBeanDefinitions(Resource …)</code>方法看到代表 bean 文件的资源定义以后的载入过程。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//XmlBeanDefinitionReader加载资源的入口方法</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(Resource resource)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"><span class="hljs-comment">//将读入的XML资源进行特殊编码处理</span></span><br><span class="line"><span class="hljs-keyword">return</span> loadBeanDefinitions(<span class="hljs-keyword">new</span> EncodedResource(resource));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//这里是载入XML形式Bean定义资源文件方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(EncodedResource encodedResource)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">Assert.notNull(encodedResource, <span class="hljs-string">"EncodedResource must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="hljs-string">"Loading XML bean definitions from "</span> + encodedResource.getResource());</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line">Set&lt;EncodedResource&gt; currentResources = <span class="hljs-keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line"><span class="hljs-keyword">if</span> (currentResources == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">currentResources = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(<span class="hljs-number">4</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="hljs-string">"Detected cyclic loading of "</span> + encodedResource + <span class="hljs-string">" - check your import definitions!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//将资源文件转为InputStream的IO流</span></span><br><span class="line">InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//从InputStream中得到XML的解析源</span></span><br><span class="line">InputSource inputSource = <span class="hljs-keyword">new</span> InputSource(inputStream);</span><br><span class="line"><span class="hljs-keyword">if</span> (encodedResource.getEncoding() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//这里是具体的读取过程</span></span><br><span class="line"><span class="hljs-keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-comment">//关闭从Resource中得到的IO流</span></span><br><span class="line">inputStream.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="hljs-string">"IOException parsing XML document from "</span> + encodedResource.getResource(), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">currentResources.remove(encodedResource);</span><br><span class="line"><span class="hljs-keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>载入 Bean 配置信息的最后一步是将 Bean 配置信息转换为 Document 对象，该过程由<code>documentLoader()</code>方法实现。</p></li><li><p>准备文档对象</p><p><code>DocumentLoader</code> 将 Bean 配置资源转换成 Document 对象的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultDocumentLoader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DocumentLoader</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="hljs-comment">//使用标准的JAXP将载入的Bean定义资源转换成document对象</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Document <span class="hljs-title">loadDocument</span><span class="hljs-params">(InputSource inputSource, EntityResolver entityResolver,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">ErrorHandler errorHandler, <span class="hljs-keyword">int</span> validationMode, <span class="hljs-keyword">boolean</span> namespaceAware)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//创建文件解析器工厂</span></span><br><span class="line">DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Using JAXP provider ["</span> + factory.getClass().getName() + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//创建文档解析器</span></span><br><span class="line">DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler);</span><br><span class="line"><span class="hljs-comment">//解析Spring的Bean定义资源</span></span><br><span class="line"><span class="hljs-keyword">return</span> builder.parse(inputSource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的解析过程是调用 JavaEE 标准的 JAXP 标准进行处理。至此 Spring IOC 容器根据定位的 Bean 配置信息，将其加载读入并转换成为 Document 对象过程完成。接下来我们要继续分析 Spring IOC 容器将载入的 Bean 配置信息转换为 Document 对象之后，是如何将其解析为Spring IOC 管理的 Bean 对象并将其注册到容器中的。</p></li><li><p>分配解析策略</p><p><code>XmlBeanDefinitionReader</code> 类中的 <code>doLoadBeanDefinition()</code>方法是从特定 XML 文件中实际载入Bean 配置资源的方法，该方法在载入 Bean 配置资源之后将其转换为 Document 对象，接下来调用<code>registerBeanDefinitions()</code> 启 动 Spring IOC 容 器 对 Bean定义的解析过程，<code>registerBeanDefinitions()</code>方法源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//按照 Spring 的 Bean 语义要求将 Bean 配置资源解析并转换为容器内部数据结构</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(Document doc, Resource resource)</span> <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//得到 BeanDefinitionDocumentReader 来对 xml 格式的 BeanDefinition 解析</span></span><br><span class="line">    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">    <span class="hljs-comment">//获得容器中注册的 Bean 数量</span></span><br><span class="line">    <span class="hljs-keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">    <span class="hljs-comment">//解析过程入口，这里使用了委派模式，BeanDefinitionDocumentReader 只是个接口,</span></span><br><span class="line">    <span class="hljs-comment">//具体的解析实现过程有实现类 DefaultBeanDefinitionDocumentReader 完成</span></span><br><span class="line">    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">    <span class="hljs-comment">//统计解析的 Bean 数量</span></span><br><span class="line">    <span class="hljs-keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean 配置资源的载入解析分为以下两个过程：</p><p>首先，通过调用 XML 解析器将 Bean 配置信息转换得到 Document 对象，但是这些 Document 对象并没有按照 Spring 的 Bean 规则进行解析。这一步是载入的过程.</p><p>其次，在完成通用的 XML 解析之后，按照 Spring Bean 的定义规则对 Document 对象进行解析，其解析过程是在接口<code>BeanDefinitionDocumentReader</code>的实现类<code>DefaultBeanDefinitionDocumentReader</code>中实现的</p></li><li><p>将配置载入内存</p><p><code>BeanDefinitionDocumentReader</code> 接 口 通 过 r<code>egisterBeanDefinitions()</code> 方 法 调 用 其 实现类<code>DefaultBeanDefinitionDocumentReader</code> 对 Document 对象进行解析，解析的代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//根据Spring DTD对Bean的定义规则解析Bean定义Document对象</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获得XML描述符</span></span><br><span class="line"><span class="hljs-keyword">this</span>.readerContext = readerContext;</span><br><span class="line">logger.debug(<span class="hljs-string">"Loading bean definitions"</span>);</span><br><span class="line"><span class="hljs-comment">//获得Document的根元素</span></span><br><span class="line">Element root = doc.getDocumentElement();</span><br><span class="line">doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doRegisterBeanDefinitions</span><span class="hljs-params">(Element root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//具体的解析过程由BeanDefinitionParserDelegate实现，</span></span><br><span class="line"><span class="hljs-comment">//BeanDefinitionParserDelegate中定义了Spring Bean定义XML文件的各种元素</span></span><br><span class="line">BeanDefinitionParserDelegate parent = <span class="hljs-keyword">this</span>.delegate;</span><br><span class="line"><span class="hljs-keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line"><span class="hljs-keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="hljs-string">"Skipped XML bean definition file due to specified profiles ["</span> + profileSpec +</span><br><span class="line"><span class="hljs-string">"] not matching: "</span> + getReaderContext().getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//在解析Bean定义之前，进行自定义的解析，增强解析过程的可扩展性</span></span><br><span class="line">preProcessXml(root);</span><br><span class="line"><span class="hljs-comment">//从Document的根元素开始进行Bean定义的Document对象</span></span><br><span class="line">parseBeanDefinitions(root, <span class="hljs-keyword">this</span>.delegate);</span><br><span class="line"><span class="hljs-comment">//在解析Bean定义之后，进行自定义的解析，增加解析过程的可扩展性</span></span><br><span class="line">postProcessXml(root);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//创建BeanDefinitionParserDelegate，用于完成真正的解析过程</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> BeanDefinitionParserDelegate <span class="hljs-title">createDelegate</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">XmlReaderContext readerContext, Element root, @Nullable BeanDefinitionParserDelegate parentDelegate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BeanDefinitionParserDelegate delegate = <span class="hljs-keyword">new</span> BeanDefinitionParserDelegate(readerContext);</span><br><span class="line"><span class="hljs-comment">//BeanDefinitionParserDelegate初始化Document根元素</span></span><br><span class="line">delegate.initDefaults(root, parentDelegate);</span><br><span class="line"><span class="hljs-keyword">return</span> delegate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//使用Spring的Bean规则从Document的根元素开始进行Bean定义的Document对象</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseBeanDefinitions</span><span class="hljs-params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//Bean定义的Document对象使用了Spring默认的XML命名空间</span></span><br><span class="line"><span class="hljs-keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line"><span class="hljs-comment">//获取Bean定义的Document对象根元素的所有子节点</span></span><br><span class="line">NodeList nl = root.getChildNodes();</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">Node node = nl.item(i);</span><br><span class="line"><span class="hljs-comment">//获得Document节点是XML元素节点</span></span><br><span class="line"><span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> Element) &#123;</span><br><span class="line">Element ele = (Element) node;</span><br><span class="line"><span class="hljs-comment">//Bean定义的Document的元素节点使用的是Spring默认的XML命名空间</span></span><br><span class="line"><span class="hljs-keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line"><span class="hljs-comment">//使用Spring的Bean规则解析元素节点</span></span><br><span class="line">parseDefaultElement(ele, delegate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//没有使用Spring默认的XML命名空间，则使用用户自定义的解//析规则解析元素节点</span></span><br><span class="line">delegate.parseCustomElement(ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//Document的根节点没有使用Spring默认的命名空间，则使用用户自定义的</span></span><br><span class="line"><span class="hljs-comment">//解析规则解析Document根节点</span></span><br><span class="line">delegate.parseCustomElement(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//使用Spring的Bean规则解析Document元素节点</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseDefaultElement</span><span class="hljs-params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//如果元素节点是&lt;Import&gt;导入元素，进行导入解析</span></span><br><span class="line"><span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">importBeanDefinitionResource(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果元素节点是&lt;Alias&gt;别名元素，进行别名解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">processAliasRegistration(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//元素节点既不是导入元素，也不是别名元素，即普通的&lt;Bean&gt;元素，</span></span><br><span class="line"><span class="hljs-comment">//按照Spring的Bean规则解析元素</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">processBeanDefinition(ele, delegate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">// recurse</span></span><br><span class="line">doRegisterBeanDefinitions(ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Parse an "import" element and load the bean definitions</span></span><br><span class="line"><span class="hljs-comment"> * from the given resource into the bean factory.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//解析&lt;Import&gt;导入元素，从给定的导入路径加载Bean定义资源到Spring IoC容器中</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">importBeanDefinitionResource</span><span class="hljs-params">(Element ele)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取给定的导入元素的location属性</span></span><br><span class="line">String location = ele.getAttribute(RESOURCE_ATTRIBUTE);</span><br><span class="line"><span class="hljs-comment">//如果导入元素的location属性值为空，则没有导入任何资源，直接返回</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(location)) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Resource location must not be empty"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Resolve system properties: e.g. "$&#123;user.dir&#125;"</span></span><br><span class="line"><span class="hljs-comment">//使用系统变量值解析location属性值</span></span><br><span class="line">location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);</span><br><span class="line"></span><br><span class="line">Set&lt;Resource&gt; actualResources = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(<span class="hljs-number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Discover whether the location is an absolute or relative URI</span></span><br><span class="line"><span class="hljs-comment">//标识给定的导入元素的location是否是绝对路径</span></span><br><span class="line"><span class="hljs-keyword">boolean</span> absoluteLocation = <span class="hljs-keyword">false</span>;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line"><span class="hljs-comment">// cannot convert to an URI, considering the location relative</span></span><br><span class="line"><span class="hljs-comment">// unless it is the well-known Spring prefix "classpath*:"</span></span><br><span class="line"><span class="hljs-comment">//给定的导入元素的location不是绝对路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Absolute or relative?</span></span><br><span class="line"><span class="hljs-comment">//给定的导入元素的location是绝对路径</span></span><br><span class="line"><span class="hljs-keyword">if</span> (absoluteLocation) &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//使用资源读入器加载给定路径的Bean定义资源</span></span><br><span class="line"><span class="hljs-keyword">int</span> importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Imported "</span> + importCount + <span class="hljs-string">" bean definitions from URL location ["</span> + location + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">getReaderContext().error(</span><br><span class="line"><span class="hljs-string">"Failed to import bean definitions from URL location ["</span> + location + <span class="hljs-string">"]"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// No URL -&gt; considering resource location as relative to the current file.</span></span><br><span class="line"><span class="hljs-comment">//给定的导入元素的location是相对路径</span></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> importCount;</span><br><span class="line"><span class="hljs-comment">//将给定导入元素的location封装为相对路径资源</span></span><br><span class="line">Resource relativeResource = getReaderContext().getResource().createRelative(location);</span><br><span class="line"><span class="hljs-comment">//封装的相对路径资源存在</span></span><br><span class="line"><span class="hljs-keyword">if</span> (relativeResource.exists()) &#123;</span><br><span class="line"><span class="hljs-comment">//使用资源读入器加载Bean定义资源</span></span><br><span class="line">importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);</span><br><span class="line">actualResources.add(relativeResource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//封装的相对路径资源不存在</span></span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//获取Spring IOC容器资源读入器的基本路径</span></span><br><span class="line">String baseLocation = getReaderContext().getResource().getURL().toString();</span><br><span class="line"><span class="hljs-comment">//根据Spring IOC容器资源读入器的基本路径加载给定导入路径的资源</span></span><br><span class="line">importCount = getReaderContext().getReader().loadBeanDefinitions(</span><br><span class="line">StringUtils.applyRelativePath(baseLocation, location), actualResources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Imported "</span> + importCount + <span class="hljs-string">" bean definitions from relative location ["</span> + location + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Failed to resolve current resource location"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Failed to import bean definitions from relative location ["</span> + location + <span class="hljs-string">"]"</span>,</span><br><span class="line">ele, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Resource[] actResArray = actualResources.toArray(<span class="hljs-keyword">new</span> Resource[actualResources.size()]);</span><br><span class="line"><span class="hljs-comment">//在解析完&lt;Import&gt;元素之后，发送容器导入其他资源处理完成事件</span></span><br><span class="line">getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Process the given alias element, registering the alias with the registry.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//解析&lt;Alias&gt;别名元素，为Bean向Spring IoC容器注册别名</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processAliasRegistration</span><span class="hljs-params">(Element ele)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;Alias&gt;别名元素中name的属性值</span></span><br><span class="line">String name = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"><span class="hljs-comment">//获取&lt;Alias&gt;别名元素中alias的属性值</span></span><br><span class="line">String alias = ele.getAttribute(ALIAS_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">boolean</span> valid = <span class="hljs-keyword">true</span>;</span><br><span class="line"><span class="hljs-comment">//&lt;alias&gt;别名元素的name属性值为空</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Name must not be empty"</span>, ele);</span><br><span class="line">valid = <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//&lt;alias&gt;别名元素的alias属性值为空</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(alias)) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Alias must not be empty"</span>, ele);</span><br><span class="line">valid = <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (valid) &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//向容器的资源读入器注册别名</span></span><br><span class="line">getReaderContext().getRegistry().registerAlias(name, alias);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Failed to register alias '"</span> + alias +</span><br><span class="line"><span class="hljs-string">"' for bean with name '"</span> + name + <span class="hljs-string">"'"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//在解析完&lt;Alias&gt;元素之后，发送容器别名处理完成事件</span></span><br><span class="line">getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Process the given bean element, parsing the bean definition</span></span><br><span class="line"><span class="hljs-comment"> * and registering it with the registry.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-comment">//解析Bean定义资源Document对象的普通元素</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processBeanDefinition</span><span class="hljs-params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line"><span class="hljs-comment">// BeanDefinitionHolder是对BeanDefinition的封装，即Bean定义的封装类</span></span><br><span class="line"><span class="hljs-comment">//对Document对象中&lt;Bean&gt;元素的解析由BeanDefinitionParserDelegate实现</span></span><br><span class="line"><span class="hljs-comment">// BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span></span><br><span class="line"><span class="hljs-keyword">if</span> (bdHolder != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Register the final decorated instance.</span></span><br><span class="line"><span class="hljs-comment">//向Spring IOC容器注册解析得到的Bean定义，这是Bean定义向IOC容器注册的入口</span></span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">getReaderContext().error(<span class="hljs-string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">bdHolder.getBeanName() + <span class="hljs-string">"'"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Send registration event.</span></span><br><span class="line"><span class="hljs-comment">//在完成向Spring IOC容器注册解析得到的Bean定义之后，发送注册事件</span></span><br><span class="line">getReaderContext().fireComponentRegistered(<span class="hljs-keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述 Spring IOC 容器对载入的 Bean 定义 Document 解析可以看出，我们使用 Spring 时，在Spring 配置文件中可以使用<code>&lt;import&gt;</code>元素来导入 IOC 容器所需要的其他资源，Spring IOC 容器在解析时会首先将指定导入的资源加载进容器中。使用<code>&lt;ailas&gt;</code>别名时，Spring IOC 容器首先将别名元素所定义的别名注册到容器中。对于既不是<code>&lt;import&gt;</code>元素，又不是<code>&lt;alias&gt;</code>元素的元素，即 Spring 配置文件中普通的<code>&lt;bean&gt;</code>元素的解析由<code>BeanDefinitionParserDelegate</code> 类的 <code>parseBeanDefinitionElement()</code>方法来实现。</p></li><li><p>载入<code>&lt;bean&gt;</code>元素</p><p>Bean 配置信息中的<code>&lt;import&gt;</code>和<code>&lt;alias&gt;</code>元素解析在 <code>DefaultBeanDefinitionDocumentReader</code> 中已经完成，对 Bean 配置信息中使用最多的<code>&lt;bean&gt;</code>元素交由 <code>BeanDefinitionParserDelegate</code> 来解析，其解析实现的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素的入口</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> BeanDefinitionHolder <span class="hljs-title">parseBeanDefinitionElement</span><span class="hljs-params">(Element ele)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseBeanDefinitionElement(ele, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//解析Bean定义资源文件中的&lt;Bean&gt;元素，这个方法中主要处理&lt;Bean&gt;元素的id，name和别名属性</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> BeanDefinitionHolder <span class="hljs-title">parseBeanDefinitionElement</span><span class="hljs-params">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;Bean&gt;元素中的id属性值</span></span><br><span class="line">String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line"><span class="hljs-comment">//获取&lt;Bean&gt;元素中的name属性值</span></span><br><span class="line">String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//获取&lt;Bean&gt;元素中的alias属性值</span></span><br><span class="line">List&lt;String&gt; aliases = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//将&lt;Bean&gt;元素中的所有name属性值存放到别名中</span></span><br><span class="line"><span class="hljs-keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">String beanName = id;</span><br><span class="line"><span class="hljs-comment">//如果&lt;Bean&gt;元素中没有配置id属性时，将别名中的第一个值赋值给beanName</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">beanName = aliases.remove(<span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"No XML 'id' specified - using '"</span> + beanName +</span><br><span class="line"><span class="hljs-string">"' as bean name and "</span> + aliases + <span class="hljs-string">" as aliases"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//检查&lt;Bean&gt;元素所配置的id或者name的唯一性，containingBean标识&lt;Bean&gt;</span></span><br><span class="line"><span class="hljs-comment">//元素中是否包含子&lt;Bean&gt;元素</span></span><br><span class="line"><span class="hljs-keyword">if</span> (containingBean == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//检查&lt;Bean&gt;元素所配置的id、name或者别名是否重复</span></span><br><span class="line">checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//详细对&lt;Bean&gt;元素中配置的Bean定义进行解析的地方</span></span><br><span class="line">AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line"><span class="hljs-keyword">if</span> (beanDefinition != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (containingBean != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//如果&lt;Bean&gt;元素中没有配置id、别名或者name，且没有包含子元素</span></span><br><span class="line"><span class="hljs-comment">//&lt;Bean&gt;元素，为解析的Bean生成一个唯一beanName并注册</span></span><br><span class="line">beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">beanDefinition, <span class="hljs-keyword">this</span>.readerContext.getRegistry(), <span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//如果&lt;Bean&gt;元素中没有配置id、别名或者name，且包含了子元素</span></span><br><span class="line"><span class="hljs-comment">//&lt;Bean&gt;元素，为解析的Bean使用别名向IOC容器注册</span></span><br><span class="line">beanName = <span class="hljs-keyword">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line"><span class="hljs-comment">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class="line"><span class="hljs-comment">// if the generator returned the class name plus a suffix.</span></span><br><span class="line"><span class="hljs-comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class="line"><span class="hljs-comment">//为解析的Bean使用别名注册时，为了向后兼容</span></span><br><span class="line"><span class="hljs-comment">//Spring1.2/2.0，给别名添加类名后缀</span></span><br><span class="line">String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line"><span class="hljs-keyword">if</span> (beanClassName != <span class="hljs-keyword">null</span> &amp;&amp;</span><br><span class="line">beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">!<span class="hljs-keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">aliases.add(beanClassName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Neither XML 'id' nor 'name' specified - "</span> +</span><br><span class="line"><span class="hljs-string">"using generated bean name ["</span> + beanName + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">error(ex.getMessage(), ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//当解析出错时，返回null</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//详细对&lt;Bean&gt;元素中配置的Bean定义其他属性进行解析</span></span><br><span class="line"><span class="hljs-comment">//由于上面的方法中已经对Bean的id、name和别名等属性进行了处理</span></span><br><span class="line"><span class="hljs-comment">//该方法中主要处理除这三个以外的其他属性数据</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AbstractBeanDefinition <span class="hljs-title">parseBeanDefinitionElement</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">Element ele, String beanName, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//记录解析的&lt;Bean&gt;</span></span><br><span class="line"><span class="hljs-keyword">this</span>.parseState.push(<span class="hljs-keyword">new</span> BeanEntry(beanName));</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//这里只读取&lt;Bean&gt;元素中配置的class名字，然后载入到BeanDefinition中去</span></span><br><span class="line"><span class="hljs-comment">//只是记录配置的class名字，不做实例化，对象的实例化在依赖注入时完成</span></span><br><span class="line">String className = <span class="hljs-keyword">null</span>;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//如果&lt;Bean&gt;元素中配置了parent属性，则获取parent属性的值</span></span><br><span class="line"><span class="hljs-keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">&#125;</span><br><span class="line">String parent = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//根据&lt;Bean&gt;元素配置的class名称和parent属性值创建BeanDefinition</span></span><br><span class="line"><span class="hljs-comment">//为载入Bean定义信息做准备</span></span><br><span class="line">AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//对当前的&lt;Bean&gt;元素中配置的一些属性进行解析和设置，如配置的单态(singleton)属性等</span></span><br><span class="line">parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line"><span class="hljs-comment">//为&lt;Bean&gt;元素解析的Bean设置description信息</span></span><br><span class="line">bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//对&lt;Bean&gt;元素的meta(元信息)属性解析</span></span><br><span class="line">parseMetaElements(ele, bd);</span><br><span class="line"><span class="hljs-comment">//对&lt;Bean&gt;元素的lookup-method属性解析</span></span><br><span class="line">parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line"><span class="hljs-comment">//对&lt;Bean&gt;元素的replaced-method属性解析</span></span><br><span class="line">parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素的构造方法设置</span></span><br><span class="line">parseConstructorArgElements(ele, bd);</span><br><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素的&lt;property&gt;设置</span></span><br><span class="line">parsePropertyElements(ele, bd);</span><br><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素的qualifier属性</span></span><br><span class="line">parseQualifierElements(ele, bd);</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//为当前解析的Bean设置所需的资源和依赖对象</span></span><br><span class="line">bd.setResource(<span class="hljs-keyword">this</span>.readerContext.getResource());</span><br><span class="line">bd.setSource(extractSource(ele));</span><br><span class="line">        </span><br><span class="line"><span class="hljs-keyword">return</span> bd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">error(<span class="hljs-string">"Bean class ["</span> + className + <span class="hljs-string">"] not found"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">error(<span class="hljs-string">"Class that bean class ["</span> + className + <span class="hljs-string">"] depends on not found"</span>, ele, err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">error(<span class="hljs-string">"Unexpected failure during bean definition parsing"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.parseState.pop();</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素出错时，返回null</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要使用过 Spring，对 Spring 配置文件比较熟悉的人，通过对上述源码的分析，就会明白我们在 Spring配置文件中<code>&lt;Bean&gt;</code>元素的中配置的属性就是通过该方法解析和设置到 Bean 中去的。注意：在解析<code>&lt;Bean&gt;</code>元素过程中没有创建和实例化 Bean 对象，只是创建了 Bean 对象的定义类BeanDefinition，将<code>&lt;Bean&gt;</code>元素中的配置信息设置到 BeanDefinition 中作为记录，当依赖注入时才使用这些记录信息创建和实例化具体的 Bean 对象。上面方法中一些对一些配置如元信息(meta)、qualifier 等的解析，我们在 Spring 中配置时使用的也不多，我们在使用 Spring 的<code>&lt;Bean&gt;</code>元素时，配置最多的是<code>&lt;property&gt;</code>属性，因此我们下面继续分析源码，了解 Bean 的属性在解析时是如何设置的。</p></li><li><p>载入<code>&lt;property&gt;</code>元素</p><p><code>BeanDefinitionParserDelegate</code> 在解析<code>&lt;Bean&gt;</code>调用 <code>parsePropertyElements()</code>方法解析<code>&lt;Bean&gt;</code>元素中的<code>&lt;property&gt;</code>属性子元素，解析源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析&lt;Bean&gt;元素中的&lt;property&gt;子元素</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parsePropertyElements</span><span class="hljs-params">(Element beanEle, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;Bean&gt;元素中所有的子元素</span></span><br><span class="line">NodeList nl = beanEle.getChildNodes();</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">Node node = nl.item(i);</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;property&gt;子元素，则调用解析&lt;property&gt;子元素方法解析</span></span><br><span class="line"><span class="hljs-keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123;</span><br><span class="line">parsePropertyElement((Element) node, bd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//解析&lt;property&gt;元素</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parsePropertyElement</span><span class="hljs-params">(Element ele, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;property&gt;元素的名字</span></span><br><span class="line">String propertyName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class="line">error(<span class="hljs-string">"Tag 'property' must have a 'name' attribute"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">this</span>.parseState.push(<span class="hljs-keyword">new</span> PropertyEntry(propertyName));</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-comment">//如果一个Bean中已经有同名的property存在，则不进行解析，直接返回。</span></span><br><span class="line"><span class="hljs-comment">//即如果在同一个Bean中配置同名的property，则只有第一个起作用</span></span><br><span class="line"><span class="hljs-keyword">if</span> (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class="line">error(<span class="hljs-string">"Multiple 'property' definitions for property '"</span> + propertyName + <span class="hljs-string">"'"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//解析获取property的值</span></span><br><span class="line">Object val = parsePropertyValue(ele, bd, propertyName);</span><br><span class="line"><span class="hljs-comment">//根据property的名字和值创建property实例</span></span><br><span class="line">PropertyValue pv = <span class="hljs-keyword">new</span> PropertyValue(propertyName, val);</span><br><span class="line"><span class="hljs-comment">//解析&lt;property&gt;元素中的属性</span></span><br><span class="line">parseMetaElements(ele, pv);</span><br><span class="line">pv.setSource(extractSource(ele));</span><br><span class="line">bd.getPropertyValues().addPropertyValue(pv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.parseState.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//解析获取property值</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">parsePropertyValue</span><span class="hljs-params">(Element ele, BeanDefinition bd, @Nullable String propertyName)</span> </span>&#123;</span><br><span class="line">String elementName = (propertyName != <span class="hljs-keyword">null</span>) ?</span><br><span class="line"><span class="hljs-string">"&lt;property&gt; element for property '"</span> + propertyName + <span class="hljs-string">"'"</span> :</span><br><span class="line"><span class="hljs-string">"&lt;constructor-arg&gt; element"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Should only have one child element: ref, value, list, etc.</span></span><br><span class="line"><span class="hljs-comment">//获取&lt;property&gt;的所有子元素，只能是其中一种类型:ref,value,list,etc等</span></span><br><span class="line">NodeList nl = ele.getChildNodes();</span><br><span class="line">Element subElement = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">Node node = nl.item(i);</span><br><span class="line"><span class="hljs-comment">//子元素不是description和meta属性</span></span><br><span class="line"><span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;</span><br><span class="line">!nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">// Child element is what we're looking for.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (subElement != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">error(elementName + <span class="hljs-string">" must not contain more than one sub-element"</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//当前&lt;property&gt;元素包含有子元素</span></span><br><span class="line">subElement = (Element) node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//判断property的属性值是ref还是value，不允许既是ref又是value</span></span><br><span class="line"><span class="hljs-keyword">boolean</span> hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">boolean</span> hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">if</span> ((hasRefAttribute &amp;&amp; hasValueAttribute) ||</span><br><span class="line">((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != <span class="hljs-keyword">null</span>)) &#123;</span><br><span class="line">error(elementName +</span><br><span class="line"><span class="hljs-string">" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element"</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//如果属性是ref，创建一个ref的数据对象RuntimeBeanReference</span></span><br><span class="line"><span class="hljs-comment">//这个对象封装了ref信息</span></span><br><span class="line"><span class="hljs-keyword">if</span> (hasRefAttribute) &#123;</span><br><span class="line">String refName = ele.getAttribute(REF_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">error(elementName + <span class="hljs-string">" contains empty 'ref' attribute"</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//一个指向运行时所依赖对象的引用</span></span><br><span class="line">RuntimeBeanReference ref = <span class="hljs-keyword">new</span> RuntimeBeanReference(refName);</span><br><span class="line"><span class="hljs-comment">//设置这个ref的数据对象是被当前的property对象所引用</span></span><br><span class="line">ref.setSource(extractSource(ele));</span><br><span class="line"><span class="hljs-keyword">return</span> ref;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果属性是value，创建一个value的数据对象TypedStringValue</span></span><br><span class="line"><span class="hljs-comment">//这个对象封装了value信息</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hasValueAttribute) &#123;</span><br><span class="line"><span class="hljs-comment">//一个持有String类型值的对象</span></span><br><span class="line">TypedStringValue valueHolder = <span class="hljs-keyword">new</span> TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));</span><br><span class="line"><span class="hljs-comment">//设置这个value数据对象是被当前的property对象所引用</span></span><br><span class="line">valueHolder.setSource(extractSource(ele));</span><br><span class="line"><span class="hljs-keyword">return</span> valueHolder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果当前&lt;property&gt;元素还有子元素</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (subElement != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">//解析&lt;property&gt;的子元素</span></span><br><span class="line"><span class="hljs-keyword">return</span> parsePropertySubElement(subElement, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Neither child element nor "ref" or "value" attribute found.</span></span><br><span class="line"><span class="hljs-comment">//propery属性中既不是ref，也不是value属性，解析出错返回null</span></span><br><span class="line">error(elementName + <span class="hljs-string">" must specify a ref or value"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">parsePropertySubElement</span><span class="hljs-params">(Element ele, @Nullable BeanDefinition bd)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parsePropertySubElement(ele, bd, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对上述源码的分析，我们可以了解在 Spring 配置文件中，<code>&lt;Bean&gt;</code>元素中<code>&lt;property&gt;</code>元素的相关配置是如何处理的：</p><ol><li><code>ref</code> 被封装为指向依赖对象一个引用。</li><li><code>value</code> 配置都会封装成一个字符串类型的对象。</li><li><code>ref</code> 和 <code>value</code> 都通过“<code>解析的数据类型属性值.setSource(extractSource(ele));</code>”方法将属性值/引用与所引用的属性关联起来。在方法的最后对于<code>&lt;property&gt;</code>元素的子元素通过 <code>parsePropertySubElement ()</code>方法解析，我们继续分析该方法的源码，了解其解析过程。</li></ol></li><li><p>载入<code>&lt;property&gt;</code>子元素</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析&lt;property&gt;元素中ref,value或者集合等子元素</span></span><br><span class="line"><span class="hljs-meta">@Nullable</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">parsePropertySubElement</span><span class="hljs-params">(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//如果&lt;property&gt;没有使用Spring默认的命名空间，则使用用户自定义的规则解析内嵌元素</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!isDefaultNamespace(ele)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseNestedCustomElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是bean，则使用解析&lt;Bean&gt;元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd);</span><br><span class="line"><span class="hljs-keyword">if</span> (nestedBd != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> nestedBd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是ref，ref中只能有以下3个属性：bean、local、parent</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, REF_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">// A generic reference to any name of any bean.</span></span><br><span class="line"><span class="hljs-comment">//可以不再同一个Spring配置文件中，具体请参考Spring对ref的配置规则</span></span><br><span class="line">String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE);</span><br><span class="line"><span class="hljs-keyword">boolean</span> toParent = <span class="hljs-keyword">false</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line"><span class="hljs-comment">// A reference to the id of another bean in a parent context.</span></span><br><span class="line"><span class="hljs-comment">//获取&lt;property&gt;元素中parent属性值，引用父级容器中的Bean</span></span><br><span class="line">refName = ele.getAttribute(PARENT_REF_ATTRIBUTE);</span><br><span class="line">toParent = <span class="hljs-keyword">true</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line">error(<span class="hljs-string">"'bean' or 'parent' is required for &lt;ref&gt; element"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">error(<span class="hljs-string">"&lt;ref&gt; element contains empty target attribute"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//创建ref类型数据，指向被引用的对象</span></span><br><span class="line">RuntimeBeanReference ref = <span class="hljs-keyword">new</span> RuntimeBeanReference(refName, toParent);</span><br><span class="line"><span class="hljs-comment">//设置引用类型值是被当前子元素所引用</span></span><br><span class="line">ref.setSource(extractSource(ele));</span><br><span class="line"><span class="hljs-keyword">return</span> ref;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;idref&gt;，使用解析ref元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, IDREF_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseIdRefElement(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;value&gt;，使用解析value元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, VALUE_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseValueElement(ele, defaultValueType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是null，为&lt;property&gt;设置一个封装null值的字符串数据</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, NULL_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">// It's a distinguished null value. Let's wrap it in a TypedStringValue</span></span><br><span class="line"><span class="hljs-comment">// object in order to preserve the source location.</span></span><br><span class="line">TypedStringValue nullHolder = <span class="hljs-keyword">new</span> TypedStringValue(<span class="hljs-keyword">null</span>);</span><br><span class="line">nullHolder.setSource(extractSource(ele));</span><br><span class="line"><span class="hljs-keyword">return</span> nullHolder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;array&gt;，使用解析array集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, ARRAY_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseArrayElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;list&gt;，使用解析list集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, LIST_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseListElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;set&gt;，使用解析set集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, SET_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseSetElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;map&gt;，使用解析map集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, MAP_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parseMapElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果子元素是&lt;props&gt;，使用解析props集合子元素的方法解析</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nodeNameEquals(ele, PROPS_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> parsePropsElement(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//既不是ref，又不是value，也不是集合，则子元素配置错误，返回null</span></span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">error(<span class="hljs-string">"Unknown property sub-element: ["</span> + ele.getNodeName() + <span class="hljs-string">"]"</span>, ele);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述源码分析，我们明白了在 Spring 配置文件中，对<code>&lt;property&gt;</code>元素中配置的 <code>array、list、set、map、prop</code> 等各种集合子元素的都通过上述方法解析，生成对应的数据对象，比如 <code>ManagedList、ManagedArray、ManagedSet</code> 等，这些 <code>Managed</code> 类是 Spring 对象 <code>BeanDefiniton</code> 的数据封装，对集合数据类型的具体解析有各自的解析方法实现，解析方法的命名非常规范，一目了然，我们对<code>&lt;list&gt;</code>集合元素的解析方法进行源码分析，了解其实现过程。</p></li><li><p>载入<code>&lt;list&gt;</code>子元素</p><p>在 <code>BeanDefinitionParserDelegate</code> 类中的 <code>parseListElement()</code>方法就是具体实现解析<code>&lt;property&gt;</code>元素中的<code>&lt;list&gt;</code>集合子元素，源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析&lt;list&gt;集合子元素</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">parseListElement</span><span class="hljs-params">(Element collectionEle, @Nullable BeanDefinition bd)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取&lt;list&gt;元素中的value-type属性，即获取集合元素的数据类型</span></span><br><span class="line">String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE);</span><br><span class="line"><span class="hljs-comment">//获取&lt;list&gt;集合元素中的所有子节点</span></span><br><span class="line">NodeList nl = collectionEle.getChildNodes();</span><br><span class="line"><span class="hljs-comment">//Spring中将List封装为ManagedList</span></span><br><span class="line">ManagedList&lt;Object&gt; target = <span class="hljs-keyword">new</span> ManagedList&lt;&gt;(nl.getLength());</span><br><span class="line">target.setSource(extractSource(collectionEle));</span><br><span class="line"><span class="hljs-comment">//设置集合目标数据类型</span></span><br><span class="line">target.setElementTypeName(defaultElementType);</span><br><span class="line">target.setMergeEnabled(parseMergeAttribute(collectionEle));</span><br><span class="line"><span class="hljs-comment">//具体的&lt;list&gt;元素解析</span></span><br><span class="line">parseCollectionElements(nl, target, bd, defaultElementType);</span><br><span class="line"><span class="hljs-keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//具体解析&lt;list&gt;集合元素，&lt;array&gt;、&lt;list&gt;和&lt;set&gt;都使用该方法解析</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseCollectionElements</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">NodeList elementNodes, Collection&lt;Object&gt; target, @Nullable BeanDefinition bd, String defaultElementType)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//遍历集合所有节点</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; elementNodes.getLength(); i++) &#123;</span><br><span class="line">Node node = elementNodes.item(i);</span><br><span class="line"><span class="hljs-comment">//节点不是description节点</span></span><br><span class="line"><span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT)) &#123;</span><br><span class="line"><span class="hljs-comment">//将解析的元素加入集合中，递归调用下一个子元素</span></span><br><span class="line">target.add(parsePropertySubElement((Element) node, bd, defaultElementType));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过对 Spring Bean 配置信息转换的 Document 对象中的元素层层解析，Spring IOC 现在已经将 XML形式定义的 Bean 配置信息转换为 Spring IOC 所识别的数据结构——<code>BeanDefinition</code>，它是 Bean 配置信息中配置的 POJO 对象在 Spring IOC 容器中的映射，我们可以通过 <code>AbstractBeanDefinition</code> 为入口，看到了 IOC 容器进行索引、查询和操作。通过 Spring IOC 容器对 Bean 配置资源的解析后，IOC 容器大致完成了管理 Bean 对象的准备工作，即初始化过程，但是最为重要的依赖注入还没有发生，现在在 IOC 容器中<code>BeanDefinition</code> 存储的只是一些静态信息，接下来需要向容器注册 Bean 定义信息才能全部完成 IOC 容器的初始化过程</p></li><li><p>分配注册策略</p><p>让我们继续跟踪程序的执行顺序，接下来我们来分析<code>efaultBeanDefinitionDocumentReader</code> 对Bean 定义转换的 Document 对象解析的流程中，在其 <code>parseDefaultElement()</code>方法中完成对Document对象的解析后得到封装<code>BeanDefinition</code>的<code>BeanDefinitionHold</code>对象 ，然后调用<code>BeanDefinitionReaderUtils</code> 的 <code>registerBeanDefinition()</code> 方法向IOC容器注册解析的Bean ，<code>BeanDefinitionReaderUtils</code> 的注册的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//将解析的 BeanDefinitionHold 注册到容器中</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinition</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//获取解析的 BeanDefinition 的名称</span></span><br><span class="line">    String beanName = definitionHolder.getBeanName();</span><br><span class="line">    <span class="hljs-comment">//向 IOC 容器注册 BeanDefinition</span></span><br><span class="line">  registry.registerBeanDefinition(beanName,definitionHolder.getBeanDefinition());</span><br><span class="line">    <span class="hljs-comment">//如果解析的 BeanDefinition 有别名，向容器为其注册别名</span></span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    <span class="hljs-keyword">if</span> (aliases != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">        registry.registerAlias(beanName, alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用 <code>BeanDefinitionReaderUtils</code> 向 IOC 容器注册解析的 <code>BeanDefinition</code> 时，真正完成注册功能的是 <code>DefaultListableBeanFactory</code>。</p></li><li><p>向容器注册</p><p><code>DefaultListableBeanFactory</code> 中使用一个 HashMap 的集合对象存放 IOC 容器中注册解析的BeanDefinition，向 IOC 容器注册的主要源码如下：</p><img src="/2019/08/21/Spring-2019-08-渐入Spring-IOC/DefaultListableBeanFactory.png"></li></ol></li></ol><pre><code><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//存储注册信息的BeanDefinition</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="hljs-number">256</span>);</span><br><span class="line"><span class="hljs-comment">//向IOC容器注册解析的BeanDefiniton</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinition</span><span class="hljs-params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.hasText(beanName, <span class="hljs-string">"Bean name must not be empty"</span>);</span><br><span class="line">    Assert.notNull(beanDefinition, <span class="hljs-string">"BeanDefinition must not be null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//校验解析的BeanDefiniton</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (beanDefinition <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                                                   <span class="hljs-string">"Validation of bean definition failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BeanDefinition oldBeanDefinition;</span><br><span class="line"></span><br><span class="line">    oldBeanDefinition = <span class="hljs-keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (oldBeanDefinition != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                                                   <span class="hljs-string">"Cannot register bean definition ["</span> + beanDefinition + <span class="hljs-string">"] for bean '"</span> + beanName +</span><br><span class="line">                                                   <span class="hljs-string">"': There is already ["</span> + oldBeanDefinition + <span class="hljs-string">"] bound."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">            <span class="hljs-comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.logger.warn(<span class="hljs-string">"Overriding user-defined bean definition for bean '"</span> + beanName +</span><br><span class="line">                                 <span class="hljs-string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">                                 oldBeanDefinition + <span class="hljs-string">"] with ["</span> + beanDefinition + <span class="hljs-string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!beanDefinition.equals(oldBeanDefinition)) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">                                 <span class="hljs-string">"' with a different definition: replacing ["</span> + oldBeanDefinition +</span><br><span class="line">                                 <span class="hljs-string">"] with ["</span> + beanDefinition + <span class="hljs-string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">                                  <span class="hljs-string">"' with an equivalent definition: replacing ["</span> + oldBeanDefinition +</span><br><span class="line">                                  <span class="hljs-string">"] with ["</span> + beanDefinition + <span class="hljs-string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">            <span class="hljs-comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">            <span class="hljs-comment">//注册的过程中需要线程同步，以保证数据的一致性</span></span><br><span class="line">            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.beanDefinitionMap) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">                List&lt;String&gt; updatedDefinitions = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(<span class="hljs-keyword">this</span>.beanDefinitionNames.size() + <span class="hljs-number">1</span>);</span><br><span class="line">                updatedDefinitions.addAll(<span class="hljs-keyword">this</span>.beanDefinitionNames);</span><br><span class="line">                updatedDefinitions.add(beanName);</span><br><span class="line">                <span class="hljs-keyword">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">                    Set&lt;String&gt; updatedSingletons = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(<span class="hljs-keyword">this</span>.manualSingletonNames);</span><br><span class="line">                    updatedSingletons.remove(beanName);</span><br><span class="line">                    <span class="hljs-keyword">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Still in startup registration phase</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">            <span class="hljs-keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">            <span class="hljs-keyword">this</span>.manualSingletonNames.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">this</span>.frozenBeanDefinitionNames = <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//检查是否有同名的BeanDefinition已经在IOC容器中注册</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (oldBeanDefinition != <span class="hljs-keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">        <span class="hljs-comment">//重置所有已经注册过的BeanDefinition的缓存</span></span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>至此，Bean 配置信息中配置的 Bean 被解析过后，已经注册到 IOC 容器中，被容器管理起来，真正完成了 IOC 容器初始化所做的全部工作。现在 IOC 容器中已经建立了整个 Bean 的配置信息，这些`BeanDefinition` 信息已经可以使用，并且可以被检索，IOC 容器的作用就是对这些注册的 Bean 定义信息进行处理和维护。这些的注册的 Bean 定义信息是 IOC 容器控制反转的基础，正是有了这些注册的数据，容器才可以进行依赖注入。</code></pre><ol start="3"><li><p><strong>基于Annotation的IOC初始化原理</strong></p><p>Spring IOC 容器对于类级别的注解和类内部的注解分以下两种处理策略：<br>1)、<strong>类级别的注解</strong>：如@Component、@Repository、@Controller、@Service 以及 JavaEE6 的<br>@ManagedBean 和@Named 注解，都是添加在类上面的类级别注解，Spring 容器根据注解的过滤规则扫描读取注解 Bean 定义类，并将其注册到 Spring IOC 容器中。<br>2)、<strong>类内部的注解</strong>：如@Autowire、@Value、@Resource 以及 EJB 和 WebService 相关的注解等，都是添加在类内部的字段或者方法上的类内部注解，SpringIOC 容器通过 Bean 后置注解处理器解析Bean 内部的注解。下面将根据这两种处理策略，分别分析 Spring 处理注解相关的源码。</p><ol><li><p><strong>定位 Bean 扫描路径</strong></p><p>在Spring中管理注解Bean定义的容器有两个：<code>AnnotationConfigApplicationContext</code>和<code>AnnotationConfigWebApplicationContex</code>。这两个类是专门处理 Spring 注解方式配置的容器，直接依赖于注解作为容器配置信息来源的 IOC 容器。<code>AnnotationConfigWebApplicationContext</code>是<code>AnnotationConfigApplicationContext</code> 的 Web 版本，两者的用法以及对注解的处理方式几乎没有差别。现在我们以 <code>AnnotationConfigApplicationContext</code> 为例看看它的源码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationConfigApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AnnotationConfigRegistry</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//保存一个读取注解的Bean定义读取器，并将其设置到容器中</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AnnotatedBeanDefinitionReader reader;</span><br><span class="line"><span class="hljs-comment">//保存一个扫描指定类路径中注解Bean定义的扫描器，并将其设置到容器中</span></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ClassPathBeanDefinitionScanner scanner;</span><br><span class="line"><span class="hljs-comment">//默认构造函数，初始化一个空容器，容器不包含任何 Bean 信息，需要在稍后通过调用其register()</span></span><br><span class="line"><span class="hljs-comment">//方法注册配置类，并调用refresh()方法刷新容器，触发容器对注解Bean的载入、解析和注册过程</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationConfigApplicationContext</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.reader = <span class="hljs-keyword">new</span> AnnotatedBeanDefinitionReader(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner = <span class="hljs-keyword">new</span> ClassPathBeanDefinitionScanner(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationConfigApplicationContext</span><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>(beanFactory);</span><br><span class="line"><span class="hljs-keyword">this</span>.reader = <span class="hljs-keyword">new</span> AnnotatedBeanDefinitionReader(<span class="hljs-keyword">this</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner = <span class="hljs-keyword">new</span> ClassPathBeanDefinitionScanner(<span class="hljs-keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//最常用的构造函数，通过将涉及到的配置类传递给该构造函数，以实现将相应配置类中的Bean自动注册到容器中</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationConfigApplicationContext</span><span class="hljs-params">(Class&lt;?&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>();</span><br><span class="line">register(annotatedClasses);</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//该构造函数会自动扫描以给定的包及其子包下的所有类，并自动识别所有的Spring Bean，将其注册到容器中</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationConfigApplicationContext</span><span class="hljs-params">(String... basePackages)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>();</span><br><span class="line">scan(basePackages);</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEnvironment</span><span class="hljs-params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.setEnvironment(environment);</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.setEnvironment(environment);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner.setEnvironment(environment);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//为容器的注解Bean读取器和注解Bean扫描器设置Bean名称产生器</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBeanNameGenerator</span><span class="hljs-params">(BeanNameGenerator beanNameGenerator)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">getBeanFactory().registerSingleton(</span><br><span class="line">AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//为容器的注解Bean读取器和注解Bean扫描器设置作用范围元信息解析器</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setScopeMetadataResolver</span><span class="hljs-params">(ScopeMetadataResolver scopeMetadataResolver)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//为容器注册一个要被处理的注解Bean，新注册的Bean，必须手动调用容器的</span></span><br><span class="line"><span class="hljs-comment">//refresh()方法刷新容器，触发容器对新注册的Bean的处理</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(Class&lt;?&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line">Assert.notEmpty(annotatedClasses, <span class="hljs-string">"At least one annotated class must be specified"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.register(annotatedClasses);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//扫描指定包路径及其子包下的注解类，为了使新添加的类被处理，必须手动调用</span></span><br><span class="line"><span class="hljs-comment">//refresh()方法刷新容器</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">scan</span><span class="hljs-params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">Assert.notEmpty(basePackages, <span class="hljs-string">"At least one base package must be specified"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.scanner.scan(basePackages);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;T&gt; annotatedClass, Object... constructorArguments)</span> </span>&#123;</span><br><span class="line">registerBean(<span class="hljs-keyword">null</span>, annotatedClass, constructorArguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(@Nullable String beanName, Class&lt;T&gt; annotatedClass, Object... constructorArguments)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.reader.doRegisterBean(annotatedClass, <span class="hljs-keyword">null</span>, beanName, <span class="hljs-keyword">null</span>,</span><br><span class="line">bd -&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (Object arg : constructorArguments) &#123;</span><br><span class="line">bd.getConstructorArgumentValues().addGenericArgumentValue(arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(@Nullable String beanName, Class&lt;T&gt; beanClass, @Nullable Supplier&lt;T&gt; supplier,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">BeanDefinitionCustomizer... customizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.reader.doRegisterBean(beanClass, supplier, beanName, <span class="hljs-keyword">null</span>, customizers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的源码分析，我们可以看啊到 Spring 对注解的处理分为两种方式：</p><ul><li>直接将注解 Bean 注册到容器中: 可以在初始化容器时注册；也可以在容器创建之后手动调用注册方法向容器注册，然后通过手动刷新容器，使得容器对注册的注解 Bean 进行处理。</li><li>通过扫描指定的包及其子包下的所有类: 在初始化注解容器时指定要自动扫描的路径，如果容器创建以后向给定路径动态添加了注解 Bean，则需要手动调用容器扫描的方法，然后手动刷新容器，使得容器对所注册的 Bean 进行处理。接下来，将会对两种处理方式详细分析其实现过程。</li></ul></li><li><p><strong>读取Annotation元数据</strong></p><p>当创建注解处理容器时，如果传入的初始参数是具体的注解 Bean 定义类时，注解容器读取并注册。</p><p><strong><code>1) 、AnnotationConfigApplicationContext</code> 通过调用注解 Bean 定义读取器</strong> <code>AnnotatedBeanDefinitionReader</code> 的 <code>register()</code>方法向容器注册指定的注解 Bean，注解 Bean 定义读取器向容器注册注解 Bean 的源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotatedBeanDefinitionReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//注册多个注解Bean定义类</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(Class&lt;?&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (Class&lt;?&gt; annotatedClass : annotatedClasses) &#123;</span><br><span class="line">registerBean(annotatedClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//注册一个注解Bean定义类</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;?&gt; annotatedClass)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;T&gt; annotatedClass, @Nullable Supplier&lt;T&gt; instanceSupplier)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, instanceSupplier, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;T&gt; annotatedClass, String name, @Nullable Supplier&lt;T&gt; instanceSupplier)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, instanceSupplier, name, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Bean定义读取器注册注解Bean定义的入口方法</span></span><br><span class="line"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;?&gt; annotatedClass, Class&lt;? extends Annotation&gt;... qualifiers)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, qualifiers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//Bean定义读取器向容器注册注解Bean定义类</span></span><br><span class="line"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBean</span><span class="hljs-params">(Class&lt;?&gt; annotatedClass, String name, Class&lt;? extends Annotation&gt;... qualifiers)</span> </span>&#123;</span><br><span class="line">doRegisterBean(annotatedClass, <span class="hljs-keyword">null</span>, name, qualifiers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Bean定义读取器向容器注册注解Bean定义类</span></span><br><span class="line">&lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doRegisterBean</span><span class="hljs-params">(Class&lt;T&gt; annotatedClass, @Nullable Supplier&lt;T&gt; instanceSupplier, @Nullable String name,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">@Nullable Class&lt;? extends Annotation&gt;[] qualifiers, BeanDefinitionCustomizer... definitionCustomizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//根据指定的注解Bean定义类，创建Spring容器中对注解Bean的封装的数据结构</span></span><br><span class="line">AnnotatedGenericBeanDefinition abd = <span class="hljs-keyword">new</span> AnnotatedGenericBeanDefinition(annotatedClass);</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abd.setInstanceSupplier(instanceSupplier);</span><br><span class="line"><span class="hljs-comment">//解析注解Bean定义的作用域，若@Scope("prototype")，则Bean为原型类型；</span></span><br><span class="line"><span class="hljs-comment">//若@Scope("singleton")，则Bean为单态类型</span></span><br><span class="line">ScopeMetadata scopeMetadata = <span class="hljs-keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line"><span class="hljs-comment">//为注解Bean定义设置作用域</span></span><br><span class="line">abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line"><span class="hljs-comment">//为注解Bean定义生成Bean名称</span></span><br><span class="line">String beanName = (name != <span class="hljs-keyword">null</span> ? name : <span class="hljs-keyword">this</span>.beanNameGenerator.generateBeanName(abd, <span class="hljs-keyword">this</span>.registry));</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//处理注解Bean定义中的通用注解</span></span><br><span class="line">AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line"><span class="hljs-comment">//如果在向容器注册注解Bean定义时，使用了额外的限定符注解，则解析限定符注解。</span></span><br><span class="line"><span class="hljs-comment">//主要是配置的关于autowiring自动依赖注入装配的限定条件，即@Qualifier注解</span></span><br><span class="line"><span class="hljs-comment">//Spring自动依赖注入装配默认是按类型装配，如果使用@Qualifier则按名称</span></span><br><span class="line"><span class="hljs-keyword">if</span> (qualifiers != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (Class&lt;? extends Annotation&gt; qualifier : qualifiers) &#123;</span><br><span class="line"><span class="hljs-comment">//如果配置了@Primary注解，设置该Bean为autowiring自动依赖注入装//配时的首选</span></span><br><span class="line"><span class="hljs-keyword">if</span> (Primary.class == qualifier) &#123;</span><br><span class="line">abd.setPrimary(<span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果配置了@Lazy注解，则设置该Bean为非延迟初始化，如果没有配置，</span></span><br><span class="line"><span class="hljs-comment">//则该Bean为预实例化</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Lazy.class == qualifier) &#123;</span><br><span class="line">abd.setLazyInit(<span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果使用了除@Primary和@Lazy以外的其他注解，则为该Bean添加一</span></span><br><span class="line"><span class="hljs-comment">//个autowiring自动依赖注入装配限定符，该Bean在进autowiring</span></span><br><span class="line"><span class="hljs-comment">//自动依赖注入装配时，根据名称装配限定符指定的Bean</span></span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">abd.addQualifier(<span class="hljs-keyword">new</span> AutowireCandidateQualifier(qualifier));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (BeanDefinitionCustomizer customizer : definitionCustomizers) &#123;</span><br><span class="line">customizer.customize(abd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//创建一个指定Bean名称的Bean定义对象，封装注解Bean定义类数据</span></span><br><span class="line">BeanDefinitionHolder definitionHolder = <span class="hljs-keyword">new</span> BeanDefinitionHolder(abd, beanName);</span><br><span class="line"><span class="hljs-comment">//根据注解Bean定义类中配置的作用域，创建相应的代理对象</span></span><br><span class="line">definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line"><span class="hljs-comment">//向IOC容器注册注解Bean类定义对象</span></span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Environment <span class="hljs-title">getOrCreateEnvironment</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">Assert.notNull(registry, <span class="hljs-string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (registry <span class="hljs-keyword">instanceof</span> EnvironmentCapable) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ((EnvironmentCapable) registry).getEnvironment();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StandardEnvironment();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源码我们可以看出，注册注解 Bean 定义类的基本步骤：<br>a、需要使用注解元数据解析器解析注解 Bean 中关于作用域的配置。</p><p>b、使用 <code>AnnotationConfigUtils</code> 的 <code>processCommonDefinitionAnnotations()</code>方法处理注解 Bean 定义类中通用的注解。<br>c、使用 <code>AnnotationConfigUtils</code> 的 <code>applyScopedProxyMode()</code>方法创建对于作用域的代理对象。<br>d、通过 <code>BeanDefinitionReaderUtils</code> 向容器注册 Bean。</p><p><strong>2)、AnnotationScopeMetadataResolver 解析作用域元数据</strong></p><p><code>AnnotationScopeMetadataResolver</code> 通过 <code>resolveScopeMetadata()</code>方法解析注解 Bean 定义类的作用域元信息，即判断注册的 Bean 是原生类型(prototype)还是单态(singleton)类型，其源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//解析注解Bean定义类中的作用域元信息</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ScopeMetadata <span class="hljs-title">resolveScopeMetadata</span><span class="hljs-params">(BeanDefinition definition)</span> </span>&#123;</span><br><span class="line">    ScopeMetadata metadata = <span class="hljs-keyword">new</span> ScopeMetadata();</span><br><span class="line">    <span class="hljs-keyword">if</span> (definition <span class="hljs-keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">        AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition;</span><br><span class="line">        <span class="hljs-comment">//从注解Bean定义类的属性中查找属性为”Scope”的值，即@Scope注解的值</span></span><br><span class="line">        <span class="hljs-comment">//annDef.getMetadata().getAnnotationAttributes()方法将Bean</span></span><br><span class="line">        <span class="hljs-comment">//中所有的注解和注解的值存放在一个map集合中</span></span><br><span class="line">        AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(</span><br><span class="line">            annDef.getMetadata(), <span class="hljs-keyword">this</span>.scopeAnnotationType);</span><br><span class="line">        <span class="hljs-comment">//将获取到的@Scope注解的值设置到要返回的对象中</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (attributes != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            metadata.setScopeName(attributes.getString(<span class="hljs-string">"value"</span>));</span><br><span class="line">            <span class="hljs-comment">//获取@Scope注解中的proxyMode属性值，在创建代理对象时会用到</span></span><br><span class="line">            ScopedProxyMode proxyMode = attributes.getEnum(<span class="hljs-string">"proxyMode"</span>);</span><br><span class="line">            <span class="hljs-comment">//如果@Scope的proxyMode属性为DEFAULT或者NO</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (proxyMode == ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">                <span class="hljs-comment">//设置proxyMode为NO</span></span><br><span class="line">                proxyMode = <span class="hljs-keyword">this</span>.defaultProxyMode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//为返回的元数据设置proxyMode</span></span><br><span class="line">            metadata.setScopedProxyMode(proxyMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//返回解析的作用域元信息对象</span></span><br><span class="line">    <span class="hljs-keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中的 <code>annDef.getMetadata().getAnnotationAttributes()</code>方法就是获取对象中指定类型的注解的值。</p><p><strong>3)、AnnotationConfigUtils 处理注解 Bean 定义类中的通用注解</strong></p><p><code>AnnotationConfigUtils</code> 类的 <code>processCommonDefinitionAnnotations()</code>在向容器注册 Bean 之前，首先对注解 Bean 定义类中的通用 Spring 注解进行处理，源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//处理Bean定义中通用注解</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processCommonDefinitionAnnotations</span><span class="hljs-params">(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">AnnotationAttributes lazy = attributesFor(metadata, Lazy.class);</span><br><span class="line"><span class="hljs-comment">//如果Bean定义中有@Lazy注解，则将该Bean预实例化属性设置为@lazy注解的值</span></span><br><span class="line"><span class="hljs-keyword">if</span> (lazy != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">abd.setLazyInit(lazy.getBoolean(<span class="hljs-string">"value"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (abd.getMetadata() != metadata) &#123;</span><br><span class="line">lazy = attributesFor(abd.getMetadata(), Lazy.class);</span><br><span class="line"><span class="hljs-keyword">if</span> (lazy != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">abd.setLazyInit(lazy.getBoolean(<span class="hljs-string">"value"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果Bean定义中有@Primary注解，则为该Bean设置为autowiring自动依赖注入装配的首选对象</span></span><br><span class="line"><span class="hljs-keyword">if</span> (metadata.isAnnotated(Primary.class.getName())) &#123;</span><br><span class="line">abd.setPrimary(<span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果Bean定义中有@ DependsOn注解，则为该Bean设置所依赖的Bean名称，</span></span><br><span class="line"><span class="hljs-comment">//容器将确保在实例化该Bean之前首先实例化所依赖的Bean</span></span><br><span class="line">AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class);</span><br><span class="line"><span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">abd.setDependsOn(dependsOn.getStringArray(<span class="hljs-string">"value"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (abd <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">AbstractBeanDefinition absBd = (AbstractBeanDefinition) abd;</span><br><span class="line">AnnotationAttributes role = attributesFor(metadata, Role.class);</span><br><span class="line"><span class="hljs-keyword">if</span> (role != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">absBd.setRole(role.getNumber(<span class="hljs-string">"value"</span>).intValue());</span><br><span class="line">&#125;</span><br><span class="line">AnnotationAttributes description = attributesFor(metadata, Description.class);</span><br><span class="line"><span class="hljs-keyword">if</span> (description != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">absBd.setDescription(description.getString(<span class="hljs-string">"value"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4)、AnnotationConfigUtils 根据注解 Bean 定义类中配置的作用域为其应用相应的代理策略</strong></p><p><code>AnnotationConfigUtils</code> 类的 <code>applyScopedProxyMode()</code>方法根据注解 Bean 定义类中配置的作用域<code>@Scope</code> 注解的值，为 Bean 定义应用相应的代理模式，主要是在 Spring 面向切面编程(AOP)中使用。源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//根据作用域为Bean应用引用的代码模式</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> BeanDefinitionHolder <span class="hljs-title">applyScopedProxyMode</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//获取注解Bean定义类中@Scope注解的proxyMode属性值</span></span><br><span class="line">ScopedProxyMode scopedProxyMode = metadata.getScopedProxyMode();</span><br><span class="line"><span class="hljs-comment">//如果配置的@Scope注解的proxyMode属性值为NO，则不应用代理模式</span></span><br><span class="line"><span class="hljs-keyword">if</span> (scopedProxyMode.equals(ScopedProxyMode.NO)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> definition;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//获取配置的@Scope注解的proxyMode属性值，如果为TARGET_CLASS</span></span><br><span class="line"><span class="hljs-comment">//则返回true，如果为INTERFACES，则返回false</span></span><br><span class="line"><span class="hljs-keyword">boolean</span> proxyTargetClass = scopedProxyMode.equals(ScopedProxyMode.TARGET_CLASS);</span><br><span class="line"><span class="hljs-comment">//为注册的Bean创建相应模式的代理对象</span></span><br><span class="line"><span class="hljs-keyword">return</span> ScopedProxyCreator.createScopedProxy(definition, registry, proxyTargetClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段为 Bean 引用创建相应模式的代理，这里不做深入的分析。</p><p><strong>5)、BeanDefinitionReaderUtils 向容器注册 Bean</strong></p><p><code>BeanDefinitionReaderUtils</code> 主要是校验 <code>BeanDefinition</code> 信息，然后将 Bean 添加到容器中一个管理<code>BeanDefinition</code> 的 <code>HashMap</code> 中。</p></li><li><p><strong>扫描指定包并解析为 BeanDefinition</strong></p><p>当创建注解处理容器时，如果传入的初始参数是注解 Bean 定义类所在的包时，注解容器将扫描给定的包及其子包，将扫描到的注解 Bean 定义载入并注册。</p><p><strong>1)、ClassPathBeanDefinitionScanner 扫描给定的包及其子包</strong></p><p><code>AnnotationConfigApplicationContext</code> 通过调用类路径Bean定义扫描器<code>ClassPathBeanDefinitionScanner</code> 扫描给定包及其子包下的所有类，主要源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//创建一个类路径Bean定义扫描器</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathBeanDefinitionScanner</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>(registry, <span class="hljs-keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//为容器创建一个类路径Bean定义扫描器，并指定是否使用默认的扫描过滤规则。</span></span><br><span class="line"><span class="hljs-comment">//即Spring默认扫描配置：@Component、@Repository、@Service、@Controller</span></span><br><span class="line"><span class="hljs-comment">//注解的Bean，同时也支持JavaEE6的@ManagedBean和JSR-330的@Named注解</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathBeanDefinitionScanner</span><span class="hljs-params">(BeanDefinitionRegistry registry, <span class="hljs-keyword">boolean</span> useDefaultFilters)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>(registry, useDefaultFilters, getOrCreateEnvironment(registry));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathBeanDefinitionScanner</span><span class="hljs-params">(BeanDefinitionRegistry registry, <span class="hljs-keyword">boolean</span> useDefaultFilters,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                                      Environment environment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>(registry, useDefaultFilters, environment,</span><br><span class="line">         (registry <span class="hljs-keyword">instanceof</span> ResourceLoader ? (ResourceLoader) registry : <span class="hljs-keyword">null</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassPathBeanDefinitionScanner</span><span class="hljs-params">(BeanDefinitionRegistry registry, <span class="hljs-keyword">boolean</span> useDefaultFilters,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                                      Environment environment, @Nullable ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(registry, <span class="hljs-string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">    <span class="hljs-comment">//为容器设置加载Bean定义的注册器</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.registry = registry;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">        registerDefaultFilters();</span><br><span class="line">    &#125;</span><br><span class="line">    setEnvironment(environment);</span><br><span class="line">    <span class="hljs-comment">//为容器设置资源加载器</span></span><br><span class="line">    setResourceLoader(resourceLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//调用类路径Bean定义扫描器入口方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">scan</span><span class="hljs-params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//获取容器中已经注册的Bean个数</span></span><br><span class="line">    <span class="hljs-keyword">int</span> beanCountAtScanStart = <span class="hljs-keyword">this</span>.registry.getBeanDefinitionCount();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//启动扫描器扫描给定包</span></span><br><span class="line">    doScan(basePackages);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Register annotation config processors, if necessary.</span></span><br><span class="line">    <span class="hljs-comment">//注册注解配置(Annotation config)处理器</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.includeAnnotationConfig) &#123;</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="hljs-keyword">this</span>.registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//返回注册的Bean个数</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.registry.getBeanDefinitionCount() - beanCountAtScanStart);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//类路径Bean定义扫描器扫描给定包及其子包</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="hljs-title">doScan</span><span class="hljs-params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">    Assert.notEmpty(basePackages, <span class="hljs-string">"At least one base package must be specified"</span>);</span><br><span class="line">    <span class="hljs-comment">//创建一个集合，存放扫描到Bean定义的封装类</span></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="hljs-comment">//遍历扫描所有给定的包</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">        <span class="hljs-comment">//调用父类ClassPathScanningCandidateComponentProvider的方法</span></span><br><span class="line">        <span class="hljs-comment">//扫描给定类路径，获取符合条件的Bean定义</span></span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">        <span class="hljs-comment">//遍历扫描到的Bean</span></span><br><span class="line">        <span class="hljs-keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">            <span class="hljs-comment">//获取Bean定义类中@Scope注解的值，即获取Bean的作用域</span></span><br><span class="line">            ScopeMetadata scopeMetadata = <span class="hljs-keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            <span class="hljs-comment">//为Bean设置注解配置的作用域</span></span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            <span class="hljs-comment">//为Bean生成名称</span></span><br><span class="line">            String beanName = <span class="hljs-keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line">            <span class="hljs-comment">//如果扫描到的Bean不是Spring的注解Bean，则为Bean设置默认值，</span></span><br><span class="line">            <span class="hljs-comment">//设置Bean的自动依赖注入装配属性等</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (candidate <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">                postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//如果扫描到的Bean是Spring的注解Bean，则处理其通用的Spring注解</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (candidate <span class="hljs-keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                <span class="hljs-comment">//处理注解Bean中通用的注解，在分析注解Bean定义类读取器时已经分析过</span></span><br><span class="line">                AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">//根据Bean名称检查指定的Bean是否需要在容器中注册，或者在容器中冲突</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                BeanDefinitionHolder definitionHolder = <span class="hljs-keyword">new</span> BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">                <span class="hljs-comment">//根据注解中配置的作用域，为Bean应用相应的代理模式</span></span><br><span class="line">                definitionHolder =</span><br><span class="line">                    AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line">                beanDefinitions.add(definitionHolder);</span><br><span class="line">                <span class="hljs-comment">//向容器注册扫描到的Bean</span></span><br><span class="line">                registerBeanDefinition(definitionHolder, <span class="hljs-keyword">this</span>.registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类路径 Bean 定义扫描器 <code>ClassPathBeanDefinitionScanner</code> 主要通过<code>findCandidateComponents()</code>方法调用其父类 <code>ClassPathScanningCandidateComponentProvider</code> 类来扫描获取给定包及其子包下<br>的类。</p><p><strong>2)、ClassPathScanningCandidateComponentProvider 扫描给定包及其子包的类</strong></p><p><code>ClassPathScanningCandidateComponentProvider</code> 类的 <code>findCandidateComponents()</code>方法具体实现扫描给定类路径包的功能，主要源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//扫描给定类路径的包</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;BeanDefinition&gt; <span class="hljs-title">findCandidateComponents</span><span class="hljs-params">(String basePackage)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.componentsIndex != <span class="hljs-keyword">null</span> &amp;&amp; indexSupportsIncludeFilters()) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> addCandidateComponentsFromIndex(<span class="hljs-keyword">this</span>.componentsIndex, basePackage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> scanCandidateComponents(basePackage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Set&lt;BeanDefinition&gt; <span class="hljs-title">addCandidateComponentsFromIndex</span><span class="hljs-params">(CandidateComponentsIndex index, String basePackage)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//创建存储扫描到的类的集合</span></span><br><span class="line">    Set&lt;BeanDefinition&gt; candidates = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        Set&lt;String&gt; types = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="hljs-keyword">for</span> (TypeFilter filter : <span class="hljs-keyword">this</span>.includeFilters) &#123;</span><br><span class="line">            String stereotype = extractStereotype(filter);</span><br><span class="line">            <span class="hljs-keyword">if</span> (stereotype == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Failed to extract stereotype from "</span>+ filter);</span><br><span class="line">            &#125;</span><br><span class="line">            types.addAll(index.getCandidateTypes(basePackage, stereotype));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">boolean</span> traceEnabled = logger.isTraceEnabled();</span><br><span class="line">        <span class="hljs-keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class="line">        <span class="hljs-keyword">for</span> (String type : types) &#123;</span><br><span class="line">            <span class="hljs-comment">//为指定资源获取元数据读取器，元信息读取器通过汇编(ASM)读//取资源元信息</span></span><br><span class="line">            MetadataReader metadataReader = getMetadataReaderFactory().getMetadataReader(type);</span><br><span class="line">            <span class="hljs-comment">//如果扫描到的类符合容器配置的过滤规则</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                <span class="hljs-comment">//通过汇编(ASM)读取资源字节码中的Bean定义元信息</span></span><br><span class="line">                AnnotatedGenericBeanDefinition sbd = <span class="hljs-keyword">new</span> AnnotatedGenericBeanDefinition(</span><br><span class="line">                    metadataReader.getAnnotationMetadata());</span><br><span class="line">                <span class="hljs-keyword">if</span> (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                        logger.debug(<span class="hljs-string">"Using candidate component class from index: "</span> + type);</span><br><span class="line">                    &#125;</span><br><span class="line">                    candidates.add(sbd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                        logger.debug(<span class="hljs-string">"Ignored because not a concrete top-level class: "</span> + type);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                    logger.trace(<span class="hljs-string">"Ignored because matching an exclude filter: "</span> + type);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(<span class="hljs-string">"I/O failure during classpath scanning"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Set&lt;BeanDefinition&gt; <span class="hljs-title">scanCandidateComponents</span><span class="hljs-params">(String basePackage)</span> </span>&#123;</span><br><span class="line">    Set&lt;BeanDefinition&gt; candidates = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">            resolveBasePackage(basePackage) + <span class="hljs-string">'/'</span> + <span class="hljs-keyword">this</span>.resourcePattern;</span><br><span class="line">        Resource[] resources = getResourcePatternResolver().getResources(packageSearchPath);</span><br><span class="line">        <span class="hljs-keyword">boolean</span> traceEnabled = logger.isTraceEnabled();</span><br><span class="line">        <span class="hljs-keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class="line">        <span class="hljs-keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                logger.trace(<span class="hljs-string">"Scanning "</span> + resource);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (resource.isReadable()) &#123;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    MetadataReader metadataReader = getMetadataReaderFactory().getMetadataReader(resource);</span><br><span class="line">                    <span class="hljs-keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                        ScannedGenericBeanDefinition sbd = <span class="hljs-keyword">new</span> ScannedGenericBeanDefinition(metadataReader);</span><br><span class="line">                        sbd.setResource(resource);</span><br><span class="line">                        sbd.setSource(resource);</span><br><span class="line">                        <span class="hljs-keyword">if</span> (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                            <span class="hljs-keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                                logger.debug(<span class="hljs-string">"Identified candidate component class: "</span> + resource);</span><br><span class="line">                            &#125;</span><br><span class="line">                            candidates.add(sbd);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                            <span class="hljs-keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                                logger.debug(<span class="hljs-string">"Ignored because not a concrete top-level class: "</span> + resource);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                            logger.trace(<span class="hljs-string">"Ignored because not matching any filter: "</span> + resource);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">                        <span class="hljs-string">"Failed to read candidate component class: "</span> + resource, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                    logger.trace(<span class="hljs-string">"Ignored because not readable: "</span> + resource);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(<span class="hljs-string">"I/O failure during classpath scanning"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注册注解 BeanDefinition</strong></p><p><code>AnnotationConfigWebApplicationContext</code> 是 <code>AnnotationConfigApplicationContext</code> 的 Web 版，它们对于注解 Bean 的注册和扫描是基本相同的，但是 <code>AnnotationConfigWebApplicationContext</code>对注解 Bean 定义的载入稍有不同，<code>AnnotationConfigWebApplicationContext</code> 注入注解 Bean 定义<br>源码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//载入注解Bean定义资源</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//为容器设置注解Bean定义读取器</span></span><br><span class="line">    AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory);</span><br><span class="line">    <span class="hljs-comment">//为容器设置类路径Bean定义扫描器</span></span><br><span class="line">    ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//获取容器的Bean名称生成器</span></span><br><span class="line">    BeanNameGenerator beanNameGenerator = getBeanNameGenerator();</span><br><span class="line">    <span class="hljs-comment">//为注解Bean定义读取器和类路径扫描器设置Bean名称生成器</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (beanNameGenerator != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">        scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">        beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//获取容器的作用域元信息解析器</span></span><br><span class="line">    ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver();</span><br><span class="line">    <span class="hljs-comment">//为注解Bean定义读取器和类路径扫描器设置作用域元信息解析器</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (scopeMetadataResolver != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">        scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.annotatedClasses.isEmpty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="hljs-string">"Registering annotated classes: ["</span> +</span><br><span class="line">                        StringUtils.collectionToCommaDelimitedString(<span class="hljs-keyword">this</span>.annotatedClasses) + <span class="hljs-string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.register(<span class="hljs-keyword">this</span>.annotatedClasses.toArray(<span class="hljs-keyword">new</span> Class&lt;?&gt;[<span class="hljs-keyword">this</span>.annotatedClasses.size()]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.basePackages.isEmpty()) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="hljs-string">"Scanning base packages: ["</span> +</span><br><span class="line">                        StringUtils.collectionToCommaDelimitedString(<span class="hljs-keyword">this</span>.basePackages) + <span class="hljs-string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.scan(<span class="hljs-keyword">this</span>.basePackages.toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-keyword">this</span>.basePackages.size()]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//获取容器定义的Bean定义资源路径</span></span><br><span class="line">    String[] configLocations = getConfigLocations();</span><br><span class="line">    <span class="hljs-comment">//如果定位的Bean定义资源路径不为空</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (configLocations != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (String configLocation : configLocations) &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                <span class="hljs-comment">//使用当前容器的类加载器加载定位路径的字节码类文件</span></span><br><span class="line">                Class&lt;?&gt; clazz = ClassUtils.forName(configLocation, getClassLoader());</span><br><span class="line">                <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(<span class="hljs-string">"Successfully resolved class for ["</span> + configLocation + <span class="hljs-string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                reader.register(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="hljs-string">"Could not load class for config location ["</span> + configLocation +</span><br><span class="line">                                 <span class="hljs-string">"] - trying package scan. "</span> + ex);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-comment">//如果容器类加载器加载定义路径的Bean定义资源失败</span></span><br><span class="line">                <span class="hljs-comment">//则启用容器类路径扫描器扫描给定路径包及其子包中的类</span></span><br><span class="line">                <span class="hljs-keyword">int</span> count = scanner.scan(configLocation);</span><br><span class="line">                <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                        logger.info(<span class="hljs-string">"No annotated classes found for specified class/package ["</span> + configLocation + <span class="hljs-string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        logger.info(<span class="hljs-string">"Found "</span> + count + <span class="hljs-string">" annotated classes in package ["</span> + configLocation + <span class="hljs-string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="4"><li><strong>容器初始化小结</strong></li></ol><p>现在通过上面的代码，总结一下 IOC 容器初始化的基本步骤：<br>1、初始化的入口在容器实现中的 <code>refresh()</code>调用来完成。<br>2、对 Bean 定义载入 IOC 容器使用的方法是 <code>loadBeanDefinition()</code>,其中的大致过程如下：通过 <code>ResourceLoader</code> 来完成资源文件位置的定位，<code>DefaultResourceLoader</code>是默认的实现，同时上下文本身就给出了 <code>ResourceLoader</code> 的实现，可以从类路径，文件系统,URL 等方式来定为资源位置。如果是 <code>XmlBeanFactory</code> 作为 IOC 容器，那么需要为它指定 Bean 定义的资源，也就是说Bean定义文件时通过抽象成Resource来被IOC容器处理的，容器通过<code>BeanDefinitionReader</code>来完成定义信息的解析和Bean信息的注册,往往使用的是<code>XmlBeanDefinitionReader</code> 来解析Bean的XML定义文件 - 实际的处理过程是委托给<code>BeanDefinitionParserDelegate</code>来完成的，从而得到 bean 的定义信息，这些信息在 Spring 中使用<code>BeanDefinition</code>对象来表示-这个名字可以让我们想到<code>loadBeanDefinition()</code>,<code>registerBeanDefinition()</code>这些相关方法。它们都是为处理 <code>BeanDefinitin</code> 服务的，容器解析得到 <code>BeanDefinition</code> 以后，需要把它在 IOC 容器中注册，这由 IOC 实现 <code>BeanDefinitionRegistry</code> 接口来实现。注册过程就是在 IOC 容器内部维护的一个 <code>HashMap</code> 来保存得到的 <code>BeanDefinition</code> 的过程。这个 HashMap 是 IOC 容器持有Bean 信息的场所，以后对 Bean 的操作都是围绕这个 <code>HashMap</code> 来实现的。然后我们就可以通过 <code>BeanFactory</code> 和 <code>ApplicationContext</code> 来享受到 Spring IOC 的服务了,在使用 IOC容器的时候，我们注意到除了少量粘合代码，绝大多数以正确 IOC 风格编写的应用程序代码完全不用关心如何到达工厂，因为容器将把这些对象与容器管理的其他对象钩在一起。基本的策略是把工厂放到已知的地方，最好是放在对预期使用的上下文有意义的地方，以及代码将实际需要访问工厂的地方。Spring本身提供了对声明式载入web应用程序用法的应用程序上下文,并将其存储在<code>ServletContext</code>中的框架实现。<br>以下是容器初始化全过程的时序图：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渐入Spring-IOC&quot;&gt;&lt;a href=&quot;#渐入Spring-IOC&quot; class=&quot;headerlink&quot; title=&quot;渐入Spring-IOC&quot;&gt;&lt;/a&gt;渐入Spring-IOC&lt;/h2&gt;&lt;h3 id=&quot;一、IOC&quot;&gt;&lt;a href=&quot;#一、IOC&quot; c
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring IOC" scheme="http://yoursite.com/tags/Spring-IOC/"/>
    
  </entry>
  
  <entry>
    <title>初识Spring-IOC、DI</title>
    <link href="http://yoursite.com/2019/08/21/Spring-2019-08-%E5%88%9D%E8%AF%86Spring-IOC%E3%80%81DI%E3%80%81AOP/"/>
    <id>http://yoursite.com/2019/08/21/Spring-2019-08-初识Spring-IOC、DI、AOP/</id>
    <published>2019-08-20T17:20:57.000Z</published>
    <updated>2019-08-20T17:22:38.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识Spring-IOC-、DI、AOP"><a href="#初识Spring-IOC-、DI、AOP" class="headerlink" title="初识Spring IOC 、DI、AOP"></a>初识Spring IOC 、DI、AOP</h2><h3 id="IOC-Inversion-of-Control-控制反转"><a href="#IOC-Inversion-of-Control-控制反转" class="headerlink" title="IOC(Inversion of Control)控制反转"></a>IOC(Inversion of Control)控制反转</h3><p>所谓控制反转，就是把原先我们代码里面需要实现的对象创建、依赖的代码，反转给容器来帮忙实现。那么必然的我们需要创建一个容器，同时需要一种描述来让容器知道需要创建的对象与对象的关系。这个描述最具体表现就是我们所看到的配置文件。</p><h5 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h5><ul><li>@Component ：组件通用注解，常用于Model类</li><li>@Controller ：常用于对Controller实现类进行标注</li><li>@Service：常用于对Service实现类进行标注</li><li>@Repository：常用于对DAO实现类进行标注</li></ul><h3 id="DI-Dependency-Injection-依赖注入"><a href="#DI-Dependency-Injection-依赖注入" class="headerlink" title="DI(Dependency Injection)依赖注入"></a>DI(Dependency Injection)依赖注入</h3><p>指对象是被动接受依赖类而不是自己主动去找，换句话说就是指对象不是从容器中查找它依赖的类，而是在容器实例化对象的时候主动将它依赖的类注入给它。</p><h5 id="常用注解-1"><a href="#常用注解-1" class="headerlink" title="常用注解"></a>常用注解</h5><ul><li>@Value ：注入普通类型属性</li><li>@Resource ：注入对象类型</li><li>@Autowired ：注入对象类型，默认按照类型注入。结合@Qualifier注解完成按名称的注入。</li></ul><h3 id="Aop-aspect-object-programming-面向切面编程"><a href="#Aop-aspect-object-programming-面向切面编程" class="headerlink" title="Aop(aspect object programming)面向切面编程"></a>Aop(aspect object programming)面向切面编程</h3><p>AOP 是 OOP 的延续，是 Aspect Oriented Programming 的缩写，意思是面向切面编程。可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。AOP设计模式孜孜不倦追求的是调用者和被调用者之间的解耦，AOP 可以说也是这种目标的一种实现。我们现在做的一些非业务，如：日志、事务、安全等都会写在业务代码中(也即是说，这些非业务类横切于业务类)，但这些代码往往是重复，复制——粘贴式的代码会给程序的维护带来不便, AOP 就实现了把这些业务需求与系统需求分开来做。这种解决的方式也称代理机制。 </p><h4 id="AOP-中必须明白的几个概念"><a href="#AOP-中必须明白的几个概念" class="headerlink" title="AOP 中必须明白的几个概念"></a>AOP 中必须明白的几个概念</h4><ol><li><p>切面（Aspect）</p><p>官方的抽象定义为“一个关注点的模块化，这个关注点可能会横切多个对象”。“切面”在ApplicationContext 中<a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a>来配置。 </p></li><li><p>连接点（Joinpoint）</p><p>程序执行过程中的某一行为，例如，MemberService .get 的调用或者 </p><p>MemberService .delete 抛出异常等行为。</p></li><li><p>通知（Advice）</p><p>“切面”对于某个“连接点”所产生的动作。其中，一个“切面”可以包含多个“Advice”。</p></li><li><p>切入点（Pointcut）</p><p>匹配连接点的断言，在 AOP 中通知和一个切入点表达式关联。切面中的所有通知所关注的连接点，都由切入点表达式来决定。</p></li><li><p>目标对象（Target Object）</p><p>被一个或者多个切面所通知的对象。例如，AServcieImpl 和 BServiceImpl，当然在实际运行时，Spring AOP 采用代理实现，实际 AOP 操作的是 TargetObject 的代理对象。</p></li><li><p>AOP 代理（AOP Proxy）</p><p>在 Spring AOP 中有两种代理方式，JDK 动态代理和 CGLib 代理。默认情况下，TargetObjec实现了接口时，则采用 JDK 动态代理，例如，AServiceImpl；反之，采用 CGLib 代理，例如，BServiceImpl。 强制使用 CGLib 代理需要将 <a href="aop:config" target="_blank" rel="noopener">aop:config</a>的 proxy-target-class 属性设为 true。</p></li><li><p>通知类型</p><ul><li><p>前置通知（Before Advice）</p><p>在某连接点（JoinPoint）之前执行的通知，但这个通知不能阻止连接点前的执行。ApplicationContext 中在<a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a>里面使用<a href="aop:before" target="_blank" rel="noopener">aop:before</a>元素进行声明。例如，TestAspect 中的 doBefore 方法。</p></li><li><p>后置通知（After Advice）</p><p>当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。ApplicationContext 中在 </p><p><a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a>里面使用<a href="aop:after" target="_blank" rel="noopener">aop:after</a>元素进行声明。例如，ServiceAspect 中的 returnAfter 方法，所 </p><p>以 Teser 中调用 UserService.delete 抛出异常时，returnAfter 方法仍然执行。 </p></li><li><p>返回后通知（After Return Advice）</p><p>在某连接点正常完成后执行的通知，不包括抛出异常的情况。ApplicationContext 中在<a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a> </p><p>里面使用<after-returning>元素进行声明。 </after-returning></p></li><li><p>环绕通知（Around Advice）</p><p>包围一个连接点的通知，类似 Web 中 Servlet 规范中的 Filter 的 doFilter 方法。可以在方法的调用前 </p><p>后完成自定义的行为，也可以选择不执行。ApplicationContext 中在<a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a>里面使用 </p><p><a href="aop:around" target="_blank" rel="noopener">aop:around</a>元素进行声明。例如，ServiceAspect 中的 around 方法。 </p></li><li><p>异常通知（After Throwing Advice）</p><p>在 方 法 抛 出 异 常 退 出 时 执 行 的 通 知 。 ApplicationContext 中 在 <a href="aop:aspect" target="_blank" rel="noopener">aop:aspect</a> 里 面 使 用 </p><p><a href="aop:after-throwing" target="_blank" rel="noopener">aop:after-throwing</a>元素进行声明。例如，ServiceAspect 中的 returnThrow 方法。 </p><p>注：可以将多个通知应用到一个目标对象上，即可以将多个切面织入到同一目标对象。</p></li></ul></li></ol><h5 id="基于XML的注入方式"><a href="#基于XML的注入方式" class="headerlink" title="基于XML的注入方式"></a>基于XML的注入方式</h5><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span></span></span><br><span class="line"><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 注解驱动加上这句话 --&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--&lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.xxx.xxx.aop.aspect.XmlAspect"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"xmlAspect"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--AOP配置 --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!--声明一个切面,并注入切面Bean,相当于@Aspect --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"xmlAspect"</span>&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!--配置一个切入点,相当于@Pointcut --&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"simplePointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* com.xxx.xxx.aop.service..*(..))"</span>/&gt;</span></span><br><span class="line">            <span class="hljs-comment">&lt;!--配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"before"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"after"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"afterReturn"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"afterThrow"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">"ex"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"around"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"simplePointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h5><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//声明这是一个组件</span></span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-comment">//声明这是一个切面Bean</span></span><br><span class="line"><span class="hljs-meta">@Aspect</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArgsAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Logger log = Logger.getLogger(ArgsAspect.class);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></span><br><span class="line"><span class="hljs-meta">@Pointcut</span>(<span class="hljs-string">"execution(* com.xxx.xxx.aop.service..*(..))"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aspect</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置前置通知,拦截返回值为com.xxx.xxx.model.Member的方法</span></span><br><span class="line"><span class="hljs-meta">@Before</span>(<span class="hljs-string">"execution(com.xxx.xxx.model.Member com.gupaoedu.vip.aop.service..*(..))"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeReturnUser</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">log.info(<span class="hljs-string">"beforeReturnUser "</span> + joinPoint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置前置通知,拦截参数为com.xxx.xxx.model.Member的方法</span></span><br><span class="line"><span class="hljs-meta">@Before</span>(<span class="hljs-string">"execution(* com.xxx.xxx.aop.service..*(com.xxx.xxx.model.Member))"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeArgUser</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">log.info(<span class="hljs-string">"beforeArgUser "</span> + joinPoint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中</span></span><br><span class="line"><span class="hljs-meta">@Before</span>(<span class="hljs-string">"aspect()&amp;&amp;args(id)"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeArgId</span><span class="hljs-params">(JoinPoint joinPoint, <span class="hljs-keyword">long</span> id)</span></span>&#123;</span><br><span class="line">log.info(<span class="hljs-string">"beforeArgId "</span> + joinPoint + <span class="hljs-string">"\tID:"</span> + id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="附-基于注解开发的细节"><a href="#附-基于注解开发的细节" class="headerlink" title="附: 基于注解开发的细节"></a>附: 基于注解开发的细节</h3><ol><li>引入约束</li></ol><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"</span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>开启注解扫描</li></ol><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.xxx.xxx"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>其他附加属性</li></ol><p>@Scope ：在类上添加的，控制类生成的时候采用单例还是多例。取值：</p><blockquote><p>singleton ：单例<br>prototype ：多例<br>request ：request域，需要在web环境<br>session ：session域，需要在web环境<br>application： context域，需要在web环境<br>globalsession 集群环境的session域，需要在web环境</p></blockquote><p>@PostConstruct ：Bean生命周期中的初始化阶段执行,相当于init-method</p><p>@PreDestroy ：Bean生命周期中的销毁阶段执行,相当于destroy-method</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初识Spring-IOC-、DI、AOP&quot;&gt;&lt;a href=&quot;#初识Spring-IOC-、DI、AOP&quot; class=&quot;headerlink&quot; title=&quot;初识Spring IOC 、DI、AOP&quot;&gt;&lt;/a&gt;初识Spring IOC 、DI、AOP&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring IOC" scheme="http://yoursite.com/tags/Spring-IOC/"/>
    
      <category term="Spring DI" scheme="http://yoursite.com/tags/Spring-DI/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码分析</title>
    <link href="http://yoursite.com/2019/08/12/Spring-2019-08-Spring%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2019/08/12/Spring-2019-08-Spring源码初探/</id>
    <published>2019-08-12T09:42:08.000Z</published>
    <updated>2019-08-20T17:17:52.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring初探"><a href="#Spring初探" class="headerlink" title="Spring初探"></a>Spring初探</h2><p>全文参考Spring官方文档：</p><p><a href="https://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/html/index.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/html/index.html</a></p><h3 id="一、Spring5-框架介绍"><a href="#一、Spring5-框架介绍" class="headerlink" title="一、Spring5 框架介绍"></a>一、Spring5 框架介绍</h3><p><img src="https://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/html/images/spring-overview.png" alt></p><h4 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h4><p>由spring-beans、spring-core、spring-context和spring-expression（Spring Expression Language, SpEL） 4 个模块组成。<br>spring-core 和 spring-beans 模块是 Spring 框架的核心模块，包含了控制反转（Inversion ofControl, IOC）和依赖注入（Dependency Injection, DI）。<br>BeanFactory 接口是 Spring 框架中的核心接口，它是工厂模式的具体实现。BeanFactory 使用控制反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离。但 BeanFactory 容器实例化后并不会自动实例化 Bean，只有当 Bean 被使用时 BeanFactory 容器才会对该 Bean 进行实例化与依赖关系的装配。</p><ol><li>spring-context 模块构架于核心模块之上，他扩展了 BeanFactory，为她添加了 Bean 生命周期控制、框架事件体系以及资源加载透明化等功能。此外该模块还提供了许多企业级支持，如邮件访问、远程访问、任务调度等，ApplicationContext 是该模块的核心接口，她的超类是 BeanFactory。与BeanFactory 不同，ApplicationContext 容器实例化后会自动对所有的单实例 Bean 进行实例化与依赖关系的装配，使之处于待用状态。</li><li>spring-context-support 模块是对 Spring IOC 容器的扩展支持，以及 IOC 子容器。</li><li>spring-context-indexer 模块是 Spring 的类管理组件和 Classpath 扫描。</li><li>spring-expression 模块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等。它的语法类似于传统 EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。这种语言的特性是基于 Spring 产品的需求而设计，他可以非常方便地同 Spring IOC 进行交互。</li></ol><h4 id="AOP-和设备支持"><a href="#AOP-和设备支持" class="headerlink" title="AOP 和设备支持"></a>AOP 和设备支持</h4><p>由 spring-aop、spring-aspects 和 spring-instrument 3 个模块组成。</p><ol><li>spring-aop 是 Spring 的另一个核心模块，是 AOP 主要的实现模块。作为继 OOP 后，对程序员影 响最大的编程思想之一，AOP 极大地开拓了人们对于编程的思路。在 Spring 中，他是以 JVM 的动态代理技术为基础，然后设计出了一系列的 AOP 横切实现，比如前置通知、返回通知、异常通知等，同时，Pointcut 接口来匹配切入点，可以使用现有的切入点来设计横切面，也可以扩展相关方法根据需求 进行切入。 </li><li>spring-aspects 模块集成自 AspectJ 框架，主要是为 Spring AOP 提供多种 AOP 实现方法。 </li><li>spring-instrument 模块是基于 JAVA SE 中的”java.lang.instrument”进行设计的，应该算是 AOP 的一个支援模块，主要作用是在 JVM 启用时，生成一个代理类，程序员通过代理类在运行时修改类的 字节，从而改变一个类的功能，实现 AOP 的功能。在分类里，我把他分在了 AOP 模块下，在 Spring 官 方文档里对这个地方也有点含糊不清，这里是纯个人观点。</li></ol><h4 id="数据访问与集成"><a href="#数据访问与集成" class="headerlink" title="数据访问与集成"></a>数据访问与集成</h4><p>由 spring-jdbc、spring-tx、spring-orm、spring-jms 和 spring-oxm 5 个模块组成。 </p><ol><li>spring-jdbc 模块是 Spring 提供的 JDBC 抽象框架的主要实现模块，用于简化 Spring JDBC 操作 。 主要是提供 JDBC 模板方式、关系数据库对象化方式、SimpleJdbc 方式、事务管理来简化 JDBC 编程， 主要实现类是 JdbcTemplate、SimpleJdbcTemplate 以及 NamedParameterJdbcTemplate。 spring-tx 模块是 Spring JDBC 事务控制实现模块。使用 Spring 框架，它对事务做了很好的封装， 通过它的 AOP 配置，可以灵活的配置在任何一层；但是在很多的需求和应用，直接使用 JDBC 事务控 制还是有其优势的。其实，事务是以业务逻辑为基础的；一个完整的业务应该对应业务层里的一个方法； 如果业务操作失败，则整个事务回滚；所以，事务控制是绝对应该放在业务层的；但是，持久层的设计 则应该遵循一个很重要的原则：保证操作的原子性，即持久层里的每个方法都应该是不可以分割的。所 以，在使用 Spring JDBC 事务控制时，应该注意其特殊性。</li><li>spring-orm 模块是 ORM 框架支持模块，主要集成 Hibernate, Java Persistence API (JPA) 和 Java Data Objects (JDO) 用于资源管理、数据访问对象(DAO)的实现和事务策略。</li><li>spring-oxm 模块主要提供一个抽象层以支撑 OXM（OXM 是 Object-to-XML-Mapping 的缩写， 它是一个 O/M-mapper，将 java 对象映射成 XML 数据，或者将 XML 数据映射成 java 对象），例如： JAXB, Castor, XMLBeans, JiBX 和 XStream 等。</li><li>spring-jms 模块（Java Messaging Service）能够发送和接收信息，自 Spring Framework 4.1 以 后，他还提供了对 spring-messaging 模块的支撑。</li></ol><h4 id="Web-组件"><a href="#Web-组件" class="headerlink" title="Web 组件"></a>Web 组件</h4><p>由 spring-web、spring-webmvc、spring-websocket 和 spring-webflux 4 个模块组成。 </p><ol><li>spring-web 模块为 Spring 提供了最基础 Web 支持，主要建立于核心容器之上，通过 Servlet 或 者 Listeners 来初始化 IOC 容器，也包含一些与 Web 相关的支持。 </li><li>spring-webmvc 模块众所周知是一个的 Web-Servlet 模块，实现了 Spring MVC （model-view-Controller）的 Web 应用。 </li><li>spring-websocket 模块主要是与 Web 前端的全双工通讯的协议。 </li><li>spring-webflux 是一个新的非堵塞函数式 Reactive Web 框架，可以用来建立异步的，非阻塞，事件驱动的服务，并且扩展性非常好。</li></ol><h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p>即 spring-test 模块，主要为测试提供支持的，毕竟在不需要发布（程序）到你的应用服务器或者连接到其他企业设施的情况下能够执行一些集成测试或者其他测试对于任何企业都是非常重要的。</p><h4 id="集成兼容"><a href="#集成兼容" class="headerlink" title="集成兼容"></a>集成兼容</h4><p>即 spring-framework-bom 模块，Bill of Materials.解决 Spring 的不同模块依赖版本不同问题。</p><h4 id="各模块之间的依赖关系"><a href="#各模块之间的依赖关系" class="headerlink" title="各模块之间的依赖关系"></a>各模块之间的依赖关系</h4><img src="/2019/08/12/Spring-2019-08-Spring源码初探/spring-model.jpg" title="模块依赖关系图"><h3 id="Spring-版本命名规则"><a href="#Spring-版本命名规则" class="headerlink" title="Spring 版本命名规则"></a>Spring 版本命名规则</h3><table><thead><tr><th>描述方式</th><th>说明</th><th>含义</th></tr></thead><tbody><tr><td>Snapshot</td><td>快照版</td><td>尚不不稳定、尚处于开发中的版本</td></tr><tr><td>Release</td><td>稳定版</td><td>功能相对稳定，可以对外发行，但有时间限制</td></tr><tr><td>GA</td><td>正式版</td><td>代表广泛可用的稳定版(General Availability)</td></tr><tr><td>M</td><td>里程碑版</td><td>(M 是 Milestone 的意思）具有一些全新的功能或是具有里程碑意义 的版本。</td></tr><tr><td>RC</td><td>终测版</td><td>Release Candidate（最终测试），即将作为正式版发布。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring初探&quot;&gt;&lt;a href=&quot;#Spring初探&quot; class=&quot;headerlink&quot; title=&quot;Spring初探&quot;&gt;&lt;/a&gt;Spring初探&lt;/h2&gt;&lt;p&gt;全文参考Spring官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.s
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（九）：观察者模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（九）：观察者模式/</id>
    <published>2019-08-08T09:35:42.000Z</published>
    <updated>2019-08-08T13:20:04.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>观察者模式（Observer Pattern）定义了对象之间的一对多依赖，让多个观察者对象同 时监听一个主体对象，当主体对象发生变化时，它的所有依赖者（观察者）都会收到通 知并更新，属于行为型模式。观察者模式有时也叫做发布订阅模式。观察者模式主要用 于在关联行为之间建立一套触发机制的场景。</p><h3 id="JDK-原生支持实现样例"><a href="#JDK-原生支持实现样例" class="headerlink" title="JDK 原生支持实现样例"></a>JDK 原生支持实现样例</h3><p>被观察者，也称发布者</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 被观察者对象</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-8.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteObservable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 发布一个事件</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">publishEvent</span><span class="hljs-params">(ObserveContext context)</span></span>&#123;</span><br><span class="line">        setChanged();</span><br><span class="line">        System.out.println(<span class="hljs-string">"发布一个事件"</span>+context.getName());</span><br><span class="line">        notifyObservers(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者，也称订阅者</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 观察者</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-8.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String name ;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteObserver</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        ConcreteObservable observable = (ConcreteObservable) o;</span><br><span class="line">        ObserveContext context = (ObserveContext) arg;</span><br><span class="line">        System.out.println(name+<span class="hljs-string">"已接收到"</span>+context.getName()+<span class="hljs-string">"的事件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义参数、上下文</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 发布订阅上下文</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-8.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObserveContext</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ObserveContext</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始测试</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 测试观察者</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-8.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObserver</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObserveContext context = <span class="hljs-keyword">new</span> ObserveContext(<span class="hljs-string">"Event 1"</span>);</span><br><span class="line">        ConcreteObservable observable =<span class="hljs-keyword">new</span> ConcreteObservable();</span><br><span class="line">        ConcreteObserver observer = <span class="hljs-keyword">new</span> ConcreteObserver(<span class="hljs-string">"观察者一号"</span>);</span><br><span class="line">        ConcreteObserver observer2 = <span class="hljs-keyword">new</span> ConcreteObserver(<span class="hljs-string">"观察者二号"</span>);</span><br><span class="line">        observable.addObserver(observer);</span><br><span class="line">        observable.addObserver(observer2);</span><br><span class="line">        observable.publishEvent(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console打印结果：</p><blockquote><p>发布一个事件Event 1<br>观察者二号已接收到Event 1的事件<br>观察者一号已接收到Event 1的事件</p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/2019/08/08/design-2019-08-设计模式（九）：观察者模式/observer.png" title="JDK观察者模式实现类图"><p>原生的观察者模式是线程安全的。但在数据量大、多线程模式下，需要考虑性能问题。可以选择<code>Object.notify()</code>机制代替之。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="观察者" scheme="http://yoursite.com/tags/%E8%A7%82%E5%AF%9F%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（八）：策略模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（八）：策略模式/</id>
    <published>2019-08-08T09:03:44.000Z</published>
    <updated>2019-08-08T09:11:57.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式（Strategy Pattern）是指定义了算法家族、分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的用户。</p><h3 id="策略模式的应用场景"><a href="#策略模式的应用场景" class="headerlink" title="策略模式的应用场景"></a>策略模式的应用场景</h3><p>1、假如系统中有很多类，而他们的区别仅仅在于他们的行为不同。 </p><p>2、一个系统需要动态地在几种算法中选择一种。 </p><h3 id="策略模式在-JDK-源码中的体现"><a href="#策略模式在-JDK-源码中的体现" class="headerlink" title="策略模式在 JDK 源码中的体现"></a>策略模式在 JDK 源码中的体现</h3><p>首先来看一个比较常用的比较器 Comparator 接口，我们看到的一个大家常用的compare()方法，就是一个策略抽象实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123; </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>; </span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Comparator 抽象下面有非常多的实现类，我们经常会把 Comparator 作为参数传入作为排序策略，例如 Arrays 类的 parallelSort 方法等：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Arrays</span> </span>&#123; </span><br><span class="line">    ... </span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parallelSort</span><span class="hljs-params">(T[] a, <span class="hljs-keyword">int</span> fromIndex, <span class="hljs-keyword">int</span> toIndex, Comparator&lt;? <span class="hljs-keyword">super</span> T&gt; cmp)</span> </span>&#123;</span><br><span class="line">    ... </span><br><span class="line">    &#125;</span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略模式在-Spring-源码中的应用"><a href="#策略模式在-Spring-源码中的应用" class="headerlink" title="策略模式在 Spring 源码中的应用"></a>策略模式在 Spring 源码中的应用</h3><p>Spring 的初始化也采用了策略模式，不同的类型的类采用不同的初始化策略。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InstantiationStrategy</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function">Object <span class="hljs-title">instantiate</span><span class="hljs-params">(RootBeanDefinition var1, @Nullable String var2, BeanFactory var3)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="hljs-function">Object <span class="hljs-title">instantiate</span><span class="hljs-params">(RootBeanDefinition var1, @Nullable String var2, BeanFactory var3, Constructor&lt;?&gt; var4, @Nullable Object... var5)</span> <span class="hljs-keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="hljs-function">Object <span class="hljs-title">instantiate</span><span class="hljs-params">(RootBeanDefinition var1, @Nullable String var2, BeanFactory var3, @Nullable Object var4, Method var5, @Nullable Object... var6)</span> <span class="hljs-keyword">throws</span> BeansException</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顶层的策略抽象非常简单，但是它下面有两种策略 SimpleInstantiationStrategy 和CglibSubclassingInstantiationStrategy</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleInstantiationStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InstantiationStrategy</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CglibSubclassingInstantiationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleInstantiationStrategy</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明在实际应用中多种策略之间还可以继承使用</p><h3 id="策略模式的优缺点"><a href="#策略模式的优缺点" class="headerlink" title="策略模式的优缺点"></a>策略模式的优缺点</h3><p>优点： </p><p>1、策略模式符合开闭原则。 </p><p>2、避免使用多重条件转移语句，如 if…else…语句、switch 语句 </p><p>3、使用策略模式可以提高算法的保密性和安全性。 </p><p>缺点： </p><p>1、客户端必须知道所有的策略，并且自行决定使用哪一个策略类。 </p><p>2、代码中会产生非常多策略类，增加维护难度。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;p&gt;策略模式（Strategy Pattern）是指定义了算法家族、分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="策略" scheme="http://yoursite.com/tags/%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（七）：委派模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（七）：委派模式/</id>
    <published>2019-08-08T09:01:24.000Z</published>
    <updated>2019-08-08T09:02:56.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="委派模式"><a href="#委派模式" class="headerlink" title="委派模式"></a>委派模式</h2><p>委派模式（Delegate Pattern）的基本作用就是负责任务的调用和分配任务，跟代理模式很像，可以看做是一种特殊情况下的静态代理的全权代理，但是代理模式注重过程，而委派模式注重结果。委派模式在 Spring 中应用非常多，大家常用的 DispatcherServlet 其实就是用到了委派模式。现实生活中也常有委 派的场景发生，例如：老板（Boss）给项目经理（Leader）下达任务，项目经理会根据实际情况给每个员工派发工作任务，待员工把工作任务完成之后，再由项目经理汇报工作进度和结果给老板。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;委派模式&quot;&gt;&lt;a href=&quot;#委派模式&quot; class=&quot;headerlink&quot; title=&quot;委派模式&quot;&gt;&lt;/a&gt;委派模式&lt;/h2&gt;&lt;p&gt;委派模式（Delegate Pattern）的基本作用就是负责任务的调用和分配任务，跟代理模式很像，可以看做是一种特殊情况下
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="委派" scheme="http://yoursite.com/tags/%E5%A7%94%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（六）：原型模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（六）：原型模式/</id>
    <published>2019-08-08T08:57:16.000Z</published>
    <updated>2019-08-08T09:00:20.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>原型模式（Prototype Pattern）是指原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</li><li>调用者不需要知道任何创建细节</li><li>属于创建型模式</li></ol><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>类初始化小号资源较多</li><li>new产生的一个对象需要非常繁琐的过程（数据准备、访问权限等）</li><li>构造函数比较复杂</li><li>循环体中产生大量对象时</li></ol><h3 id="常见原型模式工具类"><a href="#常见原型模式工具类" class="headerlink" title="常见原型模式工具类"></a>常见原型模式工具类</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtil.copy();</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.paseObject();</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Guava</span><br></pre></td></tr></table></figure><h3 id="利用Java提供的Cloneable接口实现"><a href="#利用Java提供的Cloneable接口实现" class="headerlink" title="利用Java提供的Cloneable接口实现"></a>利用Java提供的Cloneable接口实现</h3><h4 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">shallowClone</span><span class="hljs-params">(Test target)</span></span>&#123;</span><br><span class="line">    Test test = <span class="hljs-keyword">new</span> Test();</span><br><span class="line">    test.a = target.a;<span class="hljs-comment">//普通字段</span></span><br><span class="line">    test.object = target.object;<span class="hljs-comment">//对象字段，拷贝的是引用地址</span></span><br><span class="line">    <span class="hljs-keyword">return</span>  test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">deepClone</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(<span class="hljs-keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);</span><br><span class="line"></span><br><span class="line">        QiTianDaSheng copy = (QiTianDaSheng)ois.readObject();</span><br><span class="line">        copy.birthday = <span class="hljs-keyword">new</span> Date();</span><br><span class="line">        <span class="hljs-keyword">return</span> copy;</span><br><span class="line">    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;<span class="hljs-keyword">finally</span>&#123;</span><br><span class="line">        ...close;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深克隆例子"><a href="#深克隆例子" class="headerlink" title="深克隆例子"></a>深克隆例子</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList.clone();<span class="hljs-comment">//ArrayList重写了clone方法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="原型模式" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（五）：模板方法模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（五）：模板方法模式/</id>
    <published>2019-08-08T08:55:17.000Z</published>
    <updated>2019-08-08T09:11:57.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>模板模式通常又叫模板方法模式（Template Method Pattern）是指定义一个算法的骨架，并允许子类为一个或者多个步骤提供实现。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤，属于行为性设计模式。模板方法适用于以下应用场景： </p><p>1、一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。 </p><p>2、各子类中公共的行为被提取出来并集中到一个公共的父类中，从而避免代码重复。 </p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ol><li>定义模板</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstTemplateMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">templateMethod1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//抽象业务逻辑与模板逻辑灵活应用</span></span><br><span class="line">        p = p+<span class="hljs-number">10</span>;</span><br><span class="line">        p = method1(p);</span><br><span class="line">        print(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">int</span> <span class="hljs-title">method1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>&#123;</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义模板第一个业务类</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplateMethod1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstTemplateMethod</span></span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">method1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="hljs-string">"templateMethod1 p="</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> p+<span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义模板第二个业务类</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplateMethod2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstTemplateMethod</span></span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">method1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="hljs-string">"templateMethod2 p="</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> p+<span class="hljs-number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>定义模板第n个业务类….</li><li>测试</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstTemplateMethod test = <span class="hljs-keyword">new</span> TemplateMethod1();</span><br><span class="line">        test.templateMethod1(<span class="hljs-number">10</span>);</span><br><span class="line">        test = <span class="hljs-keyword">new</span> TemplateMethod2();</span><br><span class="line">        test.templateMethod1(<span class="hljs-number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板方法模式&quot;&gt;&lt;a href=&quot;#模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式&quot;&gt;&lt;/a&gt;模板方法模式&lt;/h2&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="模板方法" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（四）：适配器模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（四）：适配器模式/</id>
    <published>2019-08-08T08:53:20.000Z</published>
    <updated>2019-08-08T09:11:57.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式（Adapter Pattern）是指将一个类的接口转换成客户期望的另一个接口，使原本的接口不兼容的类可以一起工作，属于结构型设计模式。 适配器适用于以下几种业务场景： </p><ol><li>已经存在的类，它的方法和需求不匹配（方法结果相同或相似）的情况。</li><li>适配器模式不是软件设计阶段考虑的设计模式，是随着软件维护，由于不同产品、不同厂家造成功能类似而接口不相同情况下的解决方案。有点亡羊补牢的感觉。</li></ol><p>生活中也非常的应用场景，例如电源插转换头、手机充电转换头、显示器转接头。在中国民用电都是220V 交流电，但我们手机使用的锂电池使用的 5V 直流电。因此，我们给手机充电时就需要使用电源适配器来进行转换。下面我们有代码来还原这个生活场 景，创建 AC220 类，表示 220V 交流电：</p><p>老版本逻辑</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AC220</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">outputAC220V</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> output = <span class="hljs-number">220</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"输出交流电"</span> + output + <span class="hljs-string">"V"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建适配器接口</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DC5</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">outputDC5V</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建适配器</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PowerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DC5</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> AC220 ac220;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PowerAdapter</span><span class="hljs-params">(AC220 ac220)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.ac220 = ac220;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">outputDC5V</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> adapterInput = ac220.outputAC220V(); <span class="hljs-comment">//变压器</span></span><br><span class="line">        <span class="hljs-keyword">int</span> adapterOutput = adapterInput / <span class="hljs-number">44</span>;</span><br><span class="line">        System.out.println(<span class="hljs-string">"使用 PowerAdapter 输入 AC:"</span> + adapterInput + <span class="hljs-string">"V"</span> + <span class="hljs-string">"输出 DC:"</span> + adapterOutput + <span class="hljs-string">"V"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> adapterOutput;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试适配器</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAdapter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DC5 dc5 = <span class="hljs-keyword">new</span> PowerAdapter(<span class="hljs-keyword">new</span> AC220());</span><br><span class="line">        dc5.outputDC5V();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适配器模式的优缺点"><a href="#适配器模式的优缺点" class="headerlink" title="适配器模式的优缺点"></a>适配器模式的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h5><ol><li>能提高类的透明性和复用，现有的类复用但不需要改变。 </li><li>目标类和适配器类解耦，提高程序的扩展性。 </li><li>在很多业务场景中符合开闭原则。 </li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h5><ol><li>适配器编写过程需要全面考虑，可能会增加系统的复杂性。 </li><li>增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;&lt;p&gt;适配器模式（Adapter Pattern）是指将一个类的接口转换成客户期望的另一个接口，使原本的接口不兼容的类可以
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="适配器" scheme="http://yoursite.com/tags/%E9%80%82%E9%85%8D%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（三）：装饰者模式</title>
    <link href="http://yoursite.com/2019/08/08/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/design-2019-08-设计模式（三）：装饰者模式/</id>
    <published>2019-08-08T08:28:17.000Z</published>
    <updated>2019-08-08T08:52:52.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>装饰者模式（Decorator Pattern）是指在不改变原有对象的基础之上，将功能附加到对 象上，提供了比继承更有弹性的替代方案（扩展原有对象的功能），属于结构型模式。</p><p>装饰模式主要包含以下角色。</p><ol><li>抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。</li><li>具体构件（Concrete    Component）角色：实现抽象构件，通过装饰角色为其添加一些职责。</li><li>抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li></ol><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>定义抽象构件</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IComponent</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 实现具体构件</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IComponent</span></span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"执行基本操作~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象装饰（抽象可选）</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IComponent</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> IComponent component;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstDecorator</span><span class="hljs-params">(IComponent component)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"执行抽象装饰"</span>);</span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现具体装饰</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstDecorator</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteDecorator</span><span class="hljs-params">(IComponent component)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">        <span class="hljs-keyword">super</span>.operation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"执行附加的装饰方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DecoratorTest</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IComponent component = <span class="hljs-keyword">new</span> ConcreteComponent();</span><br><span class="line">        IComponent d1 = <span class="hljs-keyword">new</span> ConcreteDecorator(component);</span><br><span class="line">        d1.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console打印如下：</p><blockquote><p>执行附加的装饰方法<br>执行抽象装饰<br>执行基本操作~</p></blockquote><h3 id="jdk典型装饰者场景：InputStream"><a href="#jdk典型装饰者场景：InputStream" class="headerlink" title="jdk典型装饰者场景：InputStream"></a>jdk典型装饰者场景：InputStream</h3><img src="/2019/08/08/design-2019-08-设计模式（三）：装饰者模式/inputstream.jpg" title="inputStream类图"><h3 id="与适配器模式的区别"><a href="#与适配器模式的区别" class="headerlink" title="与适配器模式的区别"></a>与适配器模式的区别</h3><table><thead><tr><th></th><th>装饰者模式</th><th>适配器模式</th></tr></thead><tbody><tr><td>形式</td><td>是一种特殊的适配器模式</td><td>没有层级关系，装饰者有层级关系</td></tr><tr><td>定义</td><td>装饰者和被装饰者都实现同一个接口，主要目的是为了扩展之后依旧保留OOP关系</td><td>适配器和被适配者没有必然的联系，通常是采用继承或代理的形式进行包装</td></tr><tr><td>关系</td><td>满足is-a的关系</td><td>满足has-a的关系</td></tr><tr><td>功能</td><td>注重覆盖、扩展</td><td>注重兼容、转换</td></tr><tr><td>设计</td><td>前置考虑</td><td>后置考虑（重构）</td></tr></tbody></table><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p><ul><li>装饰者是继承的有力补充，比继承灵活，不改变原有对象的情况下动态地给一个对象扩展功能，即插即用。</li><li>通过使用不同装饰类以及这些装饰类的排列组合，可以实现不同效果。</li><li>装饰者完全遵守开闭原则。</li></ul><p>缺点</p><ul><li>会出现更多的代码，更多的类，增加程序复杂性。</li><li>动态装饰时，多层装饰时会更复杂。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式&quot;&gt;&lt;/a&gt;装饰者模式&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="装饰者" scheme="http://yoursite.com/tags/%E8%A3%85%E9%A5%B0%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（二）：代理模式</title>
    <link href="http://yoursite.com/2019/08/04/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/04/design-2019-08-设计模式（二）：代理模式/</id>
    <published>2019-08-04T15:12:58.000Z</published>
    <updated>2019-08-08T09:11:57.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a>代理模式（Proxy Pattern）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>是指为其他对象提供一种代理，以控制对这个对象的访问。代理对象在客服端和目标对象之间起到中介作用，代理模式属于结构型设计模式。使用代理模式主要有两个目的：一、保护目标对象，二、增强目标对象。</p><h3 id="常见实现"><a href="#常见实现" class="headerlink" title="常见实现"></a>常见实现</h3><p>SpringAop</p><h3 id="静态代理（static-proxy）"><a href="#静态代理（static-proxy）" class="headerlink" title="静态代理（static proxy）"></a>静态代理（static proxy）</h3><p>抽象的说，就是代理对象持有被代理对象的引用进行方法增强。<br>举个例子：在深圳租房子，我们自己去找房很难直接联系上房东。一般会联系中介或者管理处（<code>proxy</code>），间接的租房。有的全权代理的房东坐等收钱，而中介可以在收租前后做各种不需要告诉老板的事，比如装修一番再涨个价赚取中间商差价。</p><h3 id="动态代理（dynamic-proxy）"><a href="#动态代理（dynamic-proxy）" class="headerlink" title="动态代理（dynamic proxy）"></a>动态代理（dynamic proxy）</h3><p>动态，指的是不直接引用被代理对象，并且可以代理不同的对象。Spring AOP面向切面编程的原理正是如此。<br>举个例子，快递公司要帮人寄送快递，但他不需要知道那个人是谁。只要按流程填写快递单就行了。“快递单”在这里就是被代理对象。沿用这个例子展开分析。</p><h4 id="1-JDK-Proxy"><a href="#1-JDK-Proxy" class="headerlink" title="1.JDK Proxy"></a>1.JDK Proxy</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Created by miaozc on 2019-8-2.</span></span><br><span class="line"><span class="hljs-comment"> * 快递公司-动态代理发送快递</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExpressCompanyJDKProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getInstance</span><span class="hljs-params">(Object object)</span><span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.target = object;</span><br><span class="line">        Class&lt;?&gt; clazz = target.getClass();</span><br><span class="line">        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(clazz.getClassLoader(),clazz.getInterfaces(),<span class="hljs-keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object object = method.invoke(<span class="hljs-keyword">this</span>.target,args);</span><br><span class="line">        send();</span><br><span class="line">        <span class="hljs-keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"jdk动态代理-快递公司发出快递！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ICustomer jdkCustomer = (ICustomer) <span class="hljs-keyword">new</span> ExpressCompanyJDKProxy().getInstance(<span class="hljs-keyword">new</span> Customer(<span class="hljs-string">"李四"</span>));</span><br><span class="line">jdkCustomer.send();</span><br></pre></td></tr></table></figure></p><p> JDK Proxy 采用字节重组，重新生的对象来替代原始的对象以达到动态代理 的目的。JDK Proxy 生成对象的步骤如下：</p><ol><li>拿到被代理对象的引用，反射获取它所有的接口。</li><li>JDK Proxy 类重新生成一个新的类、同时新的类要实现被代理类所有实现的所有的接口。</li><li>动态生成 Java 代码，把新加的业务逻辑方法由一定的逻辑代码去调用（在代码中体现）。</li><li>编译新生成的 Java 代码: $Proxy***.class。</li><li>再重新加载到 JVM 中运行。 </li></ol><p>以上这个过程就叫字节码重组。JDK 中有一个规范，在 ClassPath 下只要是$开头的 class文件一般都是自动生成的。查看代替后对象方式如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ICustomer jdkCustomer = (ICustomer) <span class="hljs-keyword">new</span> ExpressCompanyJDKProxy().getInstance(<span class="hljs-keyword">new</span> Customer(<span class="hljs-string">"李四"</span>));</span><br><span class="line"><span class="hljs-keyword">byte</span> [] bytes = ProxyGenerator.generateProxyClass(<span class="hljs-string">"$Proxy0"</span>,<span class="hljs-keyword">new</span> Class[]&#123;Person.class&#125;); FileOutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"E://$Proxy0.class"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-CGLib-Proxy"><a href="#2-CGLib-Proxy" class="headerlink" title="2. CGLib Proxy"></a>2. CGLib Proxy</h4><p>与JDK代理不同，CGLib 代理的目标对象不需要实现任何接口，它是通过动态继承目标对象实现的动态代理。这样的做法弊端就是<code>无法代理final关键字修饰的方法。</code>.好处则更加明显，在频繁调用代理的情况下，省去了反射带来的开销。</p><p>代理实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExpressCompanyCGLibProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getInstance</span><span class="hljs-params">(Class&lt;?&gt; clazz,Class[] argumentTypes, Object[] arguments)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        enhancer.setCallback(<span class="hljs-keyword">this</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span>(argumentTypes==<span class="hljs-keyword">null</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> enhancer.create();</span><br><span class="line">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> enhancer.create(argumentTypes, arguments);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object object = methodProxy.invokeSuper(o,objects);</span><br><span class="line">        send();</span><br><span class="line">        <span class="hljs-keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"cglib动态代理-快递公司发出快递！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//构造方法所需参数</span></span><br><span class="line">Class[] argumentTypes = <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;;</span><br><span class="line">Object[] personArguments = <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"王五"</span>&#125;;</span><br><span class="line">Object[] robotArguments = <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"二哈"</span>&#125;;</span><br><span class="line">Customer cglibCustomer = (Customer) <span class="hljs-keyword">new</span> ExpressCompanyCGLibProxy().</span><br><span class="line">    getInstance(Customer.class,argumentTypes,personArguments);</span><br><span class="line">Robot cglibRobot = (Robot) <span class="hljs-keyword">new</span> ExpressCompanyCGLibProxy().</span><br><span class="line">    getInstance(Robot.class,argumentTypes,robotArguments);</span><br><span class="line">Robot cglibRobotCreate = (Robot) <span class="hljs-keyword">new</span> ExpressCompanyCGLibProxy().</span><br><span class="line">    getInstance(Robot.class,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);</span><br><span class="line">cglibCustomer.send();</span><br><span class="line">cglibRobot.send();</span><br><span class="line">cglibRobotCreate.send();</span><br></pre></td></tr></table></figure><p>将 CGLib 代理后的 class 写入到磁盘：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//利用 cglib 的代理类可以将内存中的 class 文件写入本地磁盘 </span></span><br><span class="line"></span><br><span class="line">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY,<span class="hljs-string">"E://cglib_proxy_class/"</span>);</span><br><span class="line">ICustomer jdkCustomer = (ICustomer) <span class="hljs-keyword">new</span> ExpressCompanyJDKProxy().getInstance(<span class="hljs-keyword">new</span> Customer(<span class="hljs-string">"李四"</span>));</span><br></pre></td></tr></table></figure><p>我们会发现在 E://cglib_proxy_class 目录下多了三个 class 文件</p><ul><li><code>ObjectName$$EnhancerByCGLIB$$3feeb52a.class</code></li></ul><blockquote><p>CGLib生成的代理类，继承了被代理对象。重写了 被代理对象类的所有方法，并且生成代理的方法的增强逻辑以及增强逻辑所需要的方法。这直接导致了我们如果在拦截器里直接调用<code>method.invoke()</code>会死循环。所以我们切记在代理拦截器中应该使用<code>methodProxy.invokeSuper(o,objects)</code>。</p></blockquote><ul><li><code>ObjectName$$EnhancerByCGLIB$$3feeb52a$$FastClassByCGLIB$$6aad62f1.class</code></li></ul><blockquote><p>代理类的 FastClass。</p></blockquote><ul><li><code>Customer$$FastClassByCGLIB$$2669574a.class</code></li></ul><blockquote><p>被代理类的FastClass。</p><p>CGLib 动态代理执行代理方法效率之所以比 JDK的高是因为 Cglib 采用了 FastClass 机制，它的原理简单来说就是：为代理类和被代理类各生成一个 Class，这个 Class 会为代理类或被代理类的方法分配一个 index(int 类型)。这个 index 当做一个入参，FastClass就可以直接定位要调用的方法直接进行调用，这样省去了反射调用，所以调用效率比 JDK动态代理通过反射调用高。FastClass 并不是跟代理类一块生成的，而是在第一次执行 MethodProxy.invoke()/invokeSuper() 时生成的并放在了缓存中。</p></blockquote><h4 id="CGLib-和-JDK-动态代理对比"><a href="#CGLib-和-JDK-动态代理对比" class="headerlink" title="CGLib 和 JDK 动态代理对比"></a>CGLib 和 JDK 动态代理对比</h4><ol><li>JDK 动态代理是实现了被代理对象的接口，CGLib 是继承了被代理对象。</li><li>JDK 和 CGLib 都是在运行期生成字节码，JDK 是直接写 Class 字节码，CGLib 使用 ASM 框架写 Class 字节码，Cglib 代理实现更复杂，生成代理类比 JDK 效率低。</li><li>JDK 调用代理方法，是通过反射机制调用，CGLib 是通过 FastClass 机制直接调用方法， CGLib 执行效率更高。</li></ol><h3 id="Spring中的代理模式"><a href="#Spring中的代理模式" class="headerlink" title="Spring中的代理模式"></a>Spring中的代理模式</h3><h4 id="代理模式选择"><a href="#代理模式选择" class="headerlink" title="代理模式选择"></a>代理模式选择</h4><ol><li>当 Bean 有实现接口时，Spring 就会用 JDK 的动态代理 </li><li>当 Bean 没有实现接口时，Spring 选择 CGLib。</li><li>Spring 可以通过配置强制使用 CGLib，只需在 Spring 的配置文件中加入如下代码：</li></ol><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="静态代理和动态的本质区别"><a href="#静态代理和动态的本质区别" class="headerlink" title="静态代理和动态的本质区别"></a>静态代理和动态的本质区别</h3><ol><li><p>静态代理只能通过手动完成代理操作，如果被代理类增加新的方法，代理类需要同步新增，违背开闭原则。</p></li><li><p>动态代理采用在运行时动态生成代码的方式，取消了对被代理类的扩展限制，遵循开闭原则。 </p></li><li><p>若动态代理要对目标类的增强逻辑扩展，结合策略模式，只需要新增策略类便可完成，无需修改代理类的代码。</p></li></ol><h3 id="代理模式的优缺点"><a href="#代理模式的优缺点" class="headerlink" title="代理模式的优缺点"></a>代理模式的优缺点</h3><p>使用代理模式具有以下几个优点： </p><ol><li><p>代理模式能将代理对象与真实被调用的目标对象分离。 </p></li><li><p>一定程度上降低了系统的耦合度，扩展性好。 </p></li><li><p>可以起到保护目标对象的作用。 </p></li><li><p>可以对目标对象的功能增强。 </p></li></ol><p>当然，代理模式也是有缺点的：</p><ol><li><p>代理模式会造成系统设计中类的数量增加。 </p></li><li><p>在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢。 </p></li><li><p>增加了系统的复杂度。 </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代理模式（Proxy-Pattern）&quot;&gt;&lt;a href=&quot;#代理模式（Proxy-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;代理模式（Proxy Pattern）&quot;&gt;&lt;/a&gt;代理模式（Proxy Pattern）&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="代理" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（一）：单例模式</title>
    <link href="http://yoursite.com/2019/08/04/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/04/design-2019-08-设计模式（一）：单例模式/</id>
    <published>2019-08-04T14:49:26.000Z</published>
    <updated>2019-08-08T08:42:03.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式的应用场景"><a href="#单例模式的应用场景" class="headerlink" title="单例模式的应用场景"></a>单例模式的应用场景</h3><p>单例模式（Singleton Pattern）是指确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。单例模式是创建型模式。单例模式在现实生活中应用也非常广泛。 例如，国家主席、公司 CEO、部门经理等。在 J2EE标准中，ServletContext、 ServletContextConfig 等；在 Spring 框架应用中 ApplicationContext；数据库的连接池也都是单例形式。</p><h3 id="常见实现"><a href="#常见实现" class="headerlink" title="常见实现"></a>常见实现</h3><p>饿汉式单例：Spring中IOC容器ApplicationContext。</p><h3 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h3><p>饿汉式单例是在类加载的时候就立即初始化，并且创建单例对象。绝对线程安全，在线 程还没出现以前就是实例化了，不可能存在访问安全问题。</p><ul><li>优点：没有加任何的锁、执行效率比较高，在用户体验上来说，比懒汉式更好。</li><li>缺点：类加载的时候就初始化，不管用与不用都占着空间，浪费了内存，有可能占着茅坑不拉屎。</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HungrySingleton</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//法1</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> HungrySingleton instance = <span class="hljs-keyword">new</span> HungrySingleton();</span><br><span class="line">    <span class="hljs-comment">//法2</span></span><br><span class="line">    <span class="hljs-comment">//    static &#123;</span></span><br><span class="line">    <span class="hljs-comment">//        instance = new HungrySingleton();</span></span><br><span class="line">    <span class="hljs-comment">//    &#125;</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">HungrySingleton</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HungrySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h3><p>懒汉式单例的特点是：被外部类调用的时候内部类才会加载.</p><h4 id="1-同步锁懒汉式单例"><a href="#1-同步锁懒汉式单例" class="headerlink" title="1.同步锁懒汉式单例"></a>1.同步锁懒汉式单例</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> LazyDoubleCheckSingleton lazyDoubleCheckSingleton = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyDoubleCheckSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(lazyDoubleCheckSingleton ==<span class="hljs-keyword">null</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">synchronized</span>(LazyDoubleCheckSingleton.class)&#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(lazyDoubleCheckSingleton ==<span class="hljs-keyword">null</span>)&#123;</span><br><span class="line">                    lazyDoubleCheckSingleton = <span class="hljs-keyword">new</span> LazyDoubleCheckSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> lazyDoubleCheckSingleton;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-内部类懒汉式单例"><a href="#2-内部类懒汉式单例" class="headerlink" title="2.内部类懒汉式单例"></a>2.内部类懒汉式单例</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyInnerClassSingleton</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyInnerClassSingleton</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"构造方法"</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (LazyHolder.LAZY!=<span class="hljs-keyword">null</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"禁止通过反射创建此单例对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> LazyInnerClassSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"getInstance"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> LazyHolder.LAZY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 内部类一定是要在方法调用之前初始化，巧妙地避免了线程安全问题。</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyHolder</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> LazyInnerClassSingleton LAZY= <span class="hljs-keyword">new</span> LazyInnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String []s )</span></span>&#123;</span><br><span class="line">        LazyInnerClassSingleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册式单例"><a href="#注册式单例" class="headerlink" title="注册式单例"></a>注册式单例</h3><h4 id="1-容器缓存注册式单例"><a href="#1-容器缓存注册式单例" class="headerlink" title="1.容器缓存注册式单例"></a>1.容器缓存注册式单例</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContainerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ContainerSingleton</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String,Object&gt; instanceMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title">getBean</span><span class="hljs-params">(String className)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(className==<span class="hljs-keyword">null</span>||<span class="hljs-string">""</span>.equals(className.trim())) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">        <span class="hljs-keyword">synchronized</span>(instanceMap)&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (instanceMap.containsKey(className))&#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> instanceMap.get(className);</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                Object obj = <span class="hljs-keyword">null</span>;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    Class clazz = Class.forName(className);</span><br><span class="line">                    obj = clazz.newInstance();</span><br><span class="line">                    instanceMap.put(className,obj);</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-枚举注册式单例"><a href="#2-枚举注册式单例" class="headerlink" title="2.枚举注册式单例"></a>2.枚举注册式单例</h4><p>此方法即使通过反序列化也能获得单例</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> EnumSingleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="hljs-keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EnumSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单例模式的应用场景&quot;&gt;&lt;a href=&quot;#单例模式的应用场景&quot; class=&quot;headerlink&quot; title=&quot;单例模式的应用场景&quot;&gt;&lt;/a&gt;单例模式的应用场景&lt;/h3&gt;&lt;p&gt;单例模式（Singleton Pattern）是指确保一个类在任何情况下都绝对只有一
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式：七大原则</title>
    <link href="http://yoursite.com/2019/08/04/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/04/design-2019-08-设计模式：七大原则/</id>
    <published>2019-08-04T11:32:47.000Z</published>
    <updated>2019-08-04T16:36:49.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件架构设计的七大原则"><a href="#软件架构设计的七大原则" class="headerlink" title="软件架构设计的七大原则"></a>软件架构设计的七大原则</h2><h3 id="一、开闭原则"><a href="#一、开闭原则" class="headerlink" title="一、开闭原则"></a>一、开闭原则</h3><p>开闭原则（Open-Closed Principle, OCP）是指一个软件实体如类、模块和函数应该对 </p><p>扩展开放，对修改关闭。所谓的开闭，也正是对扩展和修改两个行为的一个原则。强调 </p><p>的是用抽象构建框架，用实现扩展细节。可以提高软件系统的可复用性及可维护性。开 </p><p>闭原则，是面向对象设计中最基础的设计原则。它指导我们如何建立稳定灵活的系统， </p><p>例如：我们版本更新，我尽可能不修改源代码，但是可以增加新功能。 </p><p>在现实生活中对于开闭原则也有体现。比如，很多互联网公司都实行弹性制作息时间， </p><p>规定每天工作 8 小时。意思就是说，对于每天工作 8 小时这个规定是关闭的，但是你什 </p><p>么时候来，什么时候走是开放的。早来早走，晚来晚走。</p><h3 id="二、依赖倒置原则"><a href="#二、依赖倒置原则" class="headerlink" title="二、依赖倒置原则"></a>二、依赖倒置原则</h3><p>依赖倒置原则（Dependence Inversion Principle,DIP）是指设计代码结构时，高层模 </p><p>块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节；细节应该依赖 </p><p>抽象。通过依赖倒置，可以减少类与类之间的耦合性，提高系统的稳定性，提高代码的 </p><p>可读性和可维护性，并能够降低修改程序所造成的风险。</p><h2 id="三、单一职责原则"><a href="#三、单一职责原则" class="headerlink" title="三、单一职责原则"></a>三、单一职责原则</h2><p>单一职责（Simple Responsibility Pinciple，SRP）是指不要存在多于一个导致类变更 </p><p>的原因。假设我们有一个 Class 负责两个职责，一旦发生需求变更，修改其中一个职责的</p><p>逻辑代码，有可能会导致另一个职责的功能发生故障。这样一来，这个 Class 存在两个导 </p><p>致类变更的原因。如何解决这个问题呢？我们就要给两个职责分别用两个 Class 来实现， </p><p>进行解耦。后期需求变更维护互不影响。这样的设计，可以降低类的复杂度，提高类的 </p><p>可 读 性 ， 提 高 系 统 的 可 维 护 性 ， 降 低 变 更 引 起 的 风 险 。 总 体 来 说 就 是 一 个 </p><p>Class/Interface/Method 只负责一项职责。 </p><h3 id="四、接口隔离原则"><a href="#四、接口隔离原则" class="headerlink" title="四、接口隔离原则"></a>四、接口隔离原则</h3><p>接口隔离原则（Interface Segregation Principle, ISP）是指用多个专门的接口，而不使 </p><p>用单一的总接口，客户端不应该依赖它不需要的接口。这个原则指导我们在设计接口时 </p><p>应当注意一下几点： </p><p>1、一个类对一类的依赖应该建立在最小的接口之上。 </p><p>2、建立单一接口，不要建立庞大臃肿的接口。 </p><p>3、尽量细化接口，接口中的方法尽量少（不是越少越好，一定要适度）。 </p><p>接口隔离原则符合我们常说的高内聚低耦合的设计思想，从而使得类具有很好的可读性、 </p><p>可扩展性和可维护性。我们在设计接口的时候，要多花时间去思考，要考虑业务模型， </p><p>包括以后有可能发生变更的地方还要做一些预判。所以，对于抽象，对业务模型的理解 </p><p>是非常重要的。</p><h3 id="五、迪米特法则"><a href="#五、迪米特法则" class="headerlink" title="五、迪米特法则"></a>五、迪米特法则</h3><p>迪米特原则（Law of Demeter LoD）是指一个对象应该对其他对象保持最少的了解，又 叫最少知道原则（Least Knowledge Principle,LKP），尽量降低类与类之间的耦合。迪 米特原则主要强调只和朋友交流，不和陌生人说话。出现在成员变量、方法的输入、输 出参数中的类都可以称之为成员朋友类，而出现在方法体内部的类不属于朋友类。</p><h3 id="六、里氏替换原则"><a href="#六、里氏替换原则" class="headerlink" title="六、里氏替换原则"></a>六、里氏替换原则</h3><p>里氏替换原则（Liskov Substitution Principle,LSP）是指如果对每一个类型为 T1 的对 象 o1,都有类型为 T2 的对象 o2,使得以 T1 定义的所有程序 P 在所有的对象 o1 都替换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。 定义看上去还是比较抽象，我们重新理解一下，可以理解为一个软件实体如果适用一个 父类的话，那一定是适用于其子类，所有引用父类的地方必须能透明地使用其子类的对 象，子类对象能够替换父类对象，而程序逻辑不变。根据这个理解，我们总结一下： 引申含义：子类可以扩展父类的功能，但不能改变父类原有的功能。</p><ol><li><p>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。 </p></li><li><p>子类中可以增加自己特有的方法。 </p></li><li><p>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入/入参）要比父类 </p><p>方法的输入参数更宽松。 </p></li><li><p>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即 </p><p>方法的输出/返回值）要比父类更严格或相等。</p></li></ol><p>使用里氏替换原则有以下优点： </p><ol><li><p>约束继承泛滥，开闭原则的一种体现。 </p></li><li><p>加强程序的健壮性，同时变更时也可以做到非常好的兼容性，提高程序的维护性、扩 </p><p>展性。降低需求变更时引入的风险。 </p></li></ol><p>里氏替换原则只存在父类与子类之间，约束继承泛滥。</p><h3 id="七、合成复用原则"><a href="#七、合成复用原则" class="headerlink" title="七、合成复用原则"></a>七、合成复用原则</h3><p>合成复用原则（Composite/Aggregate Reuse Principle,CARP）是指尽量使用对象组 </p><p>合(has-a)/聚合(contanis-a)，而不是继承关系达到软件复用的目的。可以使系统更加灵 </p><p>活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少。 </p><p>继承我们叫做白箱复用，相当于把所有的实现细节暴露给子类。组合/聚合也称之为黑箱 </p><p>复用，对类以外的对象是无法获取到实现细节的。要根据具体的业务场景来做代码设计， </p><p>其实也都需要遵循 OOP 模型。</p><h3 id="设计原则总结"><a href="#设计原则总结" class="headerlink" title="设计原则总结"></a>设计原则总结</h3><p>学习设计原则，学习设计模式的基础。在实际开发过程中，并不是一定要求所有代码都 遵循设计原则，我们要考虑人力、时间、成本、质量，不是刻意追求完美，要在适当的 场景遵循设计原则，体现的是一种平衡取舍，帮助我们设计出更加优雅的代码结构。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件架构设计的七大原则&quot;&gt;&lt;a href=&quot;#软件架构设计的七大原则&quot; class=&quot;headerlink&quot; title=&quot;软件架构设计的七大原则&quot;&gt;&lt;/a&gt;软件架构设计的七大原则&lt;/h2&gt;&lt;h3 id=&quot;一、开闭原则&quot;&gt;&lt;a href=&quot;#一、开闭原则&quot; cla
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式：分类</title>
    <link href="http://yoursite.com/2019/08/04/design-2019-08-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%88%86%E7%B1%BB/"/>
    <id>http://yoursite.com/2019/08/04/design-2019-08-设计模式：分类/</id>
    <published>2019-08-04T10:30:57.000Z</published>
    <updated>2019-08-04T16:36:49.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><h3 id="跟据其目的（模式是用来做什么的）"><a href="#跟据其目的（模式是用来做什么的）" class="headerlink" title="跟据其目的（模式是用来做什么的）"></a>跟据其目的（模式是用来做什么的）</h3><h4 id="一、创建型-Creational"><a href="#一、创建型-Creational" class="headerlink" title="一、创建型(Creational)"></a>一、创建型(Creational)</h4><p>创建型模式主要用于创建对象。</p><ol><li>抽象工厂模式(Abstract Factory)</li><li>建造者模式(Builder)</li><li>工厂方法模式(Factory Method)</li><li>原型模式(Prototype)</li><li>单例模式(Singleton)</li></ol><h4 id="二、结构型-Structural"><a href="#二、结构型-Structural" class="headerlink" title="二、结构型(Structural)"></a>二、结构型(Structural)</h4><p>结构型模式主要用于处理类或对象的组合。</p><ol><li>适配器模式(Adapter)</li><li>桥接模式(Bridge)</li><li>组合模式(Composite)</li><li>装饰模式(Decorator)</li><li>外观模式(Facade)</li><li>享元模式(Flyweight)</li><li>代理模式(Proxy)</li></ol><h4 id="三、行为型模式"><a href="#三、行为型模式" class="headerlink" title="三、行为型模式"></a>三、行为型模式</h4><p>行为型模式主要用于描述对类或对象怎样交互和怎样分配职责。</p><ol><li>职责链模式(Chain of Responsibility)</li><li>命令模式(Command)</li><li>解释器模式(Interpreter)</li><li>迭代器模式(Iterator)</li><li>中介者模式(Mediator)</li><li>备忘录模式(Memento)</li><li>观察者模式(Observer)</li><li>状态模式(State)</li><li>策略模式(Strategy)</li><li>模板方法模式(Template Method)</li><li>访问者模式(Visitor)</li></ol><h3 id="根据范围（模式主要是用于处理类之间关系还是处理对象之间的关系）"><a href="#根据范围（模式主要是用于处理类之间关系还是处理对象之间的关系）" class="headerlink" title="根据范围（模式主要是用于处理类之间关系还是处理对象之间的关系）"></a>根据<strong>范围</strong>（模式主要是用于处理类之间关系还是处理对象之间的关系）</h3><p>可分为<strong>类模式</strong>和<strong>对象模式</strong>两种</p><ul><li>类模式处理类和子类之间的关系，这些关系通过继承建立，在编译时就被确定下来，是属于静态的。</li><li>对象模式处理对象间的关系，这些关系在运行时刻变化，更具动态性。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式的分类&quot;&gt;&lt;a href=&quot;#设计模式的分类&quot; class=&quot;headerlink&quot; title=&quot;设计模式的分类&quot;&gt;&lt;/a&gt;设计模式的分类&lt;/h2&gt;&lt;h3 id=&quot;跟据其目的（模式是用来做什么的）&quot;&gt;&lt;a href=&quot;#跟据其目的（模式是用来做什么的）&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习（六）：其他命令</title>
    <link href="http://yoursite.com/2019/05/06/linux-2019-05-Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/05/06/linux-2019-05-Linux学习（六）：其他命令/</id>
    <published>2019-05-06T06:22:52.000Z</published>
    <updated>2019-05-06T06:23:29.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="which-查看命令位置"><a href="#which-查看命令位置" class="headerlink" title="which 查看命令位置"></a><code>which</code> 查看命令位置</h2><blockquote><p><code>which zip</code> 查看<code>zip</code>命令的可执行文件所在位置，但无法查找<code>cd</code>这样的shell类型命令。</p></blockquote><h2 id="su-切换账号"><a href="#su-切换账号" class="headerlink" title="su 切换账号"></a><code>su</code> 切换账号</h2><blockquote><p><code>su</code> Centos下切换到root用户命令<br><code>su test</code> 切换到test用户<br>   root切换其他用户不用输入密码，反之要输入密码。</p></blockquote><h2 id="passwd-重置密码"><a href="#passwd-重置密码" class="headerlink" title="passwd 重置密码"></a><code>passwd</code> 重置密码</h2><blockquote><p><code>passwd</code> 修改当前用户密码，密码有复杂度要求<br><code>passwd test</code> 切换到root后执行该命令，修改test用户密码，无强制要求密码复杂度</p></blockquote><h2 id="exit-退出当前用户"><a href="#exit-退出当前用户" class="headerlink" title="exit 退出当前用户"></a><code>exit</code> 退出当前用户</h2><blockquote><p> 注意：如果使用<code>su</code> 登录root后再使用<code>exit</code> 只是退出root，当前窗口不会关闭。</p></blockquote><h2 id="who-查看当前登录的客户端，或者当前登录的命令终端"><a href="#who-查看当前登录的客户端，或者当前登录的命令终端" class="headerlink" title="who 查看当前登录的客户端，或者当前登录的命令终端"></a><code>who</code> 查看当前登录的客户端，或者当前登录的命令终端</h2><blockquote><p>“pts”代表终端<br>“tty”代表用户登录了操作系统<br><code>pkill -kill -t tty1</code> 杀死一个客户端连接</p></blockquote><h2 id="reboot、shutdown-重启、关机"><a href="#reboot、shutdown-重启、关机" class="headerlink" title="reboot、shutdown 重启、关机"></a><code>reboot、shutdown</code> 重启、关机</h2><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>reboot</code></td><td>重新启动操作系统</td></tr><tr><td><code>shutdown -r now</code></td><td>重启操作系统，shutdown会给别的用户提示</td></tr><tr><td><code>shutdown -h now</code></td><td>立刻关机，其中now代表时间为0的状态</td></tr><tr><td><code>shutdown -h 20:35</code></td><td>系统在今天的20:35会关机</td></tr><tr><td><code>shutdown -h +10</code></td><td>系统在十分钟之后自动关机 ，要取消则按<code>ctrl+c</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;which-查看命令位置&quot;&gt;&lt;a href=&quot;#which-查看命令位置&quot; class=&quot;headerlink&quot; title=&quot;which 查看命令位置&quot;&gt;&lt;/a&gt;&lt;code&gt;which&lt;/code&gt; 查看命令位置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;cod
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习（五）：文件解压缩</title>
    <link href="http://yoursite.com/2019/05/06/linux-2019-05-Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
    <id>http://yoursite.com/2019/05/06/linux-2019-05-Linux学习（五）：文件解压缩/</id>
    <published>2019-05-06T06:22:13.000Z</published>
    <updated>2019-05-06T06:23:35.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件解压缩"><a href="#文件解压缩" class="headerlink" title="文件解压缩"></a>文件解压缩</h2><h3 id="tar-归档-打包"><a href="#tar-归档-打包" class="headerlink" title="tar 归档 打包"></a><code>tar</code> 归档 打包</h3><ol><li><p>打包</p><blockquote><ul><li><code>tar cvf a.tar 1.txt 2.txt</code> ：<code>f</code>必须放到最后，f后面的第一个参数代表要生成的文件名，后面所有的参数是要打包的文件</li><li><code>tar tf a.tar</code> ： 列出包里面的文件</li></ul></blockquote></li><li><p>解包</p><blockquote><ul><li><code>tar xvf a.tar</code> 如果没有写目录，把包里面的文件解开放到当前目录</li><li><code>tar xvf a.tar -C tar</code> 解压到指定文件夹，文件夹需要提前创建好</li></ul></blockquote></li></ol><h3 id="gzip-压缩文件"><a href="#gzip-压缩文件" class="headerlink" title="gzip 压缩文件"></a><code>gzip</code> 压缩文件</h3><ol><li>生成压缩文件<blockquote><p>① 打包<br><code>tar cf a.tar *</code> 生成a.tar<br>② 压缩<br><code>gzip -r a.tar</code> 生成a.tar.gz文件</p></blockquote></li><li><p>解压压缩文件</p><blockquote><p>① 解压<br><code>gzip -d a.tar.gz</code> 生成a.tar<br>② 解包<br><code>tar xf a.tar -C ~/atar</code> 解包到指定文件夹中</p><ol start="3"><li>一步到位打包并且压缩<br><code>tar czf b.tar.gz *.txt</code> 以gzip的方式打包并且压缩</li><li>一步到位解压并且解包<br><code>tar zxf b.tar.gz -C btar</code> 以gzip的方式解压缩并且解包 </li></ol></blockquote><h3 id="bzip2-压缩文件（用法同gzip）"><a href="#bzip2-压缩文件（用法同gzip）" class="headerlink" title="bzip2 压缩文件（用法同gzip）"></a><code>bzip2</code> 压缩文件（用法同gzip）</h3></li><li><p>压缩</p><blockquote><p><code>tar jcf j.tar.bz2 *.txt</code> 压缩文件</p></blockquote></li><li><p>解压</p><blockquote><p><code>tar xjf j.tar.bz2 -C jtar</code> 解压文件</p></blockquote></li></ol><h3 id="zip-压缩文件"><a href="#zip-压缩文件" class="headerlink" title="zip 压缩文件"></a><code>zip</code> 压缩文件</h3><ol><li>压缩<blockquote><p><code>zip -r zz *.txt</code>   <code>zz</code> 代表要生成的压缩文件，不需要写扩展名，会自动生成zip扩展名</p></blockquote></li><li>解压<blockquote><p><code>uzip -d zz zz.zip</code> 解压时会自动创建目录</p></blockquote><h3 id="压缩率-zip-lt-gzip-lt-bzip2"><a href="#压缩率-zip-lt-gzip-lt-bzip2" class="headerlink" title="压缩率    zip&lt;gzip&lt;bzip2"></a>压缩率    zip&lt;gzip&lt;bzip2</h3></li></ol><h3 id="通用性-zip-gt-gzip-gt-bzip2"><a href="#通用性-zip-gt-gzip-gt-bzip2" class="headerlink" title="通用性    zip&gt;gzip&gt;bzip2"></a>通用性    zip&gt;gzip&gt;bzip2</h3><p>综合考虑：linux系统中一般使用gzip</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件解压缩&quot;&gt;&lt;a href=&quot;#文件解压缩&quot; class=&quot;headerlink&quot; title=&quot;文件解压缩&quot;&gt;&lt;/a&gt;文件解压缩&lt;/h2&gt;&lt;h3 id=&quot;tar-归档-打包&quot;&gt;&lt;a href=&quot;#tar-归档-打包&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习（四）：四剑客之二（grep、find）</title>
    <link href="http://yoursite.com/2019/05/06/linux-2019-05-Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%9B%9B%E5%89%91%E5%AE%A2%E4%B9%8B%E4%BA%8C%EF%BC%88grep%E3%80%81find%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/06/linux-2019-05-Linux学习（四）：四剑客之二（grep、find）/</id>
    <published>2019-05-06T06:21:30.000Z</published>
    <updated>2019-05-06T06:21:45.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux四剑客"><a href="#linux四剑客" class="headerlink" title="linux四剑客"></a>linux四剑客</h2><h3 id="grep-查找文件内容"><a href="#grep-查找文件内容" class="headerlink" title="grep 查找文件内容"></a><code>grep</code> 查找文件内容</h3><blockquote><ul><li><code>grep hello test.txt</code> 在某个文件中查找包含hello的内容，只要一行中有hello会把整行显示</li><li><code>grep -niv helle test.txt</code> <code>n</code>显示查找到的内容行号，<code>i</code>查找时不区分大小写，<code>v</code>反向查找（查找不包含hello的行）</li><li><code>grep -n hello home/admin -r</code> 查找整个目录中的所有文件，包含hello的内容</li></ul></blockquote><h3 id="find-查找文件"><a href="#find-查找文件" class="headerlink" title="find 查找文件"></a><code>find</code> 查找文件</h3><blockquote><ul><li><code>find /home -name 1.txt</code> 在/home目录下查找文件名为1.txt的文件，输出文件路径</li><li><code>find /home -name &#39;*.txt&#39;</code>在/home目录下查找所有后缀为.txt的文件。注意：如果查找模糊文件名，需对文件名参数加上引号。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux四剑客&quot;&gt;&lt;a href=&quot;#linux四剑客&quot; class=&quot;headerlink&quot; title=&quot;linux四剑客&quot;&gt;&lt;/a&gt;linux四剑客&lt;/h2&gt;&lt;h3 id=&quot;grep-查找文件内容&quot;&gt;&lt;a href=&quot;#grep-查找文件内容&quot; class
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习（三）：管道和链接</title>
    <link href="http://yoursite.com/2019/05/06/linux-2019-05-Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%AE%A1%E9%81%93%E5%92%8C%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/05/06/linux-2019-05-Linux学习（三）：管道和链接/</id>
    <published>2019-05-06T06:20:28.000Z</published>
    <updated>2019-05-06T06:21:01.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管道和链接"><a href="#管道和链接" class="headerlink" title="管道和链接"></a>管道和链接</h2><h3 id="1-管道"><a href="#1-管道" class="headerlink" title="1.|管道"></a>1.<code>|</code>管道</h3><ol><li><blockquote><p><code>ls -l / | more</code> 一个命令的输出可以通过管道交给另一个命令的输出</p></blockquote></li></ol><h3 id="2-ln链接"><a href="#2-ln链接" class="headerlink" title="2.ln链接"></a>2.<code>ln</code>链接</h3><ol><li><p>软链接：软链接不占用磁盘空间，源文件删除则软链接失效。</p><blockquote><p><code>ln -s 源文件 链接文件</code><br> 注意：如果软链接文件和源文件不在统一目录，源文件要使用绝对路径，不能使用相对路径，因为软链接只会记录路径名称。</p></blockquote></li></ol><ol start="2"><li>硬链接：硬链接只能链接普通文件，不能链接目录。本身占用空间，与源文件同步发生变化，使用<code>ll</code>查看文件时，有一个数字，代表有几个文件能同步发生变化。<blockquote><p><code>ln 源文件 链接文件</code> </p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;管道和链接&quot;&gt;&lt;a href=&quot;#管道和链接&quot; class=&quot;headerlink&quot; title=&quot;管道和链接&quot;&gt;&lt;/a&gt;管道和链接&lt;/h2&gt;&lt;h3 id=&quot;1-管道&quot;&gt;&lt;a href=&quot;#1-管道&quot; class=&quot;headerlink&quot; title=&quot;1.|管道
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习（二）：权限及通配符</title>
    <link href="http://yoursite.com/2019/05/06/linux-2019-05-Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%9D%83%E9%99%90%E5%8F%8A%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    <id>http://yoursite.com/2019/05/06/linux-2019-05-Linux学习（二）：权限及通配符/</id>
    <published>2019-05-06T06:09:56.000Z</published>
    <updated>2019-05-06T06:13:31.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ls-查看权限"><a href="#ls-查看权限" class="headerlink" title="ls 查看权限"></a><code>ls</code> 查看权限</h2><p>执行<code>touch a</code> 新建文件<strong>a</strong>,执行命令 <code>ll -h</code>查看列表<br><img src="https://img-blog.csdnimg.cn/20190104111410700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNTY2MTU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>文件<strong>a</strong>的详细信息（下面用作例子详细介绍）</p><blockquote><p>-rw-rw-r–. 1 test test 0 1月   4 11:11 a</p></blockquote><table><thead><tr><th>解读\列名</th><th>权限</th><th>硬件链接数</th><th>文件属主</th><th>文件所属的组</th><th>文件大小</th><th>文件修改时间</th><th>文件名</th></tr></thead><tbody><tr><td>信息</td><td>-rw-rw-r–.</td><td>1</td><td>test</td><td>test</td><td>0</td><td>1月   4 11:11</td><td>a</td></tr><tr><td>详解1</td><td>第一个字符<code>[-d]</code>，<code>d</code>代表文件夹，<code>-</code>代表文件</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>详解2</td><td>第一个字符后9个字符分为三组<code>[-rwx][-rwx][-rwx]</code>。<code>r</code>代表可读，<code>w</code>代表可写，<code>x</code>代表可执行<code>-</code>代表非。</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>详解3</td><td>三组<code>[-rwx][-rwx][-rwx]</code>中。第一组：当前用户的权限，第二组：当前用户组对文件的权限，第三组：其他用户组的权限</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>文件夹<strong>ceshi</strong>的详细信息</p><blockquote><p>drwxrwxr-x. 2 test test 6 1月   4 11:10 ceshi</p></blockquote><h2 id="chmod设置权限"><a href="#chmod设置权限" class="headerlink" title="chmod设置权限"></a><code>chmod</code>设置权限</h2><h3 id="1-chmod字母法"><a href="#1-chmod字母法" class="headerlink" title="1.chmod字母法"></a>1.<code>chmod</code>字母法</h3><blockquote><p>语  法： <code>chmod [ugoa] [+-=] [rwx] 文件</code><br>demo：<code>chmod u+x test.txt</code> 给文件拥有者添加可执行权限</p><ul><li>u:user表示文件所有者</li><li>g：group 表示文件所有者属于同一组（group）者，即用户组</li><li>o：other表示其他人</li><li>a：All 表示所有人</li><li>+：增加权限 </li><li>-：撤销权限</li><li>=：设定权限</li><li>r：red 表示可读取，对于一个目录，如果没有r权限，那么就意味着不能通过<code>ls</code>查看这个目录的内容</li><li>w：write表示可写入，对于一个目录，如果没有w权限，那么就意味着不能再目录下创建文件</li><li>x：excute 表示可执行，对于一个目录，如果没有x权限，就意味着不能通过<code>cd</code>进入这个目录。</li></ul></blockquote><h3 id="2-chmod数字法"><a href="#2-chmod数字法" class="headerlink" title="2.chmod数字法"></a>2.<code>chmod</code>数字法</h3><blockquote><p>语  法：<code>chmod [124][124][124] 文件</code></p></blockquote><table><thead><tr><th>数字</th><th>说明</th></tr></thead><tbody><tr><td>4</td><td>r 读取权限</td></tr><tr><td>2</td><td>w 写入权限</td></tr><tr><td>1</td><td>x 执行权限</td></tr><tr><td>0</td><td>- 不具任何权限</td></tr></tbody></table><blockquote><p>demo：<code>chmod 123 a.txt</code></p><ul><li>第一位数字代表自己的权限</li><li>第二位数字代表自己组的权限</li><li>第三位数字代表其他人的权限</li><li>3 =1+2 代表w+x</li></ul></blockquote><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><table><thead><tr><th style="text-align:left">通配符</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">代表文件名中所有字符</td></tr><tr><td style="text-align:left"><code>ls te*</code></td><td style="text-align:left">查找以te开头的文件</td></tr><tr><td style="text-align:left"><code>ls *html</code></td><td style="text-align:left">查找html结尾的文件</td></tr><tr><td style="text-align:left"><code>？</code></td><td style="text-align:left">代表文件名任意一个字符</td></tr><tr><td style="text-align:left"><code>ls ?.c</code></td><td style="text-align:left">只找第一个字符任意，后缀为.c的文件</td></tr><tr><td style="text-align:left"><code>[abc]</code></td><td style="text-align:left">匹配abc中任意一个</td></tr><tr><td style="text-align:left"><code>[a-f]</code></td><td style="text-align:left">匹配从a到f    范围内的任意一个字符</td></tr><tr><td style="text-align:left"><code>ls [a-f]*</code></td><td style="text-align:left">找到从a到f范围内的任意一个字符开头的文件</td></tr><tr><td style="text-align:left"><code>ls a-f</code></td><td style="text-align:left">找到名字为a-f的文件，当<code>-</code>处于<code>[]</code>之外失去通配符的作用</td></tr><tr><td style="text-align:left"><code>\</code></td><td style="text-align:left">转义字符</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ls-查看权限&quot;&gt;&lt;a href=&quot;#ls-查看权限&quot; class=&quot;headerlink&quot; title=&quot;ls 查看权限&quot;&gt;&lt;/a&gt;&lt;code&gt;ls&lt;/code&gt; 查看权限&lt;/h2&gt;&lt;p&gt;执行&lt;code&gt;touch a&lt;/code&gt; 新建文件&lt;strong&gt;a&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习（一）：命令基本使用</title>
    <link href="http://yoursite.com/2019/05/06/linux-2019-05-Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/05/06/linux-2019-05-Linux学习（一）：命令基本使用/</id>
    <published>2019-05-06T06:05:31.000Z</published>
    <updated>2019-05-06T06:08:31.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用Linux命令的基本使用"><a href="#常用Linux命令的基本使用" class="headerlink" title="常用Linux命令的基本使用"></a>常用Linux命令的基本使用</h1><h2 id="1-cd-切换文件夹（change-directory）"><a href="#1-cd-切换文件夹（change-directory）" class="headerlink" title="1.cd  切换文件夹（change directory）"></a>1.<code>cd</code>  切换文件夹（change directory）</h2><blockquote><ul><li><code>cd /home</code>绝对路径，以根目录开头</li><li><code>cd admin</code>相对路径，不以根目录开头</li><li><code>cd ..</code> 返回上一级目录 </li><li><code>cd ~</code> 到自己家的目录（/home/admin）</li><li><code>cd -</code> 在<strong>当前目录</strong>和最近的一个<strong>历史操作目录</strong>切换</li></ul></blockquote><h2 id="2-pwd-查看当前目录所在路径（print-wrok-directory）"><a href="#2-pwd-查看当前目录所在路径（print-wrok-directory）" class="headerlink" title="2.pwd 查看当前目录所在路径（print wrok directory）"></a>2.<code>pwd</code> 查看当前目录所在路径（print wrok directory）</h2><h2 id="3-ls-查看当前目录内容（list）"><a href="#3-ls-查看当前目录内容（list）" class="headerlink" title="3.ls 查看当前目录内容（list）"></a>3.<code>ls</code> 查看当前目录内容（list）</h2><blockquote><ul><li><code>ls -l</code> 显示详细列表</li><li><code>ls -lh</code> 把文件大小以人性化的方式显示</li><li><code>ls -a</code> 显示所有文件，包含隐藏文件，隐藏文件是<code>.</code>开头的文件</li><li><code>ll</code> 等于<code>ls -l</code></li><li>命令可组合使用，比如<code>ll -a</code> 、<code>ls -hla</code>。 <code>-</code>后面的关键词顺序不固定</li></ul></blockquote><h2 id="4-mkdir-创建目录（make-directory）"><a href="#4-mkdir-创建目录（make-directory）" class="headerlink" title="4.mkdir 创建目录（make directory）"></a>4.<code>mkdir</code> 创建目录（make directory）</h2><blockquote><ul><li><code>mkdir test</code> 在当前目录创建文件夹取名“test”</li><li><code>mkdir /home/admin/test</code> 在绝对路径创建文件夹</li><li><code>mkdir /home/admin/a/test -p</code> 如果上级目录不存在，加上<code>-p</code>自动创建目录</li><li><code>mkdir test1 test2</code> 在当前目录创建多个文件夹 </li><li><code>mkdir a/{b,c}</code> 在指定目录下创建多个文件夹</li><li><code>mkdir .test</code> 以<code>.</code>开头创建隐藏文件夹</li><li>每个目录下都有<code>.</code>、<code>..</code> 两个隐藏目录</li></ul></blockquote><h2 id="5-touch-如果文件不存在，新建文件（touch）"><a href="#5-touch-如果文件不存在，新建文件（touch）" class="headerlink" title="5.touch 如果文件不存在，新建文件（touch）"></a>5.<code>touch</code> 如果文件不存在，新建文件（touch）</h2><blockquote><ul><li><code>touch abc.txt</code> 在当前目录下创建，如果指定了目录，必须保证上级目录存在</li><li><code>touch .abc</code> 创建隐藏文件</li><li><code>gedit abc.txt</code> 打开文件进行编辑，如果文件不存在则创建文件</li></ul></blockquote><h2 id="6-rm-删除指定文件名（remove）"><a href="#6-rm-删除指定文件名（remove）" class="headerlink" title="6.rm 删除指定文件名（remove）"></a>6.<code>rm</code> 删除指定文件名（remove）</h2><blockquote><ul><li><code>rm a.txt</code> 删除文件</li><li><code>rm abc -r</code> 删除文件夹</li><li><code>rm * -r</code> 删除所有文件和文件夹（不能删除隐藏文件）</li></ul></blockquote><h2 id="7-clear-清屏（clear）"><a href="#7-clear-清屏（clear）" class="headerlink" title="7.clear  清屏（clear）"></a>7.<code>clear</code>  清屏（clear）</h2><h2 id="8-cp-拷贝文件（copy）"><a href="#8-cp-拷贝文件（copy）" class="headerlink" title="8.cp 拷贝文件（copy）"></a>8.<code>cp</code> 拷贝文件（copy）</h2><blockquote><ul><li><code>cp a.txt b.txt</code> 拷贝源文件a.txt到目标文件b.txt</li><li><code>cp abc abc_bak -r</code> 拷贝文件夹</li></ul></blockquote><table><thead><tr><th><code>cp</code>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-a</code></td><td>该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。</td></tr><tr><td><code>-f</code></td><td>不常用，默认会加上。覆盖已经存在的目标文件而不提示</td></tr><tr><td><code>-i</code></td><td>交互式复制，在覆盖目标文件之前将给出提示要求用户确认</td></tr><tr><td><code>-r</code></td><td>若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名。</td></tr><tr><td><code>-v</code></td><td>显示拷贝进度</td></tr></tbody></table><h2 id="9-mv-移动-剪切、重命名（move）"><a href="#9-mv-移动-剪切、重命名（move）" class="headerlink" title="9.mv 移动/剪切、重命名（move）"></a>9.<code>mv</code> 移动/剪切、重命名（move）</h2><blockquote><ul><li><code>mv a.txt a</code> 剪切a.txt到a文件夹下，如果要改名字修改后者路径即可  </li></ul></blockquote><table><thead><tr><th><code>mv</code>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-f</code></td><td>禁止交互式操作，如果覆盖也不会给出提示</td></tr><tr><td><code>-i</code></td><td>确认交互方式操作，如果mv操作将导致对已存在的目标文件的覆盖，系统会询问用户回答以避免误覆盖文件</td></tr><tr><td><code>-v</code></td><td>显示移动进度</td></tr></tbody></table><p>注意：<code>mv</code>对文件夹可以直接移动，不需要<code>-r</code></p><h2 id="10-gt-重定向"><a href="#10-gt-重定向" class="headerlink" title="10.&gt; 重定向"></a>10.<code>&gt;</code> 重定向</h2><blockquote><ul><li><code>ls &gt; 1.txt</code> 把<code>ls</code>命令返回的结果输出到文件中，会覆盖之前的数据，默认情况<code>ls</code>的返回结果是显示在屏幕中</li><li><code>ls&gt;&gt;1.txt</code>把<code>ls</code>命令返回的结果输出到1.txt中，以追加的方式。</li></ul></blockquote><h2 id="11-cat查看文件内容"><a href="#11-cat查看文件内容" class="headerlink" title="11.cat查看文件内容"></a>11.<code>cat</code>查看文件内容</h2><blockquote><ul><li><code>cat 1.txt</code> 把文件的内容全部显示到屏幕中</li><li><code>cat 1.txt 2.txt</code> 把两个文件内容全部显示到屏幕中</li><li><code>cat 1.txt 2.txt &gt;3.txt</code>把多个文件的内容合并到新的文件中</li></ul></blockquote><h2 id="12-more查看文件内容，可以分页显示"><a href="#12-more查看文件内容，可以分页显示" class="headerlink" title="12.more查看文件内容，可以分页显示"></a>12.<code>more</code>查看文件内容，可以分页显示</h2><blockquote><ul><li><code>more 1.txt</code> 查看内容多的文件，按空格键往下翻页，按b键往回翻页，按enter下一行，按q键退出</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用Linux命令的基本使用&quot;&gt;&lt;a href=&quot;#常用Linux命令的基本使用&quot; class=&quot;headerlink&quot; title=&quot;常用Linux命令的基本使用&quot;&gt;&lt;/a&gt;常用Linux命令的基本使用&lt;/h1&gt;&lt;h2 id=&quot;1-cd-切换文件夹（change
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
